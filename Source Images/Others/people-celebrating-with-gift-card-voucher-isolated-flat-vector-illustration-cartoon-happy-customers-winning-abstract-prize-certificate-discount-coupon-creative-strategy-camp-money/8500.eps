%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: EAN W31 2363.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Виталий Викторович
%%CreationDate: 7/30/2020
%%BoundingBox: 0 0 2800 2000
%%HiResBoundingBox: 0 0 2800 1999.9996
%%CropBox: 0 0 2800 1999.9996
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c148 79.163858, 2019/03/06-03:18:36        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator CS6 (Windows)"
   xmp:CreateDate="2020-07-30T12:58:57+03:00"
   xmp:ModifyDate="2020-07-30T12:59:02+03:00"
   xmp:MetadataDate="2020-08-13T19:10:52+06:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:DDFDE8444BD2EA11A82193B1173872B6"
   xmpMM:InstanceID="xmp.iid:8e984a7f-f75f-2b4a-90df-04e7e27fbfcd"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">People celebrating with gift card voucher</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">People celebrating with gift card voucher isolated flat vector illustration. Cartoon happy customers winning abstract prize, certificate or discount coupon. Creative strategy camp and money concept</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>voucher</rdf:li>
     <rdf:li>coupon</rdf:li>
     <rdf:li>gift</rdf:li>
     <rdf:li>people</rdf:li>
     <rdf:li>abstract</rdf:li>
     <rdf:li>background</rdf:li>
     <rdf:li>card</rdf:li>
     <rdf:li>concept</rdf:li>
     <rdf:li>creative</rdf:li>
     <rdf:li>money</rdf:li>
     <rdf:li>strategy</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>flat</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>cartoon</rdf:li>
     <rdf:li>character</rdf:li>
     <rdf:li>person</rdf:li>
     <rdf:li>man</rdf:li>
     <rdf:li>male</rdf:li>
     <rdf:li>woman</rdf:li>
     <rdf:li>female</rdf:li>
     <rdf:li>celebrating</rdf:li>
     <rdf:li>happy</rdf:li>
     <rdf:li>customer</rdf:li>
     <rdf:li>certificate</rdf:li>
     <rdf:li>discount</rdf:li>
     <rdf:li>winning</rdf:li>
     <rdf:li>prize</rdf:li>
     <rdf:li>percent</rdf:li>
     <rdf:li>present</rdf:li>
     <rdf:li>jumping</rdf:li>
     <rdf:li>rising</rdf:li>
     <rdf:li>hand</rdf:li>
     <rdf:li>waving</rdf:li>
     <rdf:li>commerce</rdf:li>
     <rdf:li>banking</rdf:li>
     <rdf:li>offer</rdf:li>
     <rdf:li>promo</rdf:li>
     <rdf:li>premium</rdf:li>
     <rdf:li>shopping</rdf:li>
     <rdf:li>success</rdf:li>
     <rdf:li>purchase</rdf:li>
     <rdf:li>winner</rdf:li>
     <rdf:li>finance</rdf:li>
     <rdf:li>shop</rdf:li>
     <rdf:li>tiny</rdf:li>
     <rdf:li>market</rdf:li>
     <rdf:li>business</rdf:li>
     <rdf:li>sale</rdf:li>
     <rdf:li>promotion</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="184"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEAtAC0AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAtAAAAAEA&#xA;AQC0AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqozNdieFYkQwEn13YnkAFNOK03qad8WEjKxXLqqyOkaM7ni&#xA;iglj4AYktgBJoIew1G0v4TNav6kasUJoRuAD39iMjGYkLDZlwyxmpDdUuru3tYvVuHEcdQKnxPYZ&#xA;Jx5zERZVEdJEV0IZGAKsOhBxZA3uG8UuxV2KuxV2Koea7MdzDB6TOJa/vB0WgJ3yiebhmI0TfVsj&#xA;juJN8kRl7W0zKoqxCjxJpgJA5pAtYLm3JoJUJ/1hkRlj3hPAe5UybF2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KqV3M8NtJKi82RSQvjTK80zGBIFkM8cQZAFDaTfXF3HIZkUFCAGj3U1FfE9Mo0meWQH&#xA;iA27uTZnxiJFIm4leJAy8diOXM8Rxr8RB9hvmUTTXCNlKrDzNp15O8MNyj+jykmkKuq+kWonEkDc&#xA;clBr9GVRzAnYuXl0M4CyDvsPf1/Smlzd29rD607cY6gVALHf2UE5ZKQAsuJDHKZoc1z/AFe4SSBi&#xA;silaSx1B+Fx0I8CMOx2QOKJB5NWtrb2sCwW6COJPsqPfc9cYxAFBM8hmbluVC9n055Y9PuSHluPi&#xA;SChYkJvyPEHitR1O3bJiJq2mYidi6XUrK2/dk0CfDt0FNqb5iZNXCBouRDBIjZ1xcS3FhK2nSL9Y&#xA;ArHy6VBrQ1B69MuxZYzFgtOeE4g19Tru8kS2VlVklcAkEV4V7E9K5VqcpiNubbgjxblozXULQB5F&#xA;l9VuJoP1UyHHOJjZBtnwxN7VSM5LyC1HIgkL3oKV/XmVYumilsrSqlYlDt/KTx2+dDgmZAbC2UQO&#xA;roZGkSrRtG1aFWpX8CRghIkbilkK62gr/UWjcxRbMPtP4ewzE1GpMTwxbsWG9yxTV/Mhtbw2yQSX&#xA;lwsZmmCsBwjHck1zWzyEnfd2+n0XHHiJEY3Q96Jg1axltLa69ThHdFVhDbEuxpx271xtqnp5iRjW&#xA;8eaa2l7LbsNy0fdP6ZkYc5gfJxMmMS96eKysoZTVWFQfnm3BsWHBIpvCh2KuxV2KuxV2KuxV2Kux&#xA;V2KqFzFcyPCYZvSVGrKvGvNfD2xYTiTVGlfFml9zrMVvq1rprQzNJdKWWZUJjULX7TDodsqllAkI&#xA;1zcmGmMscslio9OqYZa4yhc2cUvKQRx/WShjSZ0DEA128ab9MiY372yGQjazw91oTT9CsbCWVrSJ&#xA;bcOytWMklgBurcqgCp6LkY4hHk3ZtVPIBxG0J5juJInjT7UUi7oelVNemaztLNKBFci26OANnqEr&#xA;0G7l+sxRp8HOQo7CtSqOQK/RmHptTM5BG+bl6rGKJPcymxv7W+g9a3fklSD4ihpuM6GExIWHVZcM&#xA;sZqSIyTUll7owmcvGwFSW4sKip+/xzAzaLiNhyceooUV+l2LWxfkd1HADsR1rktJpzju/cjPl4kw&#xA;IDAg0I7jM2nHU1t4FcOsahh0IAGQGKINgMjM1VtT2/qmN1bhJG1Valdu42I2ORyY+KiNiExnV+aF&#xA;1i01O4tl/Rt59SuoyXVigkR/gZQjqe1SDt4Zk45RB9QsNUgTyKJsnvXtImvY44boj97HE5kQH/Jd&#xA;ljJ/4HIyq9uSRdbpTqMRS7evR/iB+eaXUwqZ83PwyuLE/MWmLG9xqS3v1RZ4fQuQUDl1PQJuPiNK&#xA;ZiyHV3Giz2Bj4eKjY3qvek9ncXdndD/QxPLYW/qiF34i3hpyPb+9YGpyA2c7JCM4/VQnKr/nH/iQ&#xA;zOwvEvLOG6jBVZlDBT1Fe2Wg26LNjMJGJ6Mh0py1pQ/sMVH6/wCObbRyuHuddnFSRmZTS7FXYq7F&#xA;XYq7FXYq7FXYqtlljiQvIeKjv89u2RnMRFlMYkmg1DIZE5lCgP2Q3WnjTtghLiF1SZCjSAuJr9r1&#xA;FiEihWVSnD92V5VZmcrT7HQBq1yxxZSlxbfj4+5MsDkOxV2KvONf/MrVbLW7i0tIITbWshiYOGZn&#xA;KGjGoYU39s1WbXyjMgAUHp9J2JjniEpE8UhbMLS4sNd0SHUJoWRJY2ahNHShIajCnddjmXwwzQEp&#xA;B0mSE9PlMAboqPlSytjpNtctGDOxdvUPX7bDIaXTYxESrdnr8kvEMb22+5dpojsddvLAALHcgXMH&#xA;6nH35bj9MzHv3XPeTDGfWPpP6Eff6tZ2JCzElyK8VFTTxNSBkdRrIYjR5+TjYtPKfJFJKjxLKDRG&#xA;UMCdtiK75kRlYtqMSDST2mp3d3e3FzVV0a3VwJKf3hUCrb9hQ5TGZkSf4Q5uTBGEBH/Kn7FPyVBK&#xA;mhpLJIzi4dpUVtyorxAqak7Lh0w9PvZdpyBy0By2b0m91K61jU5ZJUNhat9XSJATV13JG/Ud8YSk&#xA;ZHuC6jFCGKAA9ct0ZoWrjVLVpuIjdXKlAa0HauSw5eMW06rT+FKkxy1xVG5uRCoCjnK32EHU5Vly&#xA;8PLcs4Qv3IJdNuJ2Mlw/Fm7Dc5iDSymbkW85hHYJdfaUA8ZuIhIIX5xORUBgCAfnvmLlwShzcjFn&#xA;2PCatJdS8tx3lzJcJcyW5uEEd0qUIkVenXodsxzG3Pwa0wiIkCXDuPJNLa3itreO3iHGKJQiD2Ap&#xA;kg4k5mUjI8yn+mRNHajkKFyWp+H8M2+kgYw36uuzSuSLzJanYq7FXYq7FXYq7FXYq7FVN4InkWR1&#xA;5Mn2K7gHxp0r75CWMEgnoyEiBQVKitO+TYuxV5j+dP5pWnljTF0bTdSitvMmoOkSyf3htIWNXuJF&#xA;Abj8Oy133qOmX4sRO9WB9rVkmAQLq/sRf5e+ZbuTzBP5dutRk1GSOwjvA03FnUrJ6TsXG59XkDxP&#xA;Sm2xzEwzM4mRHX8fJz9bghimIxP8P4+bNYNUE2qT2KxMPq6gySnpyboPpG4xGS5GPcxng4cYnfN5&#xA;r+YPly2sNZhuYmZINRdnlBHwo9Ryo3vyrTtmp1uARmCOUnqOx9bLJiMTzh9qO8tvd2GnakEmkltZ&#xA;Y1htYWYsBI1eZUduKmp+YyWLJ4cTZ2OwcfWiOScLAEgbJ8ujP9JtGs9Nt7ZvtRoOf+sdz+Jza448&#xA;MQHndRk45mXekXn6DUodIfWNJRpNT09C8UaCpZTTkad+Iqad9xk4aeOTJGzw7phqjixyFcVh54Pz&#xA;OtNZ0ZLnUlEGoWY43oi/3atfgaNCRuSTUV+mmS1/Y8jnjwcpbX3e9n2Z2hCOKcp849P1Mm8s+cr7&#xA;ztFNZ2Nm1jp9uyRzTs/NzHTuQFAJp9kV+7Dr9HLHwwB2PNjoNVjPFkl9Q5BlHmqWHSvJ+otEn7q3&#xA;tmVUU02I49fp3ykw9PCGv81wT8WW9G3lMWvedtP+opBq7La3CVlQRxlI1WhCpzUkV5Ur1zXY5ZSP&#xA;TyDv9XLSQmPFoGZ257n8fBGeUvzMntdWm0cxRvYTes4uhX1fWEZbkWJ4lSUp098npsxEuHvY9raU&#xA;GByA7xHwpk/5eeYVsvy4udb1WZniszczzvQFuEQqQAKVO22bGOMA0HldPqp5MfHkNkO/LH8ytZ84&#xA;TXLX+i/ouzZBNps3q+p6sdaEMCFNaMpBpQ74ZGIPCDZciEMhjxmNRPIswu9Vt7TUba0dKvd7B1Iq&#xA;D0HIdaHKZTEZAd7lY9OZwMh/CmGWuM4gHY4qoPY2jmpiFfao/VlMtPA9GwZZDq6OxtEPJYxX3qf1&#xA;4x08ByCnLI9VfLmt2KuxV2KuxV2KuxV2KuxV2KuxVAtp0hvzdrcMtRxEe5HT59K9swzpT4vGJH3N&#xA;4zDg4aXyy6gLG5aOINdxo/1da0V3Cnh32qcycRkfqapgdHyd5V8sfpAXOt+Z4jeatfzyM4ugSwKs&#xA;Q/JW/aLA9egzZZclbR5B5TW6iYnQ2ep+VIb8+bZta0SyjfU3t/RuWanxW5aOqsSV/aRffb55gwiY&#xA;Y+G7c49o5dVqjOAoGrB3obAvUvLsd4VvLq7iaGa5nLem1ahVAC9e3bMfADuT1L1GslH0xibEQs17&#xA;VJI5YtPtWP1mYF24V5BR7jpXfMbX5JgcMOZTpcAIM5fSEg0yBW1FBIS6zShmB8Sd/vzS4peJkiJd&#xA;7sM8/Rt0DOc6p0KH1KQR6ddSEVCQyMQPZSclAXIIlyfIOde6J9XeTrS3tPKmkQ28axp9TgYhQFqz&#xA;RqWY0AqzHcnuc5TUSJySJ7y7rEKiPclv5l3bQ+V3h4hkvZVt5a12QhnNKd/gplcQ4XamYwxe80wH&#xA;Q/Lx8y6hJa28ps7eKGvq8eZUCiqAtQK7+OVwxmMK6lxznhrdYJ0fCgBse4dOvMsr0j8nPLumLNKl&#xA;xcTXstvLAk8pQrG00ZjaRIwo3oxpyJynFpowN9XptXr8maBhtGJ7mExapr35fy3Pl7XLJNT0C8WQ&#xA;CI7JKjji5RyD1Bo6N/acvm8tHJPTnhkLimnlfzVo+hWS6pFbXMmmbxRRs6vLDEZSPiJ+3xoAKmtO&#xA;uUx0suMzr0077J2pA6SHXffvCeat5str/wA6eVk0eWK6tbsO8siip4k9D0KleLbHpkjiBNnmHFHa&#xA;MgRCBuE+b0PC5C2WWOJOcjBVqBU+LGg/E4QCeSCaSqy1yW4vUhkthHDO0q28gfk3KA0YOlBx+/Mj&#xA;JpwI2DuKv4tUcpJqvwE3zGbnYq7FXYq7FXYq7FXYq7FXYq7FXYqks3mSJNVSxSNiBIY5XpU1IoOI&#xA;B/m64acOWrAnw11TrA5jzjzh5cijiury9tI5rlpC1hqIbj6TSuOSFSQBzAplGMyxyNiwe5t7S08d&#xA;XgEYECcRsDt8j5t/lWqRahqlvIwW5SOFvS/a4Mz/ABD2qMyb4oiQ5Ok7P0OXTzlHIOE7d3n3M71H&#xA;U7exiDSVaV6iGFQSztsAq09zlU8gi7zDglkO3Lqe5JFD6NZX3mHVF9S7ZQfRU/ZDEKqV36kgewyv&#xA;DiN8UuZZdpa6OPFUfoh9pYdpXniwh1KyN9EYVknSPmCCiljTka0oBmFDsowyCQOwLrMPtFHLHglG&#xA;pHr0er5tHLQGvs66DqTIvJ1tZiq+JEbUGSjIAgnkEiBlsOZfKEmn3sSl5IWVR1YjbfN//Kum/nhw&#xA;/wCRtX/qcn1lokRh0awiK8DHbRIUrWnFAKV9s0E5XInvcoRoUwT82dYtFex0z10Ew5XEsRYBgD8K&#xA;Gle/xZPHAncB0fbUiRGI96K/Ka2H1O/vBuJJEiVv9QFj/wATGRmy7Fx1GUvOme5B3bD/AM2bBLvy&#xA;NfuUDS2xjmiYipXjIoYjw+AnDHm4evjeI+Tyny4hvfKl5Zjd1MiovuVDL/w2bbTjiwmLp8W8CHoH&#xA;lP8ALDSNO1qw8yaffPLp4hM0NvMqlgZY6KfUXiCAHJ+zmqJdng0UYyEwdnocU0My84nWRa05IQwr&#xA;8xkXYungiuIXhlXlG4ow6fiOmSjIg2EEWKKhb6bFDMJ2kknmClEeVuRVT1CjYb03PU5KWUkVsB5M&#xA;YwANorK2bsVdirsVdirsVdirsVdirsVdiqUW2tSy+ZLvSmQCK3jR42AJYllViSegHxUykZLmYubP&#xA;TAYI5OpKZta2zSrM0SNKv2ZCoLD5HrlzgGESbrdCX+s21lfWdpKCXvGKKVp8J2pyFa0OVyyCJA73&#xA;KxaaU4SkP4XmH543V3qUemWGmVuoEaWW6EB5gSAKsfLj0oC2bTs3UYYGRlIAuHqtHnkBwwkR7mHf&#xA;lTJrOhef4J7u0mh026he1uZ2QhFDD1FYn/jIiiuW6/VYZx2lHbzYabQ54neEvk93lv8Ay1LeRXcl&#xA;3C00AIjPqCgr7fTmjMsZN27SOHOImIiaPkg/NWpaTe+Xr+2iu4pJXiJjRWBJZCGAH0rlgzQvm4Ot&#xA;0GaeKQEJXXc8R13SdTmgheKBnUMwZV3YGgoePWnXfLDnh3h5zD2PqgLOOXyey+R/NcVz5atP0vKL&#xA;bUYV9GdZjxZjHsr79eS0J965WcsO8PS6bTZzAcUJA+5H6/rmlvoeoRwXcck0lvKkaIwLFmQgU+/K&#xA;c2WPAaPR2Gk0uQZoExIHEPveEa3p+pyQRxxW0jgsS3FSaUHf780uOBewz5ARQL2PzX54TRfK/r6T&#xA;F+k9VZFitraL4wshX7cgXfglN/Hp750eCWORAMgA8Ll02YWRCR+D57XQPOuqXN9rmpxSSzysDM0z&#xA;ATSOxAHCL7XFR4CgGbzDrtPA8IkKdbk7P1Et+CXyetfkhdy6XZaraaqfqcRkimtxN8HJnVlk418A&#xA;iVzC7S1OKRiYyBcjSaLOAQYS+T039P6J/wAt0P8AwYzWeNDvcv8AKZf5p+SWeZ9R0e/8uapZx3cL&#xA;yz2syRKHFS5Q8O/81MRmh3tebQ5ZQI4Ty7ngNrfeadCtZhZ6XJcGYg1ZHIQqDvxXrWubLRavHGwZ&#xA;B0uDs3UC7xy+TzXVn1fUWaO91K5kjDsfq8rs0aFm5MEjqqqK9gM2PhDmFojZnH5W+bdR/LTX7M6g&#xA;0knkzzICVuWXioMbmIzhQX4tE4KyLX7O+/w5h58fHY/iDdinwH+iX1hHJHJGskbB43AZHUgqVIqC&#xA;COoOax2C7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8W8n6i9p/zkn5v0yZ6JeWcckSFti6x28gAHj6b&#xA;scypx/dAuPCR8Qjoy7zF+dfkHQdZl0m8uppbi0IXUZLa3lnitaio9Z0BH0LyIOxplUcMiPfy82w5&#xA;RvzNc9uXvYf+b/nGf/Ffka00idGs9XBmllCA+rBO8YiIZhUCnI7eOV5cETjnKQ3iHK0msnjyRjE+&#xA;mZ3ZEmm2gUBlLHuSSP1HOROpmXoDqJLv0dZ/77/Fv64PzE+9Hjz73fo6z/33+Lf1x/MT718efe79&#xA;HWf++/xb+uP5ifevjz7210y1Y0WIk+xb+uEZ8h5FTqJDqrLoMTf7qC/Nj/XLQcx6/cwOrPevHl62&#xA;7gD5Fv65MDJ3sfzkm/8AD1p4D72/rhrJ/O+xH52TR8vW3YA/Mt/XARk70/nJLG0KJf8AdXL5Mf65&#xA;AnMGQ1Z70Lc6bapDJyjKkKT1auw+eQGbJdFthnkSN1HTrG1eyidl5MwqSSR+o4cueYkQCzzZpCZC&#xA;J/R1n/vv8W/rlf5ife1ePPvabTbMigSh8QT/ABOEamfekZ597z782J1i8qLZmNDJ+kIuM/FefBYp&#xA;eS8qcqE8TnW9h5TIkdOG3U9u4o8Ecg5k7vSdP/LXRNc/KrSfLOtwtwFrFN6iECaC4kHqM8bENRgz&#xA;kdKEbdMyMmYjIZB1McYMACiPK1p5x0SKLQLTS4joenH6vZ3t1dUkaBDQNxUTNuPsggU+WYInlMjY&#xA;6uznDT8I4SQa5c/vpnGXOE7FXYq7FXYq7FXYq7FXYq7FXYq+cvzeu9Y0f80Z7lLmW3+tQwT6fNG7&#xA;KUURiJlUg7VeNtvf3ze6Axlj4SHXakETsMf843F55pgi816fIbTzxoMYlvJISIzd2sA5fWYuNAJo&#xA;B9tR1TcbLxEcmn8M1/AfsY+Jx7/xBDeVvMtjqmkeaNVvIed9cl7vVoIohRi8VHdfi3DsrORQcST2&#xA;zTa7DI5Mde53/ZOqxwwZePnzrvvb7/vXeRLHzB5x8x2PmnWSyaVpXp2ukxL8MYFsFCRRDb4I6gse&#xA;7fTh7UzDHiMBzkC43ZOlOWZyH6Yfe92ziHeuxVwBJAAqT0GIFoRsNio3l3P8o6Zl49P3tMsvcilV&#xA;VFFAA8BmSAByaiW8KHYq7FXYq7FVk8KTQvE/R1Kn6RTAQyhIxNsD16y1+20ayg9SbTYZrllkuU4r&#xA;IyKpkVELV48yCSadB75dHTgEzkL22vl73Py8OfMIxlt1rn7nzl5k8weYf05fo2s3Fyod4hMlwzK8&#xA;QNFFUPGhXqM6nTafH4cfQB8Orx+ryTjlkOKxff0eu/8AOPurazeaNqVtevJNZWksQspZCWoXVvUj&#xA;UnsvFTTtyznPaDFCM4mO0iDf6C7XsjJKUSDyHJkvmOw8vajf2NvrrvHpr3qF5o2VVU0anMsCODCo&#xA;Jw9namWEiuop3Wt0gzYaPOO70DQfzV8pazqVxYWsksQto5JjczqscLRxbsytyLABfi+JRtm+y6LJ&#xA;CIJ6vKw1EZGg8j/Mj81tQ1yaa1sZXtdCjJCIhKPOOnKXvQ9k6eO+bXS6OOIcUt5fc4WbUGZocnpn&#xA;5GW9/H+X1tNdsx+tzTT26MT8ERbgoFegJQt9OarXSByFzdOKg9AzEb3Yq7FXYq7FXYq7FXYq7FXY&#xA;q8G/PnX/ACTrcH1W1vwfMWhzNGY/TkCurELNEJOPDkjAN17EdTmz0UJx3I9JcPUSifeHlWnXrSJs&#xA;1JVBVvcEUP0EbHN1E8QouARRWfkndLF50ktD8UN7azRFDuDxIkH4Ic02qHpRk5PRfyzu3totR8rO&#xA;DTQdTmFuxP8Ax73DBox98bN9OaTtgWBLviXq/Z6d45j3fpZzrCySywRhyLdSxnWN1WStPh6lc53S&#xA;ajFjErMePpxcvNr7S0ubKYCIl4e/Fw7Hy6hTt9Rltv3Mhe5VtoZCPiHtIRtT/KGSyeDk9QlCB6ji&#xA;H+x/UwwZNRh9Eo5MgP0nhNjyl/xSYaUwiulnZ0BkqLmSWVBUU+HggLUodh02ywajDw/VHbkO77ub&#xA;LHps4ycXDLf6ievdQF8unlz3T6K4glr6UiyU68WBp92MMsZfSQXLlCUeYpfljF2KuxV2KuxV2Kux&#xA;VHX2ix6vY2UNy4NtE6yzQModZVAI4NU9CDvm2xw4oRs8nHhn8OUqG5Fe5gfnP8rPy/vRE9jodlbS&#xA;xSfvWhj9BSBsBxi4qd/bK9V2nKA9JLPRaTDd5I33N2eiNbxLAswhtk2WC3URIB7BaAfdmhnqATdW&#xA;e87u5GSERUIgMb86XcWnaDf2sait7JHAtdyoVxKSK/8AGOn050nYWGOafrFjhcHtvUzhhjKJqV/o&#xA;eZJLIgcIxUSDi9O61BofpGdvQeJtL0a1vtUt7W5uRaWJkVZ7pgWCJX434qCWotaADfMbNM9G2Ee9&#xA;9ZeR/M3lPW9IWLy1OJLPTlS29Hg0bRqq0QFXCmhVdjnO5sc4n1dXa45RI2ZFlTN2KuxV2KuxV2Ku&#xA;xV2KuxV2KvmD87PIF3oHmOfWLeMvo+qytMsgBIinclpI28KmrL7fLNzpM4lGuocDPjo30Lzb13gV&#xA;pU+0qn6dszBKt3HIRn5OW7t57tJ68YrSOeWZjsApiaPcn/KcZrtVICG7E45SFRBJ8npukwSr+a2o&#xA;3ljxn0u+tYGuJ42Uos6EIoO+5ojdPHNJr8sJ4KB9Qei7C0+bGZcUTGJj12Z/dpH9c4kE8kLk18Af&#xA;+ac5EaGEwZG7v9T0WKR4FJo4RX4TtXv4KG8PfAOzcZ6n8FsE5NtFCFY0Pw8+/wDLT2/ysR2bA9T0&#xA;/SgTl9ycaBFGv1llBBD+nua7L/t5maXSxxCx/E4OsmTw33WmUdxBI7pHIrPGaOoIJB9xmfPDOIBI&#xA;IB5OvjkiSQDuF/NOYTkOZBIWu9B1P45DhNX0ZWLpvAl2KuxV2KqV3d21nbS3V1KsNvCpeWVzRVUd&#xA;STkoQMjQ3JRKQAssTX8/vLqpDHa2NzNCDweduCAKDQuq1YnxoaZ1eHsrJ4Y3F06Setjx8jVska+t&#xA;rvTo7m3kEsFyqvE47qfirvnHayJhcZbSt32AiVEckJmuct5x+Zf+80f/ADEn/iLZ2nsz9R/qfpDr&#xA;+3/8Xh/W/QXmOo3Xpp6SH436nwGdZklWzykQlaI7uqIpZ2ICqBUknYAAZjtr6m/JfyHceVfLckt+&#xA;vDVdUZJrmLvGiA+lEf8AKXkxb3NO2aXV5uOW3IOwwY+EbvQcxW52KuxV2KuxV2KuxV2KuxVQv55r&#xA;exuLiCE3M0MTyRW6mhkZVJVAaGhY7dMMRZ3QeTw9/wA8o9Wt7rTde0KC7064rFNbI7xuor+0HDVZ&#xA;e1OO/hm5HZw5wlu4B1R5SDyua1snMqwwGG3LuYUdhI6oWPEGQKnIgd+I+WbOMPTR5uIZb7Mp0Osf&#xA;l1FY1MaSAn2DNT8M4HtTCfzpj3mP20+k9j5h+QEj/DGX2Epj+XjH9ITr2IjP3N/bmDL6T7m/J9Je&#xA;hXn+9y/8Ym/U2Y2H+7/zv1OJi+j4/qU5P2vk3/JsZOPT4fezj+Pm3J9iT/nr/wAaYI8x8P0ojzHw&#xA;/Sl9x5yl0fVxpqWyyi6dn9VmI4mpFOIG/wBnxy6H0j3IlpRkAN1s2uszoyPDGqTISRKaljyNSGpx&#xA;5A175to62WQ8MhcZUK6d1juI8nAn2JCEeISNxs/pVx5lvPVWVo4/UDciwBBO1Kbk7b9BmNLNQMAN&#xA;uX7ff+OTfHskGpcW/uTPTPM891ex28kChZCRyUmoNK98xCGWfQiEDIHkyHA612KuxV4B5+81a95z&#xA;19tD0iCaSxtpGSK0jBLSOh4tLJTt4V2AzrNDpcemx+JMjiPX9DpNTmlllwx5BLNU8q6p5ba3stS4&#xA;C4miE/GM8goZmXiW6EjjvTNvodXDPAmPIGnB1OGWOQB7nrmg3q2PlDTmmNXW1DQwggM5oXCpypUm&#xA;uefdqCWXV5K5CVe7o9VoIViiB9RH7XeVPN1pr9uwMD2OpQbXenT1Eke9KioXmh/mAzC1WkOI8+KJ&#xA;5ENmDUDJzHDIcwWK/maSLRCoqfrBoPfi2dV7NfUf6n6Q4/b/APcQ/rfoLy60tWmkae4FTU0U+I/p&#xA;nVwjZsvKyNbBmHkbXtB8uarJqt3ox1G/iC/UHMojjjbfk3Dg/wAXg34d8p1Omlk2B4Q2YsohuRZe&#xA;t/lx+a+q+bNfn06XTolt4ojK9xAzUiANFVy1QxY7ClM1Wr0kMUbErLmYc8pncPTM17lOxV2KuxV2&#xA;KuxV2KuxV2KuxV4F/wA5CaZ5Qsb63uoIprXzHeKZWeBVEEqBuJaapWj16Ff9l2zaaCc6/ohw9TGP&#xA;xeSWupSFljkUuWIClepJ9s2ozUN3DGMk0ObNblo9P0pbOvKaVSGHhy+0f4DOIyZzmzy1HKMCK9/8&#xA;I/SX0OGAafTx0vOcweL3H6j/AL0Jt+Xcam4uZf2laJB9JJP6sxc2nlDEJn+K6+DL8xGcpwH8HP3m&#xA;2fXn+9y/8Ym/U2a/D/d/536mGL6Pj+pTk/a+Tf8AJsZOPT4fezj+Pm3J9iT/AJ6/8aYI8x8P0ojz&#xA;Hw/S8+/MP/jsp/qN/wATbLofSPc5OL6QySPR9HADLZwEGhBMan9Yy2kqqWNj1+rxVHwg8F2A2A6Z&#xA;larmP6sfucTSfTL+vL/dFOvLMVtFfOwRIwIzQgAblhmHOQA3Rrb4Piyf1of9+L94yrxI94dVwnua&#xA;NzAP2x9G+A5Y968BU2voB0q3yH9cgdRFkMReM/lUJofPevturIk0beAJuF/H4c6PtvN/guMjrX+5&#xA;dV2dj/fSvpf3p3+aOj3181hd2sMlxIC0MgjUu1DRk2FdvtZX7M66EOOOSQHI7n5/oZdr6aUuExF9&#xA;NlPyr5I1N7uDU9dkatsFFraluTAJ9nlQ0VV/lH0+57V7bxCEsWnA9V8Uq7+dd5Pf8l0OgycQyZD9&#xA;PIfj7mf5yLvHnH5l/wC80f8AzEn/AIi2dp7M/Uf6n6Q6/t//ABeH9b9Bea3F9BDtXk/8q/xzrpTA&#xA;eTESUGl6k9zGt28kdmWHrCABn4V34hioJp4nKJzJ5NsYgPrj8vtJ8taf5VsW8vW7QWF5ElwHlA9e&#xA;T1FB5TMOr7/Idts57PKRkeLm7TGABsyPKWbsVdirsVdirsVdirsVdirsVSbzP5Q8veZ7IWmtWa3K&#xA;JUwybrJGT1KOtGHuOh75ZjyygbBYygJc3z/+a35cW/5dnTfMGk+tqOmm5KXcFwAWiHGqkSIFG+9K&#xA;janfMw5DqMcsZ2sNWOf5bJHIBxcJ5PO5/Nc0mpTvcQEtdqotZw3wpSvwUp0ofvyEuyocMIA+mPPz&#xA;cqPbk/EnMj1TG39H8feyvyB5uhsb97e/cRR3PHjcHZVkUmnLwBr1yXa+lOXGOEfT08l7G1kceSQm&#xA;dp9fP9r1wXa3U6SrShiYVBqD8LGoP05xvhcESPP9IeqEOGPx/Uvk/a+Tf8mxkY9Ph96x/Hzbk+xJ&#xA;/wA9f+NMEeY+H6UR5j4fpeffmH/x2U/1G/5ONl0PpHucnF9IZbbMWtomPUop+8ZclenQ/M/rzJ1X&#xA;Mf1Y/c4mk+mX9eX+6KKsblLeRmYE1FBTNfnxGYoNubGZDZGfpeH+Rvw/rmN+Ul3tH5Y97v0vD/I3&#xA;4f1x/KS71/LHvd+l4f5G/D+uP5SXev5Y97D/ACxq2mf4u1uTTtKkW1kYi41Ut8L3AeskaqTQjkTu&#xA;vcZs9ViySwwjKf08o+XR1+nxxllkIRquc+hN8gzD9Lw/yN+H9c1n5SXe7D8se936Xh/kb8P64/lJ&#xA;d6/lj3tNrEIUng23jQDCNHLvX8se95B+Znmm3v547CylEixM0lzKhqpc7BQR4b1zs+xtJLFEyO1i&#xA;h7nnu29XCfDjhuI82DQxPNMkSKzvIwRUQcmJY0AVR1J7DN0S6F9KeWP+cfvJ2nGK61Jp9WnFGEU9&#xA;IoQeu8SEk+4ZyM1GTXTOw2c6OniOe71CKKOKNIokWOKNQscagBVUCgAA2AAzCJchdirsVdirsVdi&#xA;rsVdiqhd2FpeKq3MYkVDVQSRQn5EYteTFGf1BC/4d0X/AJZV+9v64ba/yuPud/h3Rf8AllX72/rj&#xA;a/lcfc7/AA7ov/LKv3t/XG1/K4+5o+XNFIobVSD1FW/rja/lcfctbyxoLBQ1mpCkFRVqAjp37Y8R&#xA;X8rj7l/+HdF/5ZV+9v642v5XH3O/w7ov/LKv3t/XG1/K4+53+HdF/wCWVfvb+uNr+Vx9zv8ADui/&#xA;8sq/e39cbX8rj7nf4d0X/llX72/rja/lcfc7/Dui/wDLKv3t/XG1/K4+53+HdF/5ZV+9v642v5XH&#xA;3O/w7ov/ACyr97f1xtfyuPud/h3Rf+WVfvb+uNr+Vx9zv8O6L/yyr97f1xtfyuPud/h3Rf8AllX7&#xA;2/rja/lcfctj8s6DGixx2aIiiiopYAD2AONlfyuPuXf4d0X/AJZV+9v642v5XH3O/wAO6L/yyr97&#xA;f1xtfyuPud/h3Rf+WVfvb+uNr+Vx9zR8uaKf+PYfQzj+ONr+Ux9zf+HdF/5ZV/4Jv642v5XH3O/w&#xA;7ov/ACyr97f1xtfyuPud/h3Rf+WVfvb+uNr+Vx9zv8O6L/yyr97f1xtfyuPuRdrZ21pF6VvGI0J5&#xA;FRU7n54G2GOMRQVsWbsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdir/AP/Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:27164fcd-3f76-1940-8e7f-f9155bbff971"
    stRef:documentID="xmp.did:27164fcd-3f76-1940-8e7f-f9155bbff971"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:eec0b9b6-9468-e049-a837-558fddaeee4a"
      stEvt:when="2020-06-04T00:19:17+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:2ba4e30a-cc1d-eb4c-afff-202180bf530c"
      stEvt:when="2020-06-07T21:25:46+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:86152fec-d303-bc42-bbba-53f5de3cdd12"
      stEvt:when="2020-06-09T19:07:04+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:9e1e2f00-ec24-4049-a0ea-3686adc4df36"
      stEvt:when="2020-06-14T16:59:58+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:ad299449-9c73-3942-b7cd-a6f40ce342a6"
      stEvt:when="2020-06-14T17:01:18+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:d5ec1af2-e36c-f34f-b16b-05ec54cf4597"
      stEvt:when="2020-06-14T17:01:42+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:19b72672-a6f2-f24e-a0d5-fb64c2ae5e19"
      stEvt:when="2020-06-16T13:56:06+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:07a2abf3-7d66-5c47-a802-a65834c677ca"
      stEvt:when="2020-06-21T19:26:51+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0da05fe6-8df0-3d41-8847-982a0e56fa41"
      stEvt:when="2020-07-14T15:31:55+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:e9a1db44-6ec4-eb4d-a6bd-c876c75e2acd"
      stEvt:when="2020-07-19T18:50:06+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:3d06f9d9-0588-7d43-a08f-ff34dd340e07"
      stEvt:when="2020-07-29T16:15:21+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:27164fcd-3f76-1940-8e7f-f9155bbff971"
      stEvt:when="2020-07-30T00:01:30+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:DDFDE8444BD2EA11A82193B1173872B6"
      stEvt:when="2020-07-30T12:59:02+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:8e984a7f-f75f-2b4a-90df-04e7e27fbfcd"
      stEvt:when="2020-08-13T19:10:52+06:00"
      stEvt:softwareAgent="Adobe Bridge 2019 (Windows)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="2800.000000"
    stDim:h="1999.999512"
    stDim:unit="Points"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="0"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="R=244 G=140 B=127"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="244"
         xmpG:green="140"
         xmpG:blue="126"/>
        <rdf:li
         xmpG:swatchName="R=247 G=156 B=141"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="246"
         xmpG:green="156"
         xmpG:blue="140"/>
        <rdf:li
         xmpG:swatchName="R=183 G=87 B=66"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="182"
         xmpG:green="86"
         xmpG:blue="66"/>
        <rdf:li
         xmpG:swatchName="R=244 G=116 B=88"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="244"
         xmpG:green="116"
         xmpG:blue="87"/>
        <rdf:li
         xmpG:swatchName="R=247 G=164 B=145"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="246"
         xmpG:green="163"
         xmpG:blue="144"/>
        <rdf:li
         xmpG:swatchName="R=250 G=224 B=178"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="249"
         xmpG:green="223"
         xmpG:blue="177"/>
        <rdf:li
         xmpG:swatchName="R=247 G=204 B=127 2"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="246"
         xmpG:green="204"
         xmpG:blue="126"/>
        <rdf:li
         xmpG:swatchName="R=150 G=217 B=201 2"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="149"
         xmpG:green="216"
         xmpG:blue="200"/>
        <rdf:li
         xmpG:swatchName="R=80 G=191 B=165"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="80"
         xmpG:green="191"
         xmpG:blue="165"/>
        <rdf:li
         xmpG:swatchName="R=60 G=143 B=124 2"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="59"
         xmpG:green="142"
         xmpG:blue="124"/>
        <rdf:li
         xmpG:swatchName="R=24 G=70 B=85 2"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="24"
         xmpG:green="70"
         xmpG:blue="84"/>
        <rdf:li
         xmpG:swatchName="R=19 G=55 B=91"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="19"
         xmpG:green="54"
         xmpG:blue="91"/>
        <rdf:li
         xmpG:swatchName="R=155 G=193 B=249"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="154"
         xmpG:green="193"
         xmpG:blue="249"/>
        <rdf:li
         xmpG:swatchName="R=53 G=83 B=137 2"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="52"
         xmpG:green="82"
         xmpG:blue="137"/>
        <rdf:li
         xmpG:swatchName="R=70 G=110 B=182 2"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="70"
         xmpG:green="110"
         xmpG:blue="182"/>
        <rdf:li
         xmpG:swatchName="R=70 G=110 B=182"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="70"
         xmpG:green="110"
         xmpG:blue="182"/>
        <rdf:li
         xmpG:swatchName="R=239 G=239 B=239"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="239"
         xmpG:green="239"
         xmpG:blue="239"/>
        <rdf:li
         xmpG:swatchName="R=247 G=204 B=127"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="246"
         xmpG:green="204"
         xmpG:blue="126"/>
        <rdf:li
         xmpG:swatchName="R=255 G=255 B=255"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="R=60 G=143 B=124"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="59"
         xmpG:green="142"
         xmpG:blue="124"/>
        <rdf:li
         xmpG:swatchName="R=134 G=177 B=242"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="133"
         xmpG:green="177"
         xmpG:blue="242"/>
        <rdf:li
         xmpG:swatchName="R=244 G=114 B=87"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="244"
         xmpG:green="114"
         xmpG:blue="86"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                        
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
2800 2000 li
2800 0 li
cp
clp
2800 2000 mo
0 2000 li
0 0 li
2800 0 li
2800 2000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
931.501 1276.74 mo
930.85 1272.08 932.312 1264.05 935.962 1251.51 cv
928.733 1251.52 922.654 1248.32 915.266 1248.43 cv
913.247 1260.23 910.122 1279.61 910.122 1279.61 cv
909.787 1294.93 li
961.235 1295.32 li
961.235 1295.32 960.807 1295.54 945.639 1285.96 cv
944.517 1285.25 932.13 1281.24 931.501 1276.74 cv
cp
.968627 .643137 .568627 rgb
f
909.54 1298.87 mo
962.651 1298.87 li
964.615 1298.69 965.094 1297.09 964.413 1296.1 cv
963.01 1294.07 952.652 1289.18 945.688 1285.94 cv
933.472 1287.23 912.001 1282.2 910.073 1279.37 cv
906.724 1288.74 908.448 1298.63 909.54 1298.87 cv
cp
.235294 .560784 .486275 rgb
f
867.411 1276.74 mo
866.76 1272.08 865.653 1266.24 867.275 1250.69 cv
860.046 1250.7 853.166 1249.35 845.777 1249.46 cv
845.777 1261.6 846.032 1279.61 846.032 1279.61 cv
845.697 1294.93 li
897.145 1295.32 li
897.145 1295.32 896.717 1295.54 881.549 1285.96 cv
880.427 1285.25 868.04 1281.24 867.411 1276.74 cv
cp
.968627 .643137 .568627 rgb
f
845.45 1298.87 mo
898.561 1298.87 li
900.525 1298.69 901.004 1297.09 900.323 1296.1 cv
898.921 1294.07 888.562 1289.18 881.598 1285.94 cv
869.382 1287.23 847.912 1282.2 845.983 1279.37 cv
842.633 1288.74 844.358 1298.63 845.45 1298.87 cv
cp
.235294 .560784 .486275 rgb
f
904.799 832.465 mo
924.151 812.048 li
924.151 812.048 944.866 823.44 969.013 834.325 cv
975.652 822.771 986.486 784.764 987.068 782.952 cv
987.653 781.133 974.379 758.302 977.349 757.73 cv
980.318 757.157 984.173 769.922 987.312 768.628 cv
990.45 767.335 998.521 737.721 1000.41 739.337 cv
1003.94 742.362 996.164 757.756 998.027 758.878 cv
999.891 760 1004.62 741.813 1008.21 742.588 cv
1011.81 743.364 1002.14 759.145 1003.2 760.662 cv
1004.26 762.179 1014.37 747.374 1016.46 750.803 cv
1017.6 752.665 1007.13 763.695 1009.29 764.929 cv
1011.44 766.163 1020.87 759.216 1021.99 761.466 cv
1023.12 763.717 1013.19 766.062 1010.44 771.757 cv
1007.69 777.452 1002.68 779.668 1001.01 790.437 cv
999.354 801.193 994.808 858.752 983.075 863.374 cv
972.831 867.409 904.799 832.465 904.799 832.465 cv
cp
.968627 .643137 .568627 rgb
f
917.303 942.588 mo
901.609 951.341 li
869.709 1000.12 li
926.758 1134.39 li
926.758 1134.39 920.333 1154.59 918.24 1164.67 cv
916.049 1175.23 910.678 1265.83 910.678 1265.83 cv
935.016 1266.24 li
935.016 1266.24 958.133 1169.79 962.048 1138.48 cv
966.802 1100.47 937.855 1009.94 937.855 1009.94 cv
932.458 991.466 920.819 953.467 920.819 953.467 cv
920.819 953.467 917.972 944.208 917.303 942.588 cv
cp
.207843 .32549 .537255 rgb
f
862.679 924.269 mo
862.679 924.269 864.301 935.743 857.811 948.83 cv
853.854 956.808 847.021 963.063 842.126 972.836 cv
832.865 991.331 827.836 1017.6 831.31 1034.49 cv
831.31 1034.49 850.458 1107.61 849.698 1134.34 cv
849.418 1144.19 846.037 1161.95 843.874 1173.95 cv
841.962 1184.56 842.633 1263.28 842.633 1263.28 cv
868.492 1263.78 li
889.305 1134.67 li
898.104 1019.9 li
917.3 942.591 li
862.679 924.269 li
cp
.27451 .431373 .713726 rgb
f
923.1 753.691 mo
920.59 741.838 917.999 729.943 906.222 721.406 cv
896.691 714.497 886.449 712.523 875.591 716.461 cv
844.827 727.618 861.375 752.033 823.197 778.054 cv
811.334 786.14 806.832 788.959 798.318 799.734 cv
786.402 814.816 779.889 835.052 785.879 851.711 cv
798.266 886.164 836.649 896.118 856.729 888.813 cv
894.103 875.216 925.24 827.817 927.31 814.883 cv
929.524 801.04 924.715 761.321 923.1 753.691 cv
cp
.0745098 .215686 .356863 rgb
f
925.95 845.292 mo
934.611 849.295 950.295 855.306 950.295 855.306 cv
959.219 827.083 li
908.782 798.392 912.739 803.021 874.883 803.585 cv
844.642 804.017 831.967 798.241 805.925 868.543 cv
805.925 868.543 825.749 877.45 832.848 880.309 cv
835.9 871.618 841.417 854.287 844.634 864.167 cv
849.494 879.095 853.054 894.166 855.44 909.679 cv
856.957 918.876 860.256 930.649 858.521 940.019 cv
858.521 940.019 879.118 944.259 894.85 944.95 cv
894.894 944.952 894.939 944.955 894.984 944.948 cv
902.587 944.753 910.371 944.083 917.304 942.588 cv
917.304 942.588 920.388 877.374 922.036 874.652 cv
923.861 871.638 931.568 861.903 925.011 847.343 cv
923.852 844.769 924.164 844.466 925.95 845.292 cv
cp
.313726 .74902 .647059 rgb
f
879.623 774.556 mo
879.623 774.556 877.214 794.005 875.794 800.757 cv
874.309 807.823 872.073 830.073 886.725 833.685 cv
901.375 837.298 896.848 809.476 897.089 802.292 cv
897.332 795.108 901.483 770.057 901.483 770.057 cv
879.623 774.556 li
cp
.968627 .643137 .568627 rgb
f
878.825 780.762 mo
878.975 780.851 879.114 780.947 879.267 781.034 cv
887.363 785.677 894.412 784.944 899.701 781.331 cv
900.646 775.114 901.483 770.057 901.483 770.057 cv
879.623 774.556 li
879.623 774.556 879.301 777.147 878.825 780.762 cv
cp
.956863 .454902 .345098 rgb
f
884.027 723.908 mo
884.027 723.908 875.442 726.321 870.491 734.847 cv
865.542 743.373 863.071 767.858 881.295 778.307 cv
899.518 788.754 912.452 772.015 911.901 756.354 cv
911.35 740.694 906.987 719.978 884.027 723.908 cv
cp
.968627 .643137 .568627 rgb
f
915.928 749.634 mo
916.13 753.704 914.388 757.101 912.038 757.219 cv
909.688 757.338 907.618 754.135 907.416 750.064 cv
907.213 745.994 908.955 742.598 911.306 742.479 cv
913.656 742.36 915.725 745.563 915.928 749.634 cv
cp
f
886.607 723.263 mo
886.607 723.263 876.783 748.873 867.169 751.602 cv
857.555 754.332 858.323 766.929 858.323 766.929 cv
858.323 766.929 857.092 737.811 865.874 730.673 cv
874.656 723.536 886.607 723.263 886.607 723.263 cv
cp
.0745098 .215686 .356863 rgb
f
871.292 756.613 mo
872.775 760.616 871.803 764.681 869.121 765.692 cv
866.438 766.703 863.063 764.277 861.58 760.274 cv
860.097 756.271 861.069 752.207 863.751 751.195 cv
866.434 750.185 869.81 752.61 871.292 756.613 cv
cp
.968627 .643137 .568627 rgb
f
888.088 958.489 mo
888.445 958.537 890.051 958.326 891.366 958.359 cv
893.183 958.391 894.773 958.667 894.773 958.667 cv
894.773 958.667 895.486 958.05 896.85 957.417 cv
897.417 957.158 898.342 957.061 898.975 956.769 cv
899.624 956.46 900.176 955.909 900.792 955.633 cv
902.398 954.935 903.875 954.773 904.362 955.617 cv
904.768 956.314 895.827 961.782 895.827 961.782 cv
887.553 961.831 878.888 966.049 859.71 953.54 cv
848.758 948.753 795.571 922.484 794.501 916.757 cv
793.9 913.544 802.062 888.671 808.73 869.785 cv
813.873 872.089 824.81 876.957 830.926 879.52 cv
825.313 891.413 818.692 907.184 819.39 909.115 cv
819.569 909.618 820.234 910.527 856.189 934.069 cv
857.098 934.654 858.022 935.27 858.964 935.887 cv
861.495 937.542 864.205 939.31 867.076 941.176 cv
877.331 940.105 li
877.331 940.105 893.572 941.225 894.059 943.075 cv
894.27 943.918 892.923 944.34 891.269 944.583 cv
891.22 944.583 li
890.977 944.616 890.733 944.648 890.489 944.681 cv
890.473 944.681 890.457 944.681 890.457 944.681 cv
888.672 944.892 886.79 944.924 886.335 945.086 cv
885.816 945.265 884.778 945.67 883.886 946.287 cv
894.01 950.424 893.231 948.948 896.59 948.737 cv
897.434 948.672 898.326 948.916 899.121 948.851 cv
900.484 948.737 901.571 947.926 902.626 947.861 cv
904.167 947.78 905.417 948.494 905.692 948.786 cv
906.049 949.143 905.384 949.662 904.086 950.247 cv
896.266 953.637 889.792 952.339 887.715 952.842 cv
886.319 953.183 888.867 953.702 892.842 953.28 cv
893.832 953.183 895.13 953.54 896.444 953.231 cv
897.32 953.037 898.115 952.469 898.975 952.258 cv
899.77 952.063 900.582 952.08 901.247 951.95 cv
902.123 951.788 903.34 951.122 904.038 951.041 cv
906.633 950.749 907.899 951.203 908.191 951.447 cv
908.792 951.982 896.996 956.509 896.996 956.509 cv
896.996 956.509 888.867 957.677 887.05 957.677 cv
887.05 957.677 885.963 958.165 888.088 958.489 cv
cp
f
1347.2 1170.6 mo
1347.2 1170.6 1340.8 1190.97 1340.78 1191.01 cv
1339.69 1193.52 1336.35 1199.58 1335.74 1201.96 cv
1333.48 1210.92 1377.77 1204.44 1369.79 1198.21 cv
1369.06 1197.65 1364.74 1191.51 1365.24 1188.39 cv
1366.02 1183.59 1368.13 1176.17 1368.13 1176.17 cv
1347.2 1170.6 li
cp
.968627 .643137 .568627 rgb
f
1369.71 1198.1 mo
1369.71 1198.1 1359.6 1198.47 1354.6 1197.95 cv
1349.61 1197.42 1344.71 1190.05 1340.91 1190.75 cv
1336.72 1191.52 1331.46 1211.22 1331.46 1211.22 cv
1331.46 1211.22 1379.88 1227.38 1393.43 1226.92 cv
1399.52 1226.71 1387.34 1209.32 1369.71 1198.1 cv
cp
.094118 .27451 .333333 rgb
f
1424.52 1190.04 mo
1424.52 1190.04 1418.12 1210.41 1418.11 1210.45 cv
1417.01 1212.96 1413.67 1219.02 1413.06 1221.4 cv
1410.8 1230.36 1455.09 1223.88 1447.11 1217.65 cv
1446.38 1217.08 1442.06 1210.95 1442.56 1207.83 cv
1443.34 1203.03 1445.45 1195.61 1445.45 1195.61 cv
1424.52 1190.04 li
cp
.968627 .643137 .568627 rgb
f
1447.03 1217.54 mo
1447.03 1217.54 1436.92 1217.91 1431.92 1217.38 cv
1426.93 1216.86 1422.03 1209.49 1418.23 1210.19 cv
1414.04 1210.96 1408.79 1230.65 1408.79 1230.65 cv
1408.79 1230.65 1457.2 1246.82 1470.75 1246.36 cv
1476.84 1246.15 1464.66 1228.76 1447.03 1217.54 cv
cp
.094118 .27451 .333333 rgb
f
1595.51 656.515 mo
1594.25 666.932 1596.01 666.693 1595.81 668.025 cv
1595.58 669.601 1581.61 685.786 1581.61 685.786 cv
1581.61 685.786 1540.76 733.756 1538.47 736.271 cv
1480.25 764.465 li
1485.18 797.337 li
1485.18 797.337 1547.75 764.979 1550.74 762.716 cv
1553.73 760.452 1601.64 689.283 1606.05 683.15 cv
1606.05 683.15 1613.94 677.736 1618.79 674.174 cv
1623.63 670.613 1626.72 665.089 1627.93 663.878 cv
1628.11 663.7 1631.94 659.432 1635.3 652.942 cv
1638.19 647.349 1632.94 651.375 1632.94 651.375 cv
1632.94 651.375 1625.77 660.81 1625.14 660.126 cv
1624.66 659.6 1628.88 654.675 1632.14 648.519 cv
1632.98 646.936 1633.8 645.371 1634.55 643.927 cv
1636.5 640.138 1634.79 637.897 1632.13 641.549 cv
1631.19 642.838 1629.68 645.017 1628.81 646.719 cv
1627.88 648.559 1626.44 649.958 1625.43 651.388 cv
1623.41 654.227 1621.98 656.323 1621.91 656.177 cv
1621.82 655.989 1621.04 656.276 1621.88 654.569 cv
1622.89 652.517 1625.97 648.614 1627.23 645.485 cv
1627.94 643.711 1629.65 640.09 1629.65 640.09 cv
1629.65 640.09 1631.24 634.153 1630.93 633.951 cv
1629.25 632.857 1627.04 636.629 1626.38 639.161 cv
1625.15 640.573 1623.46 644.432 1623.46 644.432 cv
1623.46 644.432 1618.32 651.5 1617.34 650.803 cv
1616.92 650.506 1619.57 645.803 1621.46 640.796 cv
1623.21 636.148 1624.24 631.18 1623.39 630.711 cv
1621.95 629.917 1619.46 634.882 1619.46 634.882 cv
1619.46 634.882 1617.9 638.449 1617.3 639.596 cv
1616.58 640.941 1614.16 644.809 1614.16 644.809 cv
1614.16 644.809 1605.08 657.894 1604.21 657.152 cv
1603.34 656.412 1601.87 653.587 1602.16 652.585 cv
1602.45 651.585 1603.92 650.008 1604.21 649.007 cv
1604.5 648.006 1604.04 646.469 1602.85 646.045 cv
1601.67 645.621 1598.46 649.96 1598.46 649.96 cv
1598.46 649.96 1595.87 653.508 1595.51 656.515 cv
cp
.972549 .643137 .572549 rgb
f
1348.82 615.212 mo
1346.82 625.513 1345.22 624.747 1345 626.075 cv
1344.73 627.646 1353.06 647.33 1353.06 647.33 cv
1353.06 647.33 1377.22 705.503 1378.63 708.599 cv
1425.39 753.271 li
1410.61 783.05 li
1410.61 783.05 1360.99 733.082 1358.83 730.011 cv
1356.68 726.939 1332.92 644.523 1330.6 637.333 cv
1330.6 637.333 1324.76 629.764 1321.24 624.889 cv
1317.72 620.014 1316.48 613.813 1315.69 612.287 cv
1315.58 612.063 1313.25 606.828 1312.04 599.623 cv
1311.01 593.413 1314.76 598.852 1314.76 598.852 cv
1314.76 598.852 1318.7 610.03 1319.5 609.571 cv
1320.12 609.218 1317.62 603.238 1316.4 596.378 cv
1316.09 594.615 1315.79 592.873 1315.52 591.271 cv
1314.83 587.065 1317.14 585.458 1318.56 589.749 cv
1319.06 591.264 1319.83 593.801 1320.12 595.686 cv
1320.45 597.722 1321.39 599.494 1321.91 601.166 cv
1322.96 604.485 1323.68 606.919 1323.79 606.802 cv
1323.93 606.65 1324.59 607.164 1324.32 605.282 cv
1323.99 603.02 1322.25 598.358 1322.01 594.995 cv
1321.88 593.089 1321.36 589.119 1321.36 589.119 cv
1321.36 589.119 1321.67 582.982 1322.03 582.884 cv
1323.96 582.357 1324.91 586.624 1324.76 589.235 cv
1325.5 590.957 1325.92 595.148 1325.92 595.148 cv
1325.92 595.148 1328.64 603.45 1329.79 603.087 cv
1330.28 602.934 1329.21 597.646 1328.95 592.302 cv
1328.7 587.34 1329.25 582.297 1330.2 582.11 cv
1331.81 581.795 1332.66 587.283 1332.66 587.283 cv
1332.66 587.283 1333.05 591.156 1333.27 592.434 cv
1333.54 593.931 1334.66 598.358 1334.66 598.358 cv
1334.66 598.358 1339.28 613.591 1340.34 613.153 cv
1341.4 612.715 1343.66 610.476 1343.69 609.434 cv
1343.72 608.393 1342.8 606.441 1342.84 605.399 cv
1342.87 604.358 1343.79 603.038 1345.04 602.997 cv
1346.29 602.954 1348.02 608.069 1348.02 608.069 cv
1348.02 608.069 1349.4 612.239 1348.82 615.212 cv
cp
f
1425.29 910.548 mo
1425.29 910.548 1449.72 1069.53 1448.7 1083.05 cv
1447.95 1092.91 1418.64 1199.88 1418.64 1199.88 cv
1447.48 1206.65 li
1488.62 1086.37 li
1489.97 921.973 li
1425.29 910.548 li
cp
.717647 .341176 .258824 rgb
f
1396.89 910.601 mo
1384.22 1077.17 li
1339.13 1179.41 li
1371.84 1187.63 li
1426.57 1079.26 li
1461.92 954.318 li
1458.9 910.487 li
1396.89 910.601 li
cp
.956863 .454902 .345098 rgb
f
1524.13 741.081 mo
1524.13 741.081 1523.18 775.031 1526.96 781.312 cv
1526.96 781.312 1496.97 791.91 1496.45 798.967 cv
1495.93 806.025 1491.24 939.222 1491.24 939.222 cv
1491.24 939.222 1427.79 954.175 1394.09 940.717 cv
1394.09 940.717 1404.2 790.208 1399.11 781.742 cv
1394.02 773.276 1375.62 757.265 1375.62 757.265 cv
1375.62 757.265 1399.02 731.117 1400.37 725.784 cv
1400.37 725.784 1433.44 752.513 1438.17 760.391 cv
1442.91 768.269 1457.18 763.383 1460.45 762.881 cv
1460.45 762.881 1518.94 742.682 1524.13 741.081 cv
cp
.27451 .431373 .713726 rgb
f
1450.52 732.358 mo
1438.3 760.693 li
1438.3 760.693 1445.55 784.458 1456.3 783.89 cv
1465.33 783.414 1468.72 766.943 1468.72 766.943 cv
1468.72 766.943 1468.42 748.943 1471.92 740.854 cv
1475.42 732.764 1450.52 732.358 1450.52 732.358 cv
cp
.968627 .643137 .568627 rgb
f
1471.92 740.854 mo
1475.42 732.764 1450.52 732.358 1450.52 732.358 cv
1449.52 734.733 li
1449.79 736.559 1450.27 738.185 1451.02 739.526 cv
1454.86 746.427 1462.22 751.842 1469.25 753.88 cv
1469.69 749.154 1470.49 744.17 1471.92 740.854 cv
cp
.956863 .454902 .345098 rgb
f
1457.32 689.248 mo
1456.71 688.842 1443.42 721.834 1449.89 733.458 cv
1456.36 745.083 1472.81 752.492 1480.87 746.643 cv
1489.78 740.173 1498.72 703.369 1487.41 690.241 cv
1476.1 677.113 1457.32 689.248 1457.32 689.248 cv
cp
.968627 .643137 .568627 rgb
f
1462.87 670.646 mo
1457.9 669.995 1447.79 674.513 1438.21 683.887 cv
1426.44 695.412 1432.68 714.77 1440.51 724.611 cv
1448.33 734.453 1445.96 742.973 1445.96 742.973 cv
1448.69 738.933 li
1450.67 735.866 1452.03 732.429 1452.54 728.819 cv
1452.84 726.653 1452.96 724.258 1452.55 722.161 cv
1451.47 716.63 1459.64 715.191 1462.74 711.595 cv
1465.13 708.826 1467.04 701.599 1470.86 696.991 cv
1474.85 693.744 li
1474.85 693.744 1483.09 696.587 1489.42 693.371 cv
1507.6 684.133 1489.2 661.227 1462.87 670.646 cv
cp
.968627 .8 .498039 rgb
f
1460.75 717.561 mo
1459.77 721.747 1456.99 724.677 1454.54 724.105 cv
1452.09 723.533 1450.9 719.676 1451.89 715.491 cv
1452.87 711.305 1455.65 708.375 1458.1 708.947 cv
1460.55 709.518 1461.73 713.375 1460.75 717.561 cv
cp
.968627 .643137 .568627 rgb
f
1180.86 1134.29 mo
1172.61 1146.54 1163.21 1156.41 1162.02 1157.53 cv
1161.44 1158.07 1157.62 1159.3 1157.01 1159.84 cv
1151.65 1176.81 1158.55 1191.22 1165.94 1202.56 cv
1167.17 1193.37 1168.05 1180.8 1169.46 1179.25 cv
1171.71 1176.78 1179.4 1166.17 1194.92 1153.1 cv
1186.73 1148.5 1185.75 1142.25 1180.86 1134.29 cv
cp
.968627 .643137 .568627 rgb
f
1161.57 1157.81 mo
1155.5 1158.18 1144.02 1161.97 1144.09 1163.17 cv
1144.17 1164.61 1150.67 1214.63 1158.57 1219.03 cv
1163.32 1221.68 1164.2 1213.9 1165.94 1202.55 cv
1158.54 1191.21 1158.19 1160.7 1161.57 1157.81 cv
cp
.27451 .431373 .713726 rgb
f
1055.18 1110.91 mo
1042.5 1118.49 1029.93 1124.23 1028.37 1124.74 cv
1027.62 1124.98 1023.64 1124.47 1022.86 1124.7 cv
1010.78 1137.77 1010.89 1153.75 1012.75 1167.16 cv
1017.77 1159.36 1023.92 1148.37 1025.86 1147.56 cv
1028.94 1146.28 1040.11 1141.43 1059.72 1136.21 cv
1054.27 1128.55 1056.22 1120.19 1055.18 1110.91 cv
cp
.968627 .643137 .568627 rgb
f
1193.94 774.277 mo
1193.94 774.277 1213.11 738.204 1215.94 725.284 cv
1218.78 712.364 1228.61 647.302 1227.78 643.112 cv
1226.95 638.922 1211.41 628.839 1213.33 625.281 cv
1215.25 621.722 1230.05 621.712 1233.44 622.017 cv
1236.83 622.322 1243.64 624.296 1246.55 626.701 cv
1249.47 629.106 1243.27 707.075 1241.43 723.861 cv
1239.58 740.648 1211.47 795.642 1211.47 795.642 cv
1193.94 774.277 li
cp
f
1107.78 826.409 mo
1107.78 826.409 1068.7 888.976 1061.88 901.271 cv
1055.06 913.566 1029.63 944.886 1028.35 946.398 cv
1027.06 947.911 1000.17 946.544 1000.94 949.659 cv
1001.71 952.774 1014.06 949.699 1014.29 953.354 cv
1014.53 957.009 993.034 980.262 995.188 981.199 cv
999.217 982.954 1008.88 967.47 1010.61 968.645 cv
1012.34 969.819 999.039 983.88 1001.21 986.88 cv
1003.37 989.879 1012.56 972.398 1014.29 972.604 cv
1016.01 972.811 1007.82 990.191 1011.58 990.364 cv
1013.62 990.457 1018.49 974.734 1020.43 976.122 cv
1022.38 977.51 1020.51 990.102 1022.87 989.983 cv
1025.24 989.863 1023.03 979.227 1026.66 973.616 cv
1030.29 968.005 1030.04 962.091 1038.39 954.843 cv
1046.74 947.594 1079.11 925.487 1090.84 905.961 cv
1102.56 886.435 1128.6 843.359 1128.6 843.359 cv
1107.78 826.409 li
cp
f
1201.14 919.479 mo
1133.28 941.339 li
1133.28 941.339 1170.61 1004.81 1177.99 1017.46 cv
1185.36 1030.12 1217.14 1061.36 1217.19 1069.53 cv
1217.22 1075.31 1187.27 1113.67 1169.22 1137.07 cv
1173.29 1144.66 1184.45 1154.42 1191.51 1158.74 cv
1221.57 1130.24 1265.42 1085.3 1266.23 1070.57 cv
1267.41 1049.05 1201.14 919.479 1201.14 919.479 cv
cp
.235294 .560784 .486275 rgb
f
1027.81 1124.81 mo
1022.17 1122.56 1010.21 1121.1 1009.76 1122.22 cv
1009.22 1123.56 993.803 1171.58 999.08 1178.93 cv
1002.25 1183.35 1006.36 1176.68 1012.76 1167.16 cv
1010.9 1153.75 1024.05 1125.13 1027.81 1124.81 cv
cp
.27451 .431373 .713726 rgb
f
1187.22 958.642 mo
1188.09 954.462 1193.68 942.187 1196.56 932.41 cv
1198.96 924.307 1199.39 915.757 1197.85 907.451 cv
1197.85 907.451 li
1147.94 905.128 li
1146.03 908.839 li
1143.96 912.845 1141.06 916.373 1137.47 919.09 cv
1129.99 924.74 1116.88 937.143 1117.27 954.396 cv
1117.83 978.482 1134.96 1066.76 1129.27 1070.06 cv
1118.98 1076.02 1076.07 1096.9 1050.46 1109.74 cv
1050.81 1119.07 1053.42 1132.37 1058.29 1140.4 cv
1078.58 1132.64 1149.97 1101.04 1163.24 1093.29 cv
1169.24 1089.8 1185.75 965.748 1187.22 958.642 cv
cp
.313726 .74902 .647059 rgb
f
1066.63 677.754 mo
1070.59 688.212 1064.33 696.01 1059.97 706.309 cv
1057.05 713.223 1063.49 724.204 1070.78 729.261 cv
1089.24 742.071 1093.57 742.402 1092.23 759.8 cv
1089.02 801.706 1139.12 783.842 1147.18 782.51 cv
1155.24 781.177 1161.32 781.539 1165.17 778.874 cv
1176.77 770.842 1187.66 746.724 1185.62 726.409 cv
1183.58 706.093 1159.39 713.073 1153.86 703.746 cv
1148.32 694.417 1165.04 682.802 1150.79 667.224 cv
1109.87 622.487 1067.16 652.492 1065.63 669.6 cv
1065.35 672.777 1065.76 675.472 1066.63 677.754 cv
cp
.956863 .454902 .345098 rgb
f
1207.21 825.772 mo
1207.21 825.772 1221.13 792.688 1223.36 787.191 cv
1223.36 787.191 1203.92 769.87 1192.31 771.22 cv
1192.31 771.22 1177.27 794.851 1168.4 795.703 cv
1159.53 796.555 1128.34 797.882 1122.87 801.137 cv
1117.4 804.392 1094.2 839.338 1094.2 839.338 cv
1094.2 839.338 1115.05 860.225 1123.44 860.182 cv
1123.44 860.182 1129.14 846.076 1131.08 848.646 cv
1133.03 851.217 1140.74 906.026 1144.63 910.2 cv
1148.23 914.063 1191.92 928.801 1204.53 926.092 cv
1204.53 926.092 1211.32 873.328 1210.95 840.854 cv
1210.9 835.893 1207.21 825.772 1207.21 825.772 cv
cp
.968627 .8 .498039 rgb
f
1146.38 780.169 mo
1146.38 780.169 1151.3 796.437 1151.34 803.05 cv
1151.37 809.664 1156.64 830.447 1170.51 829.085 cv
1184.37 827.723 1170.37 801.984 1168.4 795.703 cv
1166.43 789.421 1164.07 769.592 1164.07 769.592 cv
1146.38 780.169 li
cp
.968627 .643137 .568627 rgb
f
1165.38 779.527 mo
1164.61 774.116 1164.07 769.592 1164.07 769.592 cv
1146.38 780.169 li
1146.38 780.169 1147.38 783.496 1148.49 787.751 cv
1156.79 788.546 1162.38 784.926 1165.38 779.527 cv
cp
.956863 .454902 .345098 rgb
f
1134.85 735.06 mo
1134.85 735.06 1128.1 739.773 1126.37 748.654 cv
1124.64 757.536 1129.92 779.447 1148.97 782.898 cv
1168.03 786.348 1174.22 767.926 1168.99 754.564 cv
1163.76 741.202 1153.67 724.638 1134.85 735.06 cv
cp
.968627 .643137 .568627 rgb
f
1170.75 748.993 mo
1170.77 752.725 1169.03 755.76 1166.85 755.771 cv
1164.68 755.782 1162.9 752.766 1162.88 749.034 cv
1162.86 745.302 1164.61 742.267 1166.78 742.256 cv
1168.96 742.245 1170.73 745.261 1170.75 748.993 cv
cp
f
1134.65 767.585 mo
1137.16 770.59 1137.55 774.399 1135.52 776.094 cv
1133.48 777.788 1129.81 776.726 1127.3 773.721 cv
1124.79 770.716 1124.41 766.906 1126.44 765.212 cv
1128.47 763.518 1132.15 764.58 1134.65 767.585 cv
cp
f
1226.69 625.426 mo
1226.28 625.682 1225.89 625.96 1225.53 626.287 cv
1223.41 628.208 li
1223.41 628.208 li
1225.36 628.671 1228.61 628.295 1231.64 630.586 cv
1231.64 630.586 1231.04 628.105 1226.69 625.426 cv
cp
.956863 .447059 .341176 rgb
f
1237.16 541.279 mo
1243.2 533.561 1256.96 522.29 1259.93 519.896 cv
1262.59 522.605 1266.59 530.598 1267.12 534.21 cv
1263.31 534.993 1246.82 540.111 1237.16 541.279 cv
cp
1259.8 515.346 mo
1255.22 516.248 1236.93 540.756 1236.93 540.756 cv
1236.29 542.453 li
1236.29 542.453 1269.38 538.772 1270.58 537.359 cv
1273.81 533.539 1263.56 514.605 1259.8 515.346 cv
cp
.956863 .454902 .345098 rgb
f
1201.82 521.878 mo
1200.26 518.625 1206.91 508.842 1209.52 507.104 cv
1210.16 506.829 1210.72 506.601 1211.2 506.601 cv
1211.78 506.601 1213.98 507.042 1218.17 512.719 cv
1222.75 518.925 1230.06 534.219 1231.85 540.646 cv
1219.4 535.117 1203.32 524.637 1201.82 521.878 cv
cp
1221.43 510.315 mo
1214.29 500.645 1210.49 502.278 1207.79 503.443 cv
1205.09 504.608 1195.04 517.124 1198.18 523.645 cv
1201.31 530.167 1232.23 542.995 1232.23 542.995 cv
1233.35 540.587 li
1233.35 540.587 1228.57 519.985 1221.43 510.315 cv
cp
f
1233.65 547.17 mo
1235.13 547.17 li
1236.6 547.17 1237.8 545.978 1237.8 544.507 cv
1237.8 540.14 li
1237.8 538.669 1236.6 537.477 1235.13 537.477 cv
1233.65 537.477 li
1232.18 537.477 1230.98 538.669 1230.98 540.14 cv
1230.98 544.507 li
1230.98 545.978 1232.18 547.17 1233.65 547.17 cv
cp
f
1284.5 628.205 mo
1190.45 628.205 li
1185.37 628.205 1181.16 624.26 1180.83 619.188 cv
1175.9 543.649 li
1298.37 543.649 li
1293.23 622.325 li
1293.02 625.615 1289.17 628.205 1284.5 628.205 cv
cp
.968627 .8 .498039 rgb
f
1303.42 560.132 mo
1170.47 560.385 li
1169.06 551.838 li
1168.21 546.71 1172.17 542.051 1177.37 542.065 cv
1297.68 542.396 li
1301.96 542.408 1305.3 545.042 1304.92 548.098 cv
1303.42 560.132 li
cp
.980392 .878431 .698039 rgb
f
1236.78 560.3 mo
1234.25 560.3 li
1234.25 542.181 li
1236.78 542.181 li
1236.78 560.3 li
cp
.956863 .454902 .345098 rgb
f
1239.98 628.331 mo
1236.82 628.331 li
1236.82 560.216 li
1239.98 560.216 li
1239.98 628.331 li
cp
f
1224.64 633.016 mo
1223.45 628.262 li
1219.71 628.353 1216.93 627.463 1214.85 626.898 cv
1211.53 625.455 li
1210.48 624.996 1209.26 625.494 1208.82 626.558 cv
1208.82 626.558 li
1208.48 627.398 1208.73 628.364 1209.44 628.93 cv
1209.44 628.93 1218.4 636.307 1221.55 638.547 cv
1223.11 639.658 1228.02 642.652 1228.02 642.652 cv
1230.88 637.304 li
1224.64 633.016 li
cp
.968627 .643137 .568627 rgb
f
1951.95 1649.48 mo
1951.95 1649.48 2186.41 1558.56 2230.15 1504.2 cv
2273.89 1449.83 2217.39 1441.54 2217.39 1441.54 cv
2217.39 1441.54 2326.26 1352.89 2315.79 1310.59 cv
2305.31 1268.3 2250.04 1301.36 2250.04 1301.36 cv
2250.04 1301.36 2327.19 1163.55 2298.07 1146.43 cv
2243.83 1114.56 2150.75 1261.95 2150.75 1261.95 cv
2150.75 1261.95 2173.75 1196.38 2134.57 1195.11 cv
2075.48 1193.2 2064.5 1345.15 2064.5 1345.15 cv
2064.5 1345.15 2063 1286.38 2025.9 1302.15 cv
1959.31 1330.44 1951.95 1649.48 1951.95 1649.48 cv
cp
.207843 .32549 .537255 rgb
f
2015.18 1277.55 mo
2044.21 1264.64 2067.8 1311.96 2067.8 1311.96 cv
2067.8 1311.96 2075.48 1193.2 2134.57 1195.11 cv
2173.75 1196.38 2150.75 1261.95 2150.75 1261.95 cv
2150.75 1261.95 2243.83 1114.56 2298.07 1146.43 cv
1951.9 1646.99 li
1953.04 1610 1957.67 1303.13 2015.18 1277.55 cv
cp
.27451 .431373 .713726 rgb
f
1931.78 1663.06 mo
1931.78 1663.06 2116.3 1685.5 2164.01 1664.97 cv
2211.72 1644.43 2177.43 1619.3 2177.43 1619.3 cv
2177.43 1619.3 2279.93 1598.88 2287.77 1567.4 cv
2295.6 1535.92 2248.3 1538.55 2248.3 1538.55 cv
2248.3 1538.55 2346.47 1474.61 2333.27 1453.22 cv
2308.68 1413.36 2196.12 1477.93 2196.12 1477.93 cv
2196.12 1477.93 2234.08 1442.79 2208.74 1428.32 cv
2170.53 1406.49 2110.4 1502.64 2110.4 1502.64 cv
2110.4 1502.64 2114.09 1478.97 2084.18 1476.42 cv
2030.53 1471.85 1931.78 1663.06 1931.78 1663.06 cv
cp
.207843 .32549 .537255 rgb
f
2082.93 1459.23 mo
2112.83 1461.78 2110.4 1502.64 2110.4 1502.64 cv
2110.4 1502.64 2171.57 1388.69 2209.79 1410.52 cv
2235.13 1424.99 2205.31 1472.82 2205.31 1472.82 cv
2205.31 1472.82 2308.68 1413.36 2333.27 1453.22 cv
1931.21 1662.04 li
1944.84 1638.1 2032.81 1454.96 2082.93 1459.23 cv
cp
.27451 .431373 .713726 rgb
f
812.144 1649.48 mo
812.144 1649.48 577.682 1558.56 533.939 1504.2 cv
490.195 1449.83 546.703 1441.54 546.703 1441.54 cv
546.703 1441.54 437.825 1352.89 448.304 1310.59 cv
458.782 1268.3 514.046 1301.36 514.046 1301.36 cv
514.046 1301.36 436.897 1163.55 466.019 1146.43 cv
520.263 1114.56 613.334 1261.95 613.334 1261.95 cv
613.334 1261.95 590.337 1196.38 629.518 1195.11 cv
688.606 1193.2 699.585 1345.15 699.585 1345.15 cv
699.585 1345.15 701.084 1286.38 738.193 1302.15 cv
804.774 1330.44 812.144 1649.48 812.144 1649.48 cv
cp
.207843 .32549 .537255 rgb
f
748.913 1277.55 mo
719.883 1264.64 696.287 1311.96 696.287 1311.96 cv
696.287 1311.96 688.606 1193.2 629.518 1195.11 cv
590.337 1196.38 613.334 1261.95 613.334 1261.95 cv
613.334 1261.95 520.263 1114.56 466.019 1146.43 cv
812.184 1646.99 li
811.048 1610 806.422 1303.13 748.913 1277.55 cv
cp
.27451 .431373 .713726 rgb
f
832.312 1663.06 mo
832.312 1663.06 647.787 1685.5 600.076 1664.97 cv
552.366 1644.43 586.66 1619.3 586.66 1619.3 cv
586.66 1619.3 484.154 1598.88 476.322 1567.4 cv
468.489 1535.92 515.793 1538.55 515.793 1538.55 cv
515.793 1538.55 417.617 1474.61 430.82 1453.22 cv
455.413 1413.36 567.968 1477.93 567.968 1477.93 cv
567.968 1477.93 530.008 1442.79 555.347 1428.32 cv
593.561 1406.49 653.689 1502.64 653.689 1502.64 cv
653.689 1502.64 650 1478.97 679.906 1476.42 cv
733.563 1471.85 832.312 1663.06 832.312 1663.06 cv
cp
.207843 .32549 .537255 rgb
f
681.16 1459.23 mo
651.254 1461.78 653.689 1502.64 653.689 1502.64 cv
653.689 1502.64 592.514 1388.69 554.3 1410.52 cv
528.961 1424.99 558.775 1472.82 558.775 1472.82 cv
558.775 1472.82 455.413 1413.36 430.82 1453.22 cv
832.875 1662.04 li
819.247 1638.1 731.28 1454.96 681.16 1459.23 cv
cp
.27451 .431373 .713726 rgb
f
635.152 928.524 mo
646.622 930.79 li
646.622 930.79 663.387 922.958 664.666 919.184 cv
665.943 915.41 665.356 906.71 667.812 906.166 cv
670.267 905.622 675.172 905.833 677.051 911.603 cv
678.415 915.792 673.671 928.977 674.816 930.176 cv
675.534 930.925 682.088 932.416 686.895 933.427 cv
690.055 934.092 692.574 936.488 693.439 939.648 cv
693.441 939.657 li
694.026 941.792 693.058 944.065 691.119 945.104 cv
688.102 946.722 li
689.52 949.87 li
690.575 952.213 689.566 954.997 687.26 956.103 cv
684.91 957.23 li
685.941 959.126 li
687.27 961.568 686.21 964.658 683.667 965.752 cv
681.603 966.641 li
681.762 967.203 li
682.425 969.54 681.218 972.018 678.981 972.912 cv
676.923 973.734 li
646.376 967.695 li
643.514 967.13 640.8 965.974 638.401 964.3 cv
628.017 960.368 li
626.901 959.946 626.263 958.754 626.517 957.566 cv
632.319 930.427 li
632.599 929.117 633.86 928.269 635.152 928.524 cv
cp
.588235 .85098 .788235 rgb
f
1685.19 805.595 mo
1685.19 805.595 1678.88 735.327 1677.39 721.121 cv
1675.91 706.914 1682.84 660.694 1683.04 658.689 cv
1683.25 656.684 1706.41 643.02 1703.85 640.869 cv
1701.3 638.718 1692.38 648.446 1689.97 645.534 cv
1687.55 642.623 1692.24 610.769 1689.8 611.236 cv
1685.22 612.111 1686.15 630.625 1683.94 630.648 cv
1681.72 630.671 1684.82 611.235 1681.11 609.991 cv
1677.41 608.746 1679.96 628.653 1678.33 629.479 cv
1676.71 630.307 1673.34 611.066 1669.96 613.104 cv
1668.12 614.211 1673.38 630.144 1670.85 630.113 cv
1668.31 630.083 1662.33 618.499 1660.34 619.971 cv
1658.35 621.443 1666.7 629.031 1666.93 635.813 cv
1667.16 642.595 1670.95 647.383 1668.05 658.27 cv
1665.15 669.158 1648.32 708.261 1649.9 731.344 cv
1651.47 754.427 1656.78 803.539 1656.78 803.539 cv
1685.19 805.595 li
cp
.956863 .54902 .498039 rgb
f
1685.15 742.626 mo
1647.43 750.734 li
1648.84 832.524 li
1681.98 820.891 li
1685.15 742.626 li
cp
.235294 .560784 .486275 rgb
f
1769.98 736.508 mo
1759.16 722.191 1740.4 717.396 1724.74 725.686 cv
1717.26 719.08 1707.02 715.667 1697.23 716.611 cv
1677.92 718.473 1657.27 738.921 1663.55 757.997 cv
1660.27 773.189 1660.83 786.621 1674.49 793.055 cv
1675.81 811.666 1699.1 827.532 1720.08 820.206 cv
1731 830.048 1747.96 828.964 1761.44 822.864 cv
1764.62 821.425 1768.1 818.466 1769.13 818.329 cv
1769.14 818.327 1804.78 827.263 1816.31 794.042 cv
1828.37 759.272 1804.2 720.484 1769.98 736.508 cv
cp
.717647 .341176 .258824 rgb
f
1540.98 1034.51 mo
1543.02 1019.88 1641.07 924.284 1641.07 924.284 cv
1690.92 976.632 li
1690.92 976.632 1659.26 1000.67 1647.39 1009.59 cv
1640.07 1015.09 1615.27 1028.68 1597.05 1038.82 cv
1540.42 1038.82 li
1540.66 1036.84 1540.86 1035.38 1540.98 1034.51 cv
cp
.207843 .32549 .537255 rgb
f
1702.92 1001.14 mo
1697.35 967.285 1681.09 943.527 1679.11 924.207 cv
1679.09 924.046 1678.88 921.987 1679.09 921.924 cv
1679.08 921.926 1627.25 935.751 1627.25 935.751 cv
1627.25 935.751 1622.74 955.757 1625.83 965.13 cv
1625.8 965.121 1632.69 1007.22 1642.27 1048.68 cv
1662.92 1047.63 1683.41 1044.97 1704.19 1042.58 cv
1704.72 1028.22 1704.72 1012.05 1702.92 1001.14 cv
cp
.27451 .431373 .713726 rgb
f
1631.2 866.639 mo
1631.84 855.937 1630.52 833.34 1631.47 829.891 cv
1631.43 829.609 1631.39 829.324 1631.34 829.035 cv
1670.7 801.5 li
1670.83 801.483 1670.31 801.412 1671.63 801.587 cv
1680.22 802.722 1709.14 811.485 1714.49 814.01 cv
1713.5 850.711 li
1710.32 852.306 1687.09 949.409 1693.29 959.3 cv
1696.31 964.137 1616.99 961.248 1614.78 951.779 cv
1613.82 947.675 1629.9 888.273 1631.2 866.639 cv
cp
.313726 .74902 .647059 rgb
f
1692.5 792.031 mo
1692.5 792.031 1689.2 808.749 1688.9 815.455 cv
1688.59 822.161 1680.47 842.705 1667.05 840.901 cv
1653.64 839.098 1667.26 813.186 1669.43 806.875 cv
1671.6 800.566 1675.74 780.766 1675.74 780.766 cv
1692.5 792.031 li
cp
.968627 .643137 .568627 rgb
f
1673.62 790.487 mo
1676.86 795.879 1682.69 799.326 1691.33 798.264 cv
1691.98 794.667 1692.5 792.031 1692.5 792.031 cv
1675.74 780.766 li
1675.74 780.766 1674.82 785.171 1673.62 790.487 cv
cp
.956863 .454902 .345098 rgb
f
1706.53 743.479 mo
1706.53 743.479 1713.31 748.789 1714.71 758.437 cv
1716.11 768.084 1709.7 791.579 1689.83 794.687 cv
1669.97 797.796 1664.36 777.699 1670.35 763.437 cv
1676.35 749.175 1687.51 731.614 1706.53 743.479 cv
cp
.968627 .643137 .568627 rgb
f
1668.99 758.968 mo
1668.82 762.752 1670.4 765.883 1672.51 765.961 cv
1674.62 766.038 1676.47 763.033 1676.64 759.25 cv
1676.81 755.465 1675.24 752.335 1673.13 752.257 cv
1671.02 752.18 1669.17 755.185 1668.99 758.968 cv
cp
f
1703.1 737.716 mo
1703.1 737.716 1702.8 767.336 1711.07 773.843 cv
1719.33 780.352 1713.76 792.73 1713.76 792.73 cv
1713.76 792.73 1726.12 763.904 1720.34 753.284 cv
1714.57 742.665 1703.1 737.716 1703.1 737.716 cv
cp
.717647 .341176 .258824 rgb
f
1705.37 779.282 mo
1702.82 782.252 1702.29 786.104 1704.19 787.884 cv
1706.09 789.664 1709.71 788.699 1712.27 785.728 cv
1714.83 782.757 1715.36 778.906 1713.45 777.125 cv
1711.55 775.345 1707.93 776.311 1705.37 779.282 cv
cp
.968627 .643137 .568627 rgb
f
1700.45 810.163 mo
1700.45 810.163 1733.41 750.661 1741.44 738.008 cv
1749.46 725.354 1770.29 675.127 1771.03 673.149 cv
1771.78 671.17 1756.4 647.523 1759.8 646.695 cv
1763.2 645.866 1767.04 659.166 1770.67 657.557 cv
1774.29 655.948 1784.75 623.834 1786.83 625.415 cv
1790.72 628.372 1781.21 645.332 1783.28 646.387 cv
1785.35 647.443 1791.51 627.739 1795.57 628.298 cv
1799.63 628.857 1787.94 646.368 1789.09 647.903 cv
1790.23 649.439 1802.37 632.936 1804.6 636.43 cv
1805.81 638.328 1793.43 650.84 1795.83 651.994 cv
1798.22 653.148 1809.25 645.058 1810.43 647.369 cv
1811.62 649.682 1800.22 652.911 1796.84 659.175 cv
1793.46 665.441 1787.67 668.17 1785.31 679.752 cv
1782.96 691.334 1779.56 733.222 1767.3 754.173 cv
1755.05 775.123 1728.1 821.49 1728.1 821.49 cv
1700.45 810.163 li
cp
.956863 .54902 .498039 rgb
f
1689.5 806.288 mo
1699.03 794.643 1723.29 763.239 1723.29 763.239 cv
1723.29 763.239 1748.05 779.99 1750.72 788.809 cv
1750.72 788.809 1705.81 856.572 1709.12 857.908 cv
1709.12 857.908 1686.27 810.228 1689.5 806.288 cv
cp
.313726 .74902 .647059 rgb
f
1641.67 469.934 mo
1651.32 473.016 li
1648.07 489.085 li
1661.62 495.331 li
1661.16 507.753 li
1667.45 507.987 li
1668.06 491.373 li
1655.22 485.454 li
1658.6 468.737 li
1644.08 464.1 li
1641.67 469.934 li
cp
f
1802.51 540.282 mo
1732.7 527.28 li
1724.46 525.747 1719.03 517.827 1720.56 509.592 cv
1727.89 470.281 li
1729.42 462.045 1737.34 456.613 1745.57 458.147 cv
1815.39 471.149 li
1823.62 472.683 1829.05 480.602 1827.52 488.837 cv
1820.2 528.149 li
1818.66 536.384 1810.75 541.816 1802.51 540.282 cv
cp
.980392 .878431 .698039 rgb
f
1727.34 490.166 mo
1692.17 515.174 li
1730.1 514.875 li
1727.34 490.166 li
cp
f
1754.94 490.684 mo
1763.93 492.122 li
1763.93 492.122 1776.71 485.71 1777.59 482.794 cv
1778.47 479.878 1777.74 473.246 1779.63 472.767 cv
1781.52 472.289 1785.34 472.325 1786.98 476.686 cv
1788.17 479.851 1784.89 490.046 1785.82 490.933 cv
1786.4 491.488 1791.53 492.459 1795.3 493.109 cv
1797.78 493.536 1799.81 495.303 1800.58 497.694 cv
1800.58 497.702 li
1801.1 499.319 1800.42 501.079 1798.94 501.923 cv
1796.65 503.236 li
1797.85 505.605 li
1798.74 507.368 1798.04 509.521 1796.28 510.425 cv
1794.49 511.346 li
1795.35 512.769 li
1796.46 514.6 1795.73 516.988 1793.79 517.889 cv
1792.21 518.621 li
1792.35 519.046 li
1792.94 520.815 1792.08 522.739 1790.37 523.479 cv
1788.79 524.16 li
1764.87 520.326 li
1762.63 519.967 1760.49 519.153 1758.57 517.936 cv
1750.38 515.197 li
1749.5 514.902 1748.97 514.008 1749.13 513.094 cv
1752.8 492.21 li
1752.98 491.202 1753.93 490.522 1754.94 490.684 cv
cp
1 1 1 rgb
f
2050.93 426.008 mo
2055.65 415.08 li
2049.32 404.997 li
2048.6 403.848 2049.51 402.372 2050.86 402.499 cv
2062.71 403.61 li
2070.34 394.476 li
2071.21 393.436 2072.9 393.844 2073.2 395.167 cv
2075.8 406.783 li
2086.85 411.221 li
2088.11 411.727 2088.24 413.455 2087.07 414.146 cv
2076.83 420.214 li
2076.02 432.09 li
2075.93 433.443 2074.33 434.104 2073.31 433.208 cv
2064.37 425.342 li
2052.83 428.244 li
2051.51 428.574 2050.39 427.253 2050.93 426.008 cv
cp
.968627 .8 .498039 rgb
f
676.606 573.553 mo
671.065 565.917 li
661.633 566.151 li
660.558 566.178 659.919 564.961 660.552 564.092 cv
666.103 556.463 li
662.964 547.564 li
662.607 546.551 663.567 545.568 664.589 545.9 cv
673.56 548.822 li
681.053 543.087 li
681.906 542.435 683.138 543.043 683.138 544.118 cv
683.131 553.554 li
690.901 558.908 li
691.785 559.517 691.587 560.877 690.564 561.208 cv
681.589 564.119 li
678.898 573.162 li
678.592 574.192 677.237 574.423 676.606 573.553 cv
cp
.588235 .85098 .788235 rgb
f
2028.86 569.342 mo
2016.77 572.424 li
2009.67 553.522 li
1991.43 555.85 li
1983.8 542.574 li
1977.08 546.438 li
1987.29 564.194 li
2004.57 561.988 li
2011.96 581.652 li
2030.15 577.013 li
2028.86 569.342 li
cp
.27451 .431373 .713726 rgb
f
1918.6 559.801 mo
1906.55 557.048 li
1908.83 537.156 li
1891.7 530.956 li
1890.98 515.791 li
1883.3 516.156 li
1884.26 536.439 li
1900.5 542.315 li
1898.12 563.008 li
1916.27 567.151 li
1918.6 559.801 li
cp
.968627 .8 .498039 rgb
f
2041.33 504.046 mo
2032.71 489.73 li
2018.87 496.861 li
2009.76 483.132 li
1995.69 488.315 li
1987.2 479.156 li
1982.56 483.457 li
1993.92 495.708 li
2007.26 490.795 li
2016.73 505.077 li
2030.34 498.063 li
2038.15 511.038 li
2041.33 504.046 li
cp
f
841.167 612.15 mo
834.782 602.917 li
823.556 602.941 li
822.278 602.944 821.551 601.48 822.326 600.463 cv
829.135 591.538 li
825.642 580.868 li
825.245 579.653 826.412 578.509 827.619 578.932 cv
838.212 582.65 li
847.279 576.031 li
848.313 575.277 849.762 576.035 849.731 577.313 cv
849.47 588.537 li
858.567 595.115 li
859.603 595.864 859.33 597.476 858.105 597.843 cv
847.35 601.062 li
843.904 611.747 li
843.513 612.963 841.895 613.202 841.167 612.15 cv
cp
.956863 .454902 .345098 rgb
f
1178.94 400.422 mo
1181.44 395.432 li
1193.63 401.546 li
1199.37 384.109 li
1204.68 385.854 li
1196.91 409.438 li
1178.94 400.422 li
cp
.313726 .74902 .647059 rgb
f
1492.35 453.865 mo
1479.98 449.219 li
1469.13 456.778 li
1467.9 457.639 1466.21 456.71 1466.28 455.207 cv
1466.88 442.002 li
1456.33 434.027 li
1455.13 433.118 1455.5 431.228 1456.95 430.828 cv
1469.69 427.313 li
1474.02 414.825 li
1474.51 413.402 1476.42 413.163 1477.25 414.419 cv
1484.53 425.451 li
1497.75 425.708 li
1499.25 425.737 1500.07 427.479 1499.13 428.657 cv
1490.89 438.989 li
1494.73 451.637 li
1495.16 453.078 1493.76 454.394 1492.35 453.865 cv
cp
.588235 .85098 .788235 rgb
f
637.442 676.79 mo
623.488 677.348 li
617.997 690.489 li
602.312 690.006 li
600.779 705.806 li
583.016 706.043 li
579.81 720.418 li
562.757 723.44 li
561.613 716.986 li
574.363 714.726 li
577.746 699.557 li
594.821 699.33 li
596.379 683.265 li
613.689 683.798 li
619.051 670.965 li
631.984 670.448 li
633.743 661.285 li
640.181 662.52 li
637.442 676.79 li
cp
.968627 .8 .498039 rgb
f
914.563 495.078 mo
916.057 510.131 905.066 523.543 890.015 525.035 cv
874.963 526.526 861.55 515.531 860.057 500.478 cv
858.563 485.424 869.554 472.012 884.605 470.521 cv
899.657 469.03 913.07 480.025 914.563 495.078 cv
cp
.968627 .8 .498039 rgb
f
873.167 503.54 mo
873.966 511.587 881.137 517.466 889.185 516.668 cv
897.232 515.872 903.108 508.701 902.31 500.652 cv
873.167 503.54 li
cp
.937255 .937255 .937255 rgb
f
1323.86 441.647 mo
1329.55 432.364 li
1320.5 428.694 li
1314.81 437.977 li
1323.86 441.647 li
cp
1300.8 449.929 mo
1307.17 439.592 li
1302.05 437.519 li
1300.94 437.066 1300.4 435.791 1300.85 434.673 cv
1300.85 434.673 li
1301.3 433.555 1302.58 433.016 1303.7 433.469 cv
1309.59 435.859 li
1315.28 426.576 li
1309.82 424.362 li
1308.7 423.909 1308.17 422.635 1308.62 421.516 cv
1308.62 421.516 li
1309.07 420.398 1310.35 419.859 1311.46 420.313 cv
1317.71 422.844 li
1324.31 412.213 li
1324.88 411.31 1326.01 410.942 1326.99 411.342 cv
1327.94 411.729 li
1329.2 412.235 1329.69 413.744 1328.99 414.895 cv
1322.84 424.926 li
1331.89 428.596 li
1338.5 417.966 li
1339.06 417.062 1340.19 416.694 1341.18 417.094 cv
1342.22 417.516 li
1343.47 418.023 1343.96 419.532 1343.26 420.683 cv
1337.11 430.713 li
1342.22 432.786 li
1343.34 433.24 1343.88 434.514 1343.43 435.632 cv
1343.43 435.632 li
1342.97 436.751 1341.7 437.29 1340.58 436.836 cv
1334.69 434.446 li
1329.08 443.764 li
1334.54 445.978 li
1335.66 446.432 1336.2 447.706 1335.75 448.825 cv
1335.75 448.825 li
1335.29 449.943 1334.02 450.482 1332.9 450.028 cv
1326.66 447.497 li
1319.91 458.459 li
1319.35 459.369 1318.22 459.74 1317.23 459.339 cv
1316.11 458.887 li
1314.86 458.379 1314.36 456.867 1315.07 455.716 cv
1321.44 445.379 li
1312.39 441.709 li
1305.64 452.672 li
1305.08 453.581 1303.94 453.952 1302.96 453.551 cv
1301.84 453.1 li
1300.59 452.592 1300.09 451.08 1300.8 449.929 cv
cp
.956863 .54902 .498039 rgb
f
1069.7 507.909 mo
1069.7 507.909 1072.47 499.594 1082.21 496.458 cv
1090.91 493.663 1099.12 498.643 1101.71 506.688 cv
1104.7 515.999 1100.08 529.643 1081.96 546.037 cv
1057.69 543.28 1045.98 534.889 1042.98 525.578 cv
1040.4 517.534 1044.16 508.7 1052.85 505.904 cv
1062.6 502.768 1069.7 507.909 1069.7 507.909 cv
cp
f
999.034 534.698 mo
1007.92 533.353 1014.99 531.821 1021.87 529.986 cv
1024.14 529.381 1028.25 529.002 1029.3 526.637 cv
1029.85 525.408 1029.65 524.144 1028.46 523.358 cv
1026.29 521.918 1023.07 523.57 1020.78 524.179 cv
1013.82 526.034 1005.84 527.801 997.681 529.121 cv
996.15 529.368 995.224 531.163 995.568 532.586 cv
995.961 534.205 997.498 534.931 999.034 534.698 cv
999.034 534.698 li
cp
f
1120.13 521.67 mo
1123.48 520.839 1126.81 519.946 1130.15 519.063 cv
1133.34 518.218 1137.26 517.78 1139.99 515.89 cv
1142.01 514.496 1141.43 511.48 1138.86 511.26 cv
1135.54 510.976 1131.96 512.514 1128.77 513.371 cv
1125.43 514.264 1122.1 515.148 1118.78 516.093 cv
1115.23 517.102 1116.53 522.564 1120.13 521.67 cv
1120.13 521.67 li
cp
f
1041.33 570.247 mo
1043.67 562.118 1048.2 558.61 1051.38 554.89 cv
1053.09 552.9 1051.12 550.124 1048.68 551.197 cv
1041.98 554.139 1037.69 561.964 1035.83 568.696 cv
1034.86 572.239 1040.32 573.792 1041.33 570.247 cv
1041.33 570.247 li
cp
f
1084.43 577.744 mo
1083.39 574.332 1083.03 570.826 1083.46 567.276 cv
1083.72 565.106 1086.25 558.572 1082.06 558.573 cv
1078.11 558.573 1077.72 565.162 1077.51 567.957 cv
1077.23 571.701 1077.7 575.525 1078.83 579.103 cv
1079.94 582.624 1085.51 581.304 1084.43 577.744 cv
1084.43 577.744 li
cp
f
1107.21 549.312 mo
1109.42 550.172 1111.63 551.032 1113.84 551.892 cv
1116.04 552.75 1118.33 554.241 1120.64 553.102 cv
1121.94 552.461 1122.12 550.942 1121.63 549.742 cv
1120.76 547.564 1117.45 547.007 1115.43 546.235 cv
1113.22 545.389 1111.01 544.542 1108.79 543.696 cv
1107.32 543.133 1105.59 544.294 1105.2 545.712 cv
1104.73 547.35 1105.74 548.738 1107.21 549.312 cv
1107.21 549.312 li
cp
f
1041.38 493.473 mo
1029.83 478.281 1029.94 478.159 1028.15 477.131 cv
1026.3 476.077 1023.87 477.758 1024.42 479.885 cv
1024.97 481.988 1024.92 481.632 1037.13 497.571 cv
1038.1 498.838 1040.25 498.666 1041.31 497.647 cv
1042.57 496.433 1042.35 494.748 1041.38 493.473 cv
1041.38 493.473 li
cp
f
1071.78 485.305 mo
1072.15 482.182 1072.18 479.055 1071.87 475.923 cv
1071.59 473.014 1071.55 468.515 1068.45 467.251 cv
1067.78 466.98 1066.74 467.264 1066.27 467.798 cv
1064.33 470.027 1065.81 473.698 1066.06 476.383 cv
1066.34 479.312 1066.29 482.271 1066.06 485.2 cv
1065.94 486.74 1067.39 488.083 1068.87 488.11 cv
1070.54 488.14 1071.6 486.843 1071.78 485.305 cv
1071.78 485.305 li
cp
f
1115.48 476.837 mo
1115.64 475.407 1114.27 474.453 1113.04 474.303 cv
1110.5 473.996 1108.07 477.017 1106.43 478.664 cv
1104.53 480.581 1102.84 482.672 1101.27 484.868 cv
1100.36 486.135 1101.02 488.071 1102.28 488.816 cv
1103.75 489.689 1105.27 489.043 1106.23 487.805 cv
1112.45 479.72 1115.09 480.366 1115.48 476.837 cv
cp
f
1464.26 504.83 mo
1460.4 511.656 li
1450.99 510.296 li
1444.37 519.988 li
1436.68 520.349 li
1435.28 524.702 li
1445.55 524.219 li
1451.83 515.034 li
1461.62 516.449 li
1467.43 506.177 li
1464.26 504.83 li
cp
.27451 .431373 .713726 rgb
f
2083.56 788.797 mo
2081.85 795.811 2078.77 806.895 2078.77 806.895 cv
2079.02 809.942 2079.92 822.624 2080.99 838.166 cv
2058.14 829.023 li
2058.14 829.023 2058.42 803.698 2057.4 802.148 cv
2056.53 800.837 2055.09 802.473 2048.08 792.452 cv
2046.06 789.56 2045.68 784.392 2045.68 784.392 cv
2045.68 784.392 2045.27 778.031 2046.7 777.439 cv
2048.12 776.846 2049.76 777.796 2050.28 778.895 cv
2050.8 779.995 2050.66 782.555 2051.18 783.654 cv
2051.7 784.753 2055 786.078 2056.39 786.009 cv
2057.79 785.94 2056.22 767.193 2056.22 767.193 cv
2056.22 767.193 2055.44 761.877 2055.05 760.137 cv
2054.71 758.654 2053.36 754.305 2053.36 754.305 cv
2053.36 754.305 2051.78 747.996 2053.74 747.514 cv
2054.89 747.23 2057.83 752.356 2059.85 757.796 cv
2062.03 763.656 2063.26 769.869 2063.88 769.785 cv
2065.34 769.589 2064.56 759.311 2064.56 759.311 cv
2064.56 759.311 2063.11 754.602 2063.15 752.38 cv
2061.77 749.658 2060.86 744.607 2063.28 744.189 cv
2063.73 744.112 2066.91 750.528 2066.91 750.528 cv
2066.91 750.528 2068.16 755.045 2068.89 757.156 cv
2070.18 760.88 2070.37 766.76 2071.05 769.353 cv
2071.61 771.51 2072.11 770.623 2072.34 770.713 cv
2072.52 770.783 2072.21 767.808 2071.85 763.719 cv
2071.67 761.659 2071.91 759.284 2071.33 756.938 cv
2070.8 754.766 2070.49 751.656 2070.35 749.779 cv
2069.96 744.462 2073.31 745.006 2074.47 749.867 cv
2074.91 751.719 2075.37 753.739 2075.83 755.789 cv
2077.63 763.758 2077.58 771.437 2078.44 771.5 cv
2079.56 771.583 2078.82 757.604 2078.82 757.604 cv
2078.82 757.604 2080.53 749.865 2082.23 757.047 cv
2084.21 765.38 2084 772.175 2083.97 772.475 cv
2083.79 774.51 2085.26 781.784 2083.56 788.797 cv
cp
.972549 .643137 .572549 rgb
f
2082.07 819.427 mo
2082.07 819.427 2056.33 813.266 2056.08 815.334 cv
2050.68 860.616 2048.25 876.993 2047.33 877.464 cv
2044.21 879.068 2002.86 841.255 1995.48 838.692 cv
1991.96 837.466 1988.12 837.671 1984.44 837.779 cv
1975.67 838.038 1973.94 838.071 1973.94 838.071 cv
1973.69 838.086 1973.62 838.092 1973.62 838.092 cv
1973.67 846.341 li
1983.55 855.233 2006.17 989.906 2008.08 989.816 cv
2010.2 989.717 2054.92 1000.97 2054.13 997.203 cv
2054 996.59 2023.82 971.888 2015.25 936.238 cv
2012.38 924.271 2010.96 911.384 2009.4 900.105 cv
2019.34 905.087 2058.14 924.183 2064.29 921.66 cv
2083.42 913.812 2082.07 819.427 2082.07 819.427 cv
cp
.235294 .560784 .486275 rgb
f
2159.08 1058.55 mo
2159.08 1058.55 2200.68 1091.13 2202.07 1096.91 cv
2204.06 1105.23 2242.16 1094.29 2232.97 1092.6 cv
2230.86 1092.21 2224.09 1090.49 2223.54 1090.2 cv
2220.56 1088.61 2183.55 1044 2183.55 1044 cv
2159.08 1058.55 li
cp
.968627 .643137 .568627 rgb
f
2250.84 1092.6 mo
2224.28 1090.44 li
2224.28 1090.44 2216.68 1096.72 2202.09 1097.01 cv
2202.09 1097.01 2199.76 1103.68 2200.87 1111.47 cv
2201.06 1112.81 2201.28 1116.88 2202.64 1116.78 cv
2207.55 1116.45 2220.62 1113.2 2235.52 1110.22 cv
2235.52 1110.22 2255.54 1105.98 2267.1 1099.06 cv
2278.67 1092.14 2250.84 1092.6 2250.84 1092.6 cv
cp
.717647 .341176 .258824 rgb
f
1972.67 976.802 mo
1972.67 976.802 2003.14 981.922 2036.83 974.039 cv
2075.82 964.918 2118.93 956.486 2131.56 963.83 cv
2141.72 969.74 2205.21 1065.68 2205.21 1065.68 cv
2180.7 1083.57 li
2110.79 1005.29 li
2110.79 1005.29 2021.6 1038.2 2001.57 1034.55 cv
1955.95 1026.24 1955.3 989.809 1972.67 976.802 cv
cp
.07451 .215686 .356863 rgb
f
2005.98 957.443 mo
2036.46 993.668 li
1979.91 1010.9 li
1972.67 976.802 li
2005.98 957.443 li
cp
f
2067.92 1122.91 mo
2067.92 1122.91 2064.83 1172.13 2063.68 1180.65 cv
2062.54 1189.13 2086.28 1215.78 2083.4 1206.89 cv
2082.74 1204.85 2081.04 1198.08 2081.03 1197.45 cv
2081.02 1194.08 2089.38 1136.68 2089.38 1136.68 cv
2067.92 1122.91 li
cp
.968627 .643137 .568627 rgb
f
2097.79 1225.23 mo
2081.17 1198.21 li
2081.17 1198.21 2070.87 1193.35 2063.68 1180.65 cv
2063.68 1180.65 2057.87 1182.93 2051.54 1187.61 cv
2050.45 1188.42 2043.01 1193.86 2043.53 1195.12 cv
2045.44 1199.73 2055.57 1209.63 2066.65 1220.44 cv
2066.65 1220.44 2082.35 1233.11 2093.93 1240 cv
2105.51 1246.89 2097.79 1225.23 2097.79 1225.23 cv
cp
.717647 .341176 .258824 rgb
f
2117.3 1023.71 mo
2106.65 1009.5 2020.67 996.011 2020.67 996.011 cv
1996.7 949.933 li
1943.69 982.625 li
1943.69 982.625 1948.99 1024.81 1952.96 1036.08 cv
1958.27 1051.1 1993.89 1051.86 2015.65 1051.64 cv
2035.67 1051.43 2072.24 1055.52 2072.24 1055.52 cv
2059.87 1164.63 li
2059.87 1164.63 2084.18 1170.17 2091.02 1169.27 cv
2091.79 1169.17 2130.56 1041.38 2117.3 1023.71 cv
cp
.207843 .32549 .537255 rgb
f
1973.91 838.166 mo
1944 839.836 li
1944 839.836 1943.32 840.046 1943.11 840.084 cv
1940.67 840.536 1942.89 927.696 1945.06 960.25 cv
1947.23 992.804 1951.64 1006.48 1951.64 1006.48 cv
1951.64 1006.48 1992.2 999.277 2004.65 994.446 cv
2009.82 992.44 2022.32 976.808 2022.32 976.808 cv
2022.32 976.808 2009.55 959.633 2003.11 931.736 cv
1998.15 910.221 1992.03 872.082 1988.53 864.12 cv
1980.48 845.835 1973.91 838.166 1973.91 838.166 cv
cp
.607843 .756863 .976471 rgb
f
1944.85 813.429 mo
1944 839.836 li
1944 839.836 1963.37 873.197 1973.31 868.547 cv
1981.65 864.647 1974.24 839.27 1974.24 839.27 cv
1974.24 839.27 1972.8 833.452 1970.8 826.768 cv
1969.4 822.097 1968.23 817.037 1968.32 813.324 cv
1968.53 804.299 1944.85 813.429 1944.85 813.429 cv
cp
.968627 .643137 .568627 rgb
f
1968.32 813.324 mo
1968.53 804.299 1944.85 813.429 1944.85 813.429 cv
1944.77 816.009 li
1945.57 817.211 1946.45 818.229 1947.42 819.014 cv
1953.78 824.181 1962.98 826.508 1970.47 825.65 cv
1969.22 821.303 1968.24 816.743 1968.32 813.324 cv
cp
.956863 .454902 .345098 rgb
f
1967.99 753.199 mo
1967.99 753.199 1977.85 768.072 1978.59 780.588 cv
1979.32 793.105 1976.67 801.646 1976.67 801.646 cv
1945.01 763.801 li
1967.99 753.199 li
cp
.094118 .27451 .333333 rgb
f
1981.87 778.027 mo
1982.31 782.41 1980.61 786.173 1978.06 786.434 cv
1975.51 786.693 1973.09 783.351 1972.64 778.968 cv
1972.19 774.585 1973.9 770.822 1976.45 770.562 cv
1978.99 770.302 1981.42 773.645 1981.87 778.027 cv
cp
.956863 .54902 .498039 rgb
f
1934.77 769.864 mo
1934.04 769.709 1934.11 806.144 1944.67 814.717 cv
1955.24 823.292 1973.62 824.044 1978.98 815.408 cv
1984.92 805.856 1979.27 767.465 1963.57 759.312 cv
1947.86 751.158 1934.77 769.864 1934.77 769.864 cv
cp
.968627 .643137 .568627 rgb
f
1932.09 747.272 mo
1924.03 754.34 1920.13 759.504 1914.67 772.071 cv
1907.96 787.522 1921.27 803.532 1932.43 809.894 cv
1943.59 816.256 1944.52 823.948 1944.52 823.948 cv
1944.98 819.207 li
1945.2 817.472 1945.13 816.065 1944.83 814.845 cv
1944.48 813.412 1943.82 812.23 1943.25 810.997 cv
1942.3 808.967 1939.25 802.01 1938.06 800.174 cv
1934.92 795.332 1934.3 794.283 1935.85 789.682 cv
1937.04 786.139 1935.66 778.329 1937.5 772.49 cv
1952.52 769.25 li
1952.52 769.25 1961.92 766.991 1966.67 761.515 cv
1980.3 745.792 1953.35 728.26 1932.09 747.272 cv
cp
.094118 .27451 .333333 rgb
f
1939.42 793.668 mo
1941.27 797.667 1940.88 801.78 1938.56 802.856 cv
1936.24 803.932 1932.85 801.563 1931 797.564 cv
1929.15 793.566 1929.54 789.453 1931.86 788.377 cv
1934.19 787.301 1937.57 789.67 1939.42 793.668 cv
cp
.968627 .643137 .568627 rgb
f
1837.07 693.163 mo
1838.78 700.176 1841.86 711.261 1841.86 711.261 cv
1841.61 714.308 1840.71 726.989 1839.64 742.532 cv
1862.49 733.389 li
1862.49 733.389 1862.21 708.063 1863.23 706.514 cv
1864.1 705.203 1865.54 706.839 1872.55 696.818 cv
1874.57 693.926 1874.95 688.758 1874.95 688.758 cv
1874.95 688.758 1875.36 682.396 1873.93 681.805 cv
1872.51 681.212 1870.87 682.163 1870.35 683.261 cv
1869.83 684.361 1869.97 686.92 1869.45 688.02 cv
1868.93 689.119 1865.63 690.443 1864.24 690.375 cv
1862.84 690.307 1864.41 671.559 1864.41 671.559 cv
1864.41 671.559 1865.19 666.243 1865.58 664.503 cv
1865.92 663.02 1867.27 658.671 1867.27 658.671 cv
1867.27 658.671 1868.85 652.362 1866.89 651.879 cv
1865.74 651.596 1862.79 656.722 1860.78 662.162 cv
1858.6 668.021 1857.37 674.235 1856.75 674.151 cv
1855.29 673.955 1856.07 663.676 1856.07 663.676 cv
1856.07 663.676 1857.52 658.967 1857.48 656.746 cv
1858.86 654.024 1859.77 648.973 1857.35 648.555 cv
1856.9 648.478 1853.72 654.894 1853.72 654.894 cv
1853.72 654.894 1852.47 659.411 1851.74 661.522 cv
1850.45 665.246 1850.25 671.125 1849.58 673.719 cv
1849.02 675.875 1848.52 674.989 1848.29 675.079 cv
1848.11 675.149 1848.42 672.174 1848.78 668.085 cv
1848.96 666.025 1848.72 663.649 1849.3 661.303 cv
1849.83 659.131 1850.14 656.022 1850.28 654.145 cv
1850.67 648.828 1847.32 649.372 1846.16 654.233 cv
1845.72 656.084 1845.26 658.105 1844.8 660.154 cv
1843 668.124 1843.05 675.803 1842.19 675.866 cv
1841.08 675.949 1841.81 661.969 1841.81 661.969 cv
1841.81 661.969 1840.1 654.231 1838.4 661.413 cv
1836.42 669.746 1836.63 676.541 1836.66 676.841 cv
1836.84 678.875 1835.37 686.15 1837.07 693.163 cv
cp
.972549 .643137 .572549 rgb
f
1944 839.836 mo
1944 839.836 1914.35 838.455 1906.7 834.994 cv
1902.06 832.896 1863.96 802.194 1863.96 802.194 cv
1864.39 719.993 li
1837.59 717.955 li
1837.59 717.955 1823.7 808.814 1828.51 818.76 cv
1833.48 829.03 1889.25 871.313 1900.41 889.66 cv
1906.83 900.23 1920.23 1043.99 1922.26 1045.28 cv
1936.69 1052.79 1981.26 1060.29 1980.21 1055.74 cv
1951.2 929.833 1944 839.836 1944 839.836 cv
cp
.235294 .560784 .486275 rgb
f
2385.23 443.617 mo
2288.83 399.278 2147.83 455.252 2121.9 511.634 cv
2108.93 539.824 2116.73 574.333 2139.82 607.335 cv
2034.64 712.941 li
2174.52 645.715 li
2195.19 664.043 2220.57 680.704 2249.49 694.006 cv
2345.9 738.346 2445.07 728.584 2471 672.204 cv
2496.93 615.822 2481.64 487.958 2385.23 443.617 cv
cp
.980392 .878431 .698039 rgb
f
2324.76 604.974 mo
2321.12 619.216 2323.49 630.674 2332.74 632.891 cv
2341.77 635.057 2348.41 626.867 2352.08 611.523 cv
2355.41 597.65 2354.4 586.073 2344.52 583.706 cv
2334.85 581.388 2328.03 591.311 2324.76 604.974 cv
cp
2376.19 615.744 mo
2369.33 644.33 2347.68 654.921 2327.92 650.186 cv
2307.32 645.249 2294.66 625.765 2300.59 600.072 cv
2306.44 575.69 2325.79 560.769 2349.12 566.36 cv
2372.67 572.002 2381.78 592.413 2376.19 615.744 cv
cp
2239.92 617.848 mo
2340.31 508.334 li
2342.21 506.261 2345.08 505.382 2347.82 506.037 cv
2347.82 506.037 li
2353.56 507.413 2355.71 514.454 2351.72 518.801 cv
2251.2 628.201 li
2249.33 630.247 2246.48 631.114 2243.78 630.466 cv
2243.78 630.466 li
2238.11 629.106 2235.98 622.149 2239.92 617.848 cv
cp
2239.78 524.596 mo
2236.35 538.889 2238.72 550.348 2247.97 552.565 cv
2257 554.731 2263.64 546.54 2267.31 531.195 cv
2270.64 517.323 2269.42 505.696 2259.54 503.329 cv
2250.08 501.062 2243.05 510.933 2239.78 524.596 cv
cp
2291.42 535.416 mo
2284.57 564.002 2262.91 574.594 2243.15 569.859 cv
2222.35 564.873 2209.68 545.389 2215.82 519.745 cv
2221.67 495.362 2241.02 480.442 2264.35 486.034 cv
2287.9 491.676 2297.01 512.084 2291.42 535.416 cv
cp
.956863 .454902 .345098 rgb
f
673.328 815.342 mo
673.328 815.342 691.099 811.605 708.164 819.301 cv
725.229 826.997 740.125 844.074 740.125 844.074 cv
717.515 861.052 li
717.515 861.052 718.741 833.54 673.328 815.342 cv
cp
.980392 .878431 .698039 rgb
f
673.266 829.281 mo
669.695 814.288 li
680.022 802.846 li
681.198 801.543 680.37 799.457 678.62 799.316 cv
663.256 798.079 li
655.566 784.721 li
654.69 783.2 652.45 783.344 651.775 784.964 cv
645.851 799.193 li
630.771 802.38 li
629.054 802.743 628.498 804.917 629.831 806.06 cv
641.532 816.091 li
639.903 831.418 li
639.718 833.164 641.614 834.365 643.113 833.45 cv
656.269 825.42 li
670.342 831.706 li
671.945 832.422 673.673 830.989 673.266 829.281 cv
cp
.968627 .8 .498039 rgb
f
1570.2 497.673 mo
1605.66 504.276 1631.12 527.289 1627.06 549.071 cv
1625.03 559.963 1616.01 568.485 1603.06 573.459 cv
1611.47 608.256 li
1585.83 577.649 li
1576.47 578.817 1566.14 578.538 1555.51 576.557 cv
1520.05 569.953 1494.59 546.941 1498.64 525.158 cv
1502.7 503.375 1534.74 491.069 1570.2 497.673 cv
cp
.980392 .878431 .698039 rgb
f
1586.43 545.541 mo
1580.99 556.874 1567.4 561.647 1556.06 556.204 cv
1544.73 550.761 1539.96 537.161 1545.4 525.829 cv
1550.85 514.496 1564.44 509.722 1575.77 515.165 cv
1587.1 520.608 1591.88 534.208 1586.43 545.541 cv
cp
.968627 .8 .498039 rgb
f
1553.39 533.666 mo
1550.48 539.725 1553.03 546.996 1559.09 549.906 cv
1565.15 552.816 1572.42 550.264 1575.33 544.205 cv
1553.39 533.666 li
cp
.937255 .937255 .937255 rgb
f
1975.09 1664.45 mo
831.353 1664.45 li
782.424 1664.45 742.76 1624.79 742.76 1575.86 cv
742.76 1125 li
742.76 1076.07 782.424 1036.4 831.353 1036.4 cv
1975.09 1036.4 li
2024.02 1036.4 2063.68 1076.07 2063.68 1125 cv
2063.68 1575.86 li
2063.68 1624.79 2024.02 1664.45 1975.09 1664.45 cv
cp
.968627 .611765 .552941 rgb
f
781.852 1579.12 mo
781.852 1121.74 li
781.852 1095.46 803.154 1074.16 829.432 1074.16 cv
1977.01 1074.16 li
2003.29 1074.16 2024.59 1095.46 2024.59 1121.74 cv
2024.59 1579.12 li
2024.59 1605.4 2003.29 1626.7 1977.01 1626.7 cv
829.432 1626.7 li
803.154 1626.7 781.852 1605.4 781.852 1579.12 cv
cp
.968627 .8 .498039 rgb
f
1901.33 1330 mo
1901.33 1458.67 1695.57 1562.97 1441.76 1562.97 cv
1187.95 1562.97 982.19 1458.67 982.19 1330 cv
982.19 1201.34 1187.95 1097.03 1441.76 1097.03 cv
1695.57 1097.03 1901.33 1201.34 1901.33 1330 cv
cp
.980392 .878431 .698039 rgb
f
1228.68 1440.17 mo
1241.09 1424.85 1269.37 1402.48 1275.48 1397.72 cv
1280.94 1403.1 1289.16 1418.97 1290.25 1426.14 cv
1282.43 1427.69 1248.53 1437.85 1228.68 1440.17 cv
cp
1275.21 1388.69 mo
1265.8 1390.48 1228.21 1439.13 1228.21 1439.13 cv
1226.88 1442.5 li
1226.88 1442.5 1294.9 1435.19 1297.36 1432.38 cv
1304.01 1424.8 1282.94 1387.22 1275.21 1388.69 cv
cp
.52549 .694118 .94902 rgb
f
1150.98 1424.44 mo
1146.87 1420.48 1157.1 1403.99 1161.77 1400.48 cv
1162.96 1399.83 1210.38 1428.98 1216.99 1438.93 cv
1190.53 1436.16 1154.81 1427.73 1150.98 1424.44 cv
cp
1184.1 1397 mo
1165.59 1385.34 1160.51 1385.43 1155.12 1388.38 cv
1149.73 1391.34 1129.85 1418.88 1138.73 1427.47 cv
1147.62 1436.06 1218.1 1442.19 1218.1 1442.19 cv
1219.69 1438.03 li
1219.69 1438.03 1202.6 1408.65 1184.1 1397 cv
cp
f
1218.67 1455.1 mo
1222.63 1455.1 li
1226.57 1455.1 1229.75 1452.02 1229.75 1448.23 cv
1229.75 1436.96 li
1229.75 1433.16 1226.57 1430.09 1222.63 1430.09 cv
1218.67 1430.09 li
1214.74 1430.09 1211.55 1433.16 1211.55 1436.96 cv
1211.55 1448.23 li
1211.55 1452.02 1214.74 1455.1 1218.67 1455.1 cv
cp
f
1369.02 1442.7 mo
1046.58 1441.77 li
1038 1441.75 1031.42 1449.12 1032.71 1457.32 cv
1037.7 1489.09 li
1053.86 1489.06 li
1063.6 1648.97 li
1064.12 1657.52 1071.45 1664.21 1080.33 1664.21 cv
1337.69 1664.21 li
1348.39 1488.47 li
1363.62 1488.44 li
1369.02 1442.7 li
cp
.717647 .341176 .258824 rgb
f
1343.19 1664.21 mo
1145.65 1664.21 li
1135.07 1446.01 li
1369.77 1446.01 li
1359.93 1649.03 li
1359.52 1657.52 1352.15 1664.21 1343.19 1664.21 cv
cp
.968627 .611765 .552941 rgb
f
1379.47 1488.55 mo
1124.67 1489.2 li
1118.86 1441.86 li
1368.46 1442.78 li
1376.65 1442.81 1383.07 1449.61 1382.34 1457.49 cv
1379.47 1488.55 li
cp
.956863 .54902 .498039 rgb
f
1124.67 1489.2 mo
1367.69 1488.55 li
1132.38 1500.95 li
1124.67 1489.2 li
cp
.717647 .341176 .258824 rgb
f
1227.05 1488.98 mo
1220.29 1488.98 li
1220.29 1442.23 li
1227.05 1442.23 li
1227.05 1488.98 li
cp
.52549 .694118 .94902 rgb
f
1248.35 1664.53 mo
1239.9 1664.53 li
1239.9 1488.77 li
1248.35 1488.77 li
1248.35 1664.53 li
cp
f
1084.32 1664.19 mo
822.869 1664.19 li
822.869 1337.29 li
1084.32 1337.29 li
1084.32 1664.19 li
cp
.968627 .611765 .552941 rgb
f
864.342 1664.19 mo
854.875 1664.19 li
854.875 1337.29 li
864.342 1337.29 li
864.342 1664.19 li
cp
.968627 .8 .498039 rgb
f
892.291 1664.19 mo
882.824 1664.19 li
882.824 1337.29 li
892.291 1337.29 li
892.291 1664.19 li
cp
f
920.239 1664.19 mo
910.772 1664.19 li
910.772 1337.29 li
920.239 1337.29 li
920.239 1664.19 li
cp
f
948.188 1664.19 mo
938.721 1664.19 li
938.721 1337.29 li
948.188 1337.29 li
948.188 1664.19 li
cp
f
976.136 1664.19 mo
966.67 1664.19 li
966.67 1337.29 li
976.136 1337.29 li
976.136 1664.19 li
cp
f
1004.08 1664.19 mo
994.618 1664.19 li
994.618 1337.29 li
1004.08 1337.29 li
1004.08 1664.19 li
cp
f
1032.03 1664.19 mo
1022.57 1664.19 li
1022.57 1337.29 li
1032.03 1337.29 li
1032.03 1664.19 li
cp
f
1059.98 1664.19 mo
1050.52 1664.19 li
1050.52 1337.29 li
1059.98 1337.29 li
1059.98 1664.19 li
cp
f
1084.31 1350.75 mo
822.874 1350.75 li
822.874 1337.27 li
1084.31 1337.27 li
1084.31 1350.75 li
cp
f
945.194 1292.85 mo
959.492 1272.92 993.011 1243.12 1000.26 1236.78 cv
1007.45 1243.09 1018.87 1262.26 1020.75 1271.1 cv
1011.14 1273.58 969.714 1288.58 945.194 1292.85 cv
cp
999.247 1225.56 mo
987.672 1228.44 944.523 1291.59 944.523 1291.59 cv
943.126 1295.88 li
943.126 1295.88 1027.21 1282.05 1030.07 1278.38 cv
1037.78 1268.49 1008.76 1223.19 999.247 1225.56 cv
cp
.313726 .74902 .647059 rgb
f
847.332 1278.69 mo
841.922 1274.06 853.422 1252.82 858.964 1248.13 cv
860.396 1247.24 921.58 1280.2 930.556 1292.12 cv
897.416 1290.52 852.341 1282.51 847.332 1278.69 cv
cp
886.486 1242.23 mo
862.592 1229.02 856.277 1229.48 849.79 1233.54 cv
843.303 1237.59 820.618 1273.25 832.317 1283.32 cv
844.016 1293.39 932.181 1296.1 932.181 1296.1 cv
933.848 1290.81 li
933.848 1290.81 910.381 1255.45 886.486 1242.23 cv
cp
f
933.847 1312.13 mo
938.783 1311.86 li
943.674 1311.58 947.409 1307.53 947.125 1302.81 cv
946.284 1288.79 li
946.001 1284.06 941.806 1280.46 936.915 1280.73 cv
931.979 1281.01 li
927.087 1281.28 923.353 1285.33 923.636 1290.06 cv
924.478 1304.08 li
924.761 1308.8 928.956 1312.41 933.847 1312.13 cv
cp
f
1095.35 1340.87 mo
806.816 1340.87 li
806.816 1302.78 li
1095.35 1302.78 li
1095.35 1340.87 li
cp
.984314 .690196 .231373 rgb
f
2476.48 1679.2 mo
228.192 1679.2 li
224.546 1679.2 221.59 1676.25 221.59 1672.6 cv
221.59 1671.15 li
221.59 1667.5 224.546 1664.55 228.192 1664.55 cv
2476.48 1664.55 li
2480.13 1664.55 2483.08 1667.5 2483.08 1671.15 cv
2483.08 1672.6 li
2483.08 1676.25 2480.13 1679.2 2476.48 1679.2 cv
cp
.588235 .85098 .788235 rgb
f
2259.93 859.639 mo
2252 877.358 2266.76 897.804 2284.18 901.826 cv
2303.43 906.273 2324.13 895.652 2332.51 877.948 cv
2341.58 858.784 2334.39 839.077 2316.18 831.948 cv
2298.46 825.009 2281.94 837.651 2282.24 855.553 cv
2282.45 868.388 2291.8 875.986 2298.16 874.389 cv
2303.11 873.145 2304.78 866.726 2300.05 864.068 cv
2298.15 863.002 2295.71 863.5 2294.16 864.734 cv
2290.25 861.624 2288.48 852.255 2293.99 844.393 cv
2301.04 834.351 2315.33 837.988 2322.51 845.845 cv
2331.65 855.847 2329.08 870.635 2321.55 880.757 cv
2313.64 891.385 2299.07 897.229 2286.04 894.266 cv
2271.28 890.911 2261.93 875.979 2265.14 861.236 cv
2265.9 857.755 2261.35 856.467 2259.93 859.639 cv
cp
.52549 .694118 .94902 rgb
f
718.255 656.043 mo
712.198 669.583 723.475 685.207 736.785 688.281 cv
751.499 691.679 767.315 683.563 773.721 670.034 cv
780.653 655.389 775.158 640.33 761.242 634.883 cv
747.696 629.581 735.073 639.241 735.302 652.921 cv
735.465 662.729 742.613 668.535 747.47 667.315 cv
751.256 666.364 752.532 661.459 748.913 659.427 cv
747.463 658.613 745.599 658.995 744.411 659.937 cv
741.425 657.56 740.069 650.4 744.285 644.392 cv
749.669 636.719 760.592 639.499 766.079 645.502 cv
773.063 653.145 771.098 664.446 765.341 672.181 cv
759.296 680.302 748.167 684.768 738.21 682.504 cv
726.932 679.939 719.782 668.53 722.235 657.264 cv
722.814 654.604 719.339 653.62 718.255 656.043 cv
cp
.588235 .85098 .788235 rgb
f
1904.01 1151.44 mo
1888.98 1140.59 1869 1141.55 1856.04 1154.49 cv
1846.66 1150.23 1835.51 1149.98 1826.13 1153.88 cv
1807.62 1161.58 1793.44 1188.05 1805.43 1204.98 cv
1806.81 1220.97 1811.44 1234.07 1826.88 1236.27 cv
1833.83 1254.25 1861.65 1262.85 1880.15 1249.24 cv
1893.92 1255.65 1910.34 1249.42 1921.79 1239.31 cv
1924.5 1236.92 1927.04 1232.94 1928.01 1232.5 cv
1928.02 1232.49 1965.93 1230.49 1967.22 1194.19 cv
1968.58 1156.19 1932.93 1125.23 1904.01 1151.44 cv
cp
.07451 .215686 .356863 rgb
f
1704.25 1581.99 mo
1702.99 1598.34 1704.16 1613.34 1704.38 1615.13 cv
1704.49 1615.99 1706.72 1619.62 1706.86 1620.51 cv
1700.36 1639.12 1685.86 1647.31 1672.9 1652.45 cv
1677.74 1643.49 1685.83 1633.88 1685.7 1631.57 cv
1685.5 1627.88 1685.28 1611.24 1681.35 1589.32 cv
1690.68 1590.69 1695.39 1585.79 1704.25 1581.99 cv
cp
.956863 .54902 .498039 rgb
f
1779.73 1354.57 mo
1831.24 1408.65 li
1831.24 1408.65 1798.53 1433.48 1786.27 1442.7 cv
1774 1451.91 1714.3 1483.1 1713.02 1485.43 cv
1712.76 1485.89 1714.88 1492.11 1714.83 1499.5 cv
1714.67 1519.48 1712.42 1558.08 1708.97 1590.98 cv
1701.93 1596.67 1688.32 1596.47 1680.04 1597.47 cv
1665.55 1554.61 1668.47 1476.32 1669.77 1467.04 cv
1671.88 1451.93 1779.73 1354.57 1779.73 1354.57 cv
cp
.207843 .32549 .537255 rgb
f
1934.46 1477.77 mo
1932.01 1478.92 1911.42 1498.71 1902.24 1510 cv
1897.17 1503.12 1895.03 1496.39 1888.68 1490.65 cv
1897.69 1484 1916.71 1466.99 1919.46 1462.27 cv
1925.99 1451.07 1929.24 1450.28 1929.24 1450.28 cv
1929.24 1450.28 1962.87 1478.51 1964.07 1483.31 cv
1965.26 1488.11 1944.29 1473.14 1934.46 1477.77 cv
cp
.956863 .54902 .498039 rgb
f
1918.06 1464.77 mo
1915.07 1463.65 1923.38 1450.72 1925.23 1447.72 cv
1927.31 1444.35 1929.73 1444.02 1930.28 1444.07 cv
1931.78 1444.24 1969.15 1475.61 1974.44 1483.8 cv
1974.79 1484.35 1975.25 1485.85 1975.29 1486.17 cv
1976.49 1495.41 1940.67 1483.53 1936.8 1478.22 cv
1933.36 1473.5 1931.51 1469.82 1918.06 1464.77 cv
cp
.094118 .27451 .333333 rgb
f
1765.46 1366.42 mo
1765.46 1366.42 1819.01 1352.14 1819.02 1352.13 cv
1818.8 1352.2 1819.02 1354.33 1819.04 1354.49 cv
1821.09 1374.45 1847.43 1370.55 1853.19 1405.52 cv
1857.26 1430.23 1842.85 1509.5 1842.85 1509.5 cv
1842.85 1509.5 1868.81 1495.29 1896.09 1480.08 cv
1898.58 1478.69 1913.82 1500.82 1913.82 1500.82 cv
1872.57 1553.19 1817.33 1568.26 1811.04 1564.78 cv
1789.55 1552.89 1775.68 1396.23 1775.73 1396.25 cv
1772.55 1386.57 1765.46 1366.42 1765.46 1366.42 cv
cp
.27451 .431373 .713726 rgb
f
1864.47 1249.01 mo
1864.47 1249.01 1928.41 1244.63 1942.53 1244.51 cv
1956.64 1244.39 2007.04 1235.16 2008.98 1234.74 cv
2010.93 1234.31 2021.76 1210.05 2024.16 1212.31 cv
2026.56 1214.58 2018 1224.42 2021.13 1226.47 cv
2024.26 1228.51 2055.02 1220.36 2054.83 1222.81 cv
2054.48 1227.4 2036.2 1228.55 2036.42 1230.73 cv
2036.65 1232.91 2055.39 1227.7 2057.02 1231.2 cv
2058.66 1234.7 2038.82 1234.41 2038.19 1236.1 cv
2037.56 1237.79 2056.83 1238.95 2055.21 1242.5 cv
2054.33 1244.43 2038.09 1241.04 2038.41 1243.53 cv
2038.72 1246.01 2050.76 1250.6 2049.54 1252.71 cv
2048.31 1254.83 2039.93 1247.48 2033.25 1248.01 cv
2026.56 1248.54 2021.43 1245.35 2011.07 1249.41 cv
2000.7 1253.48 1965.82 1272.22 1942.97 1273.24 cv
1920.13 1274.27 1869.66 1276.68 1869.66 1276.68 cv
1864.47 1249.01 li
cp
.956863 .54902 .498039 rgb
f
1793.52 1232.98 mo
1793.52 1232.98 1777.59 1170.9 1773.28 1157.46 cv
1768.96 1144.01 1761.89 1093.27 1761.68 1091.29 cv
1761.48 1089.31 1781.11 1071.4 1778.2 1069.84 cv
1775.3 1068.28 1768.65 1079.49 1765.72 1077.16 cv
1762.79 1074.84 1760.88 1043.07 1758.61 1044.02 cv
1754.36 1045.79 1759.01 1063.51 1756.87 1063.99 cv
1754.73 1064.46 1753.79 1045.03 1749.95 1044.57 cv
1746.12 1044.12 1752.62 1062.86 1751.21 1063.99 cv
1749.81 1065.12 1742.65 1047.19 1739.79 1049.85 cv
1738.24 1051.29 1746.55 1065.64 1744.1 1066.12 cv
1741.64 1066.6 1733.51 1056.61 1731.88 1058.44 cv
1730.25 1060.26 1739.87 1065.91 1741.46 1072.43 cv
1743.06 1078.94 1747.7 1082.81 1747.1 1093.93 cv
1746.5 1105.05 1739.65 1144.05 1745.85 1166.06 cv
1752.05 1188.07 1765.62 1236.74 1765.62 1236.74 cv
1793.52 1232.98 li
cp
f
1765.51 1301.39 mo
1766.18 1290.33 1768.84 1260.62 1769.82 1257.05 cv
1768.24 1245.25 1759.05 1226.8 1757.29 1221.7 cv
1757.29 1221.7 1775.55 1205.34 1787.15 1207.12 cv
1787.15 1207.12 1797.23 1225.15 1805.7 1231.44 cv
1805.84 1231.42 1808.74 1233.34 1810.11 1233.52 cv
1818.98 1234.69 1850.06 1238.04 1855.58 1240.65 cv
1845.33 1290.16 li
1843.26 1292.79 1833.21 1349.97 1829.13 1354.22 cv
1825.04 1358.48 1772.22 1373.04 1764.74 1366.33 cv
1764.44 1366.07 1764.17 1323.74 1765.51 1301.39 cv
cp
1 1 1 rgb
f
1839.69 1239.22 mo
1841.18 1238.72 1844.55 1238.4 1849.31 1238.98 cv
1863.38 1240.7 1887.1 1243.42 1887.1 1243.42 cv
1887.1 1243.42 1888.67 1274.29 1883 1280.86 cv
1883 1280.86 1845.26 1281.44 1845.87 1284.76 cv
1839.69 1239.22 li
cp
f
1832.87 1217.94 mo
1832.87 1217.94 1827.24 1234.83 1826.93 1241.75 cv
1826.61 1248.68 1820.45 1270.29 1806.58 1268.43 cv
1792.72 1266.56 1807.87 1240.04 1810.11 1233.52 cv
1812.35 1227 1815.56 1206.3 1815.56 1206.3 cv
1832.87 1217.94 li
cp
.956863 .54902 .498039 rgb
f
1813.82 1216.67 mo
1814.83 1211.02 1815.56 1206.3 1815.56 1206.3 cv
1832.87 1217.94 li
1832.87 1217.94 1831.72 1221.39 1830.43 1225.82 cv
1822.06 1226.39 1816.61 1222.42 1813.82 1216.67 cv
cp
.956863 .454902 .345098 rgb
f
1846.35 1171.04 mo
1846.35 1171.04 1852.93 1176.19 1854.29 1185.55 cv
1855.64 1194.91 1849.42 1217.7 1830.15 1220.72 cv
1810.88 1223.73 1805.44 1204.24 1811.25 1190.4 cv
1817.07 1176.57 1827.9 1159.53 1846.35 1171.04 cv
cp
.956863 .54902 .498039 rgb
f
1809.72 1184.51 mo
1809.54 1188.42 1811.17 1191.65 1813.35 1191.73 cv
1815.53 1191.81 1817.44 1188.71 1817.62 1184.8 cv
1817.8 1180.89 1816.17 1177.66 1813.99 1177.58 cv
1811.81 1177.5 1809.9 1180.6 1809.72 1184.51 cv
cp
f
1704.4 1615.63 mo
1706.31 1612.94 1715.36 1625.58 1717.58 1628.25 cv
1720.07 1631.25 1719.66 1633.76 1719.45 1634.29 cv
1718.87 1635.71 1679.87 1665.58 1669.97 1668.49 cv
1669.03 1668.77 1667.33 1668.33 1666.88 1667.99 cv
1662.62 1664.8 1678.31 1636 1686.13 1631.58 cv
1691.18 1628.72 1695.81 1627.73 1704.4 1615.63 cv
cp
.094118 .27451 .333333 rgb
f
1844.34 1169.57 mo
1844.34 1169.57 1844.08 1195.92 1851.43 1201.71 cv
1858.79 1207.5 1853.83 1218.52 1853.83 1218.52 cv
1853.83 1218.52 1864.83 1192.87 1859.69 1183.42 cv
1854.55 1173.97 1844.34 1169.57 1844.34 1169.57 cv
cp
.07451 .215686 .356863 rgb
f
1846.17 1204.77 mo
1843.53 1207.84 1842.98 1211.81 1844.95 1213.65 cv
1846.92 1215.49 1850.65 1214.5 1853.3 1211.43 cv
1855.94 1208.36 1856.49 1204.38 1854.52 1202.54 cv
1852.55 1200.7 1848.82 1201.7 1846.17 1204.77 cv
cp
.956863 .54902 .498039 rgb
f
772.832 1052.65 mo
771.245 1059.17 768.384 1069.47 768.384 1069.47 cv
768.611 1072.3 769.447 1084.09 770.442 1098.53 cv
749.209 1090.04 li
749.209 1090.04 749.463 1066.5 748.516 1065.06 cv
747.715 1063.84 746.369 1065.36 739.86 1056.05 cv
737.982 1053.36 737.63 1048.55 737.63 1048.55 cv
737.63 1048.55 737.243 1042.64 738.571 1042.09 cv
739.898 1041.54 741.421 1042.42 741.902 1043.45 cv
742.382 1044.47 742.259 1046.85 742.739 1047.87 cv
743.22 1048.89 746.292 1050.12 747.585 1050.06 cv
748.878 1049.99 747.423 1032.57 747.423 1032.57 cv
747.423 1032.57 746.701 1027.63 746.335 1026.01 cv
746.022 1024.63 744.768 1020.59 744.768 1020.59 cv
744.768 1020.59 743.295 1014.73 745.116 1014.28 cv
746.189 1014.01 748.925 1018.78 750.799 1023.84 cv
752.819 1029.28 753.963 1035.06 754.541 1034.98 cv
755.896 1034.8 755.178 1025.24 755.178 1025.24 cv
755.178 1025.24 753.827 1020.87 753.861 1018.8 cv
752.585 1016.27 751.739 1011.58 753.985 1011.19 cv
754.399 1011.12 757.36 1017.08 757.36 1017.08 cv
757.36 1017.08 758.524 1021.28 759.202 1023.24 cv
760.399 1026.7 760.579 1032.17 761.204 1034.58 cv
761.723 1036.58 762.192 1035.76 762.406 1035.84 cv
762.572 1035.91 762.282 1033.14 761.951 1029.34 cv
761.784 1027.43 762.004 1025.22 761.468 1023.04 cv
760.973 1021.02 760.688 1018.13 760.56 1016.38 cv
760.196 1011.44 763.307 1011.95 764.383 1016.47 cv
764.792 1018.19 765.223 1020.06 765.653 1021.97 cv
767.324 1029.38 767.276 1036.51 768.075 1036.57 cv
769.112 1036.65 768.43 1023.66 768.43 1023.66 cv
768.43 1023.66 770.021 1016.46 771.602 1023.14 cv
773.435 1030.88 773.244 1037.2 773.219 1037.48 cv
773.051 1039.37 774.419 1046.13 772.832 1052.65 cv
cp
f
547.464 1035.48 mo
549.05 1042 551.912 1052.3 551.912 1052.3 cv
551.685 1055.13 550.849 1066.92 549.854 1081.36 cv
571.087 1072.86 li
571.087 1072.86 570.833 1049.33 571.78 1047.89 cv
572.581 1046.67 573.927 1048.19 580.436 1038.87 cv
582.314 1036.19 582.666 1031.38 582.666 1031.38 cv
582.666 1031.38 583.053 1025.47 581.726 1024.92 cv
580.397 1024.37 578.875 1025.25 578.395 1026.27 cv
577.913 1027.3 578.037 1029.67 577.557 1030.7 cv
577.075 1031.72 574.004 1032.95 572.711 1032.89 cv
571.417 1032.82 572.873 1015.4 572.873 1015.4 cv
572.873 1015.4 573.595 1010.46 573.961 1008.84 cv
574.273 1007.46 575.528 1003.42 575.528 1003.42 cv
575.528 1003.42 577.001 997.555 575.18 997.106 cv
574.106 996.842 571.371 1001.61 569.497 1006.66 cv
567.477 1012.11 566.332 1017.88 565.755 1017.81 cv
564.399 1017.62 565.118 1008.07 565.118 1008.07 cv
565.118 1008.07 566.469 1003.69 566.435 1001.63 cv
567.71 999.099 568.557 994.405 566.311 994.016 cv
565.896 993.945 562.936 999.908 562.936 999.908 cv
562.936 999.908 561.771 1004.11 561.094 1006.07 cv
559.897 1009.53 559.717 1014.99 559.092 1017.4 cv
558.573 1019.41 558.104 1018.59 557.89 1018.67 cv
557.724 1018.73 558.014 1015.97 558.345 1012.17 cv
558.512 1010.25 558.292 1008.05 558.827 1005.86 cv
559.323 1003.85 559.607 1000.96 559.736 999.211 cv
560.1 994.269 556.989 994.776 555.913 999.293 cv
555.503 1001.01 555.072 1002.89 554.643 1004.8 cv
552.972 1012.2 553.019 1019.34 552.221 1019.4 cv
551.184 1019.48 551.866 1006.48 551.866 1006.48 cv
551.866 1006.48 550.275 999.292 548.694 1005.97 cv
546.86 1013.71 547.052 1020.03 547.077 1020.31 cv
547.244 1022.2 545.877 1028.96 547.464 1035.48 cv
cp
f
679.961 1111.98 mo
679.961 1111.98 669.154 1100.59 660.462 1114.45 cv
660.462 1114.45 653.766 1110.69 649.067 1117.38 cv
649.067 1117.38 636.969 1113.74 634.032 1131.83 cv
634.032 1131.83 627.806 1130.66 626.984 1138.06 cv
626.162 1145.46 629.92 1150.39 629.92 1150.39 cv
629.92 1150.39 626.423 1153.01 628.012 1159.82 cv
629.362 1165.6 634.149 1166.48 634.149 1166.48 cv
634.149 1166.48 635.441 1176.23 639.67 1179.17 cv
643.899 1182.11 649.655 1180.7 649.655 1180.7 cv
649.655 1180.7 651.182 1185.98 656.115 1185.51 cv
661.049 1185.04 667.158 1180.35 672.678 1182.46 cv
678.199 1184.57 692.53 1182.34 692.53 1182.34 cv
692.53 1182.34 708.623 1175.18 703.807 1158.73 cv
703.807 1158.73 712.265 1151.1 704.864 1141.93 cv
704.864 1141.93 710.268 1127.6 699.578 1119.15 cv
688.889 1110.69 679.961 1111.98 679.961 1111.98 cv
cp
.027451 .203922 .352941 rgb
f
605.543 1589.32 mo
605.543 1589.32 593.771 1603.91 590.837 1605.71 cv
587.903 1607.5 592.146 1628.71 600.134 1630.1 cv
604.638 1630.89 607.14 1625.93 607.14 1625.93 cv
605.848 1619.82 li
622.668 1602.49 li
605.543 1589.32 li
cp
.956863 .54902 .498039 rgb
f
666.194 1592.92 mo
666.194 1592.92 656.382 1608.9 653.702 1611.06 cv
651.022 1613.21 657.939 1633.71 666.04 1634.07 cv
670.606 1634.27 672.455 1629.03 672.455 1629.03 cv
670.394 1623.14 li
684.862 1603.8 li
666.194 1592.92 li
cp
f
654.292 1610.43 mo
654.292 1610.43 659.929 1617.62 663.004 1620.48 cv
666.973 1624.17 672.058 1627.78 672.058 1627.78 cv
672.058 1627.78 677.815 1638.23 679.39 1641.88 cv
682.893 1650 686.828 1659.04 686.261 1663.59 cv
686.079 1665.05 682.8 1666.59 680.069 1665.75 cv
668.697 1662.26 639.62 1635.66 635.948 1628.52 cv
631.713 1620.28 654.292 1610.43 654.292 1610.43 cv
cp
.027451 .203922 .352941 rgb
f
737.291 1367.02 mo
736.234 1364.06 735.221 1361.33 734.243 1358.76 cv
722.147 1361.4 708.485 1364.3 694.432 1367.3 cv
692.72 1418.81 li
692.728 1414.83 703.286 1500.97 703.286 1500.97 cv
703.286 1500.97 675.976 1561.43 657.299 1596.67 cv
664.965 1606.24 668.562 1609.32 679.663 1615.84 cv
708.656 1581.08 746.6 1517.48 748.176 1506.91 cv
749.083 1500.82 749.898 1402.49 737.291 1367.02 cv
cp
.717647 .341176 .258824 rgb
f
629.333 1381.92 mo
633.029 1422.06 641.245 1498.79 640.559 1504.96 cv
638.496 1512.66 601.944 1583.67 595.366 1594 cv
600.591 1601.87 608.682 1610.37 617.375 1612.72 cv
619.09 1613.19 679.409 1527.35 682.698 1520.54 cv
686.416 1512.84 692.61 1470.82 692.72 1418.81 cv
694.432 1367.3 li
671.017 1372.29 649.486 1377.18 629.333 1381.92 cv
cp
.956863 .454902 .345098 rgb
f
706.228 1198.95 mo
678.665 1202.73 li
678.665 1202.73 656.569 1203.27 653.836 1203.27 cv
651.103 1203.27 633.791 1303.82 628.779 1341.66 cv
623.768 1379.5 627.65 1386.2 627.65 1386.2 cv
627.65 1386.2 662.597 1394.06 688.452 1391.77 cv
715.335 1389.38 745.584 1374.87 745.584 1374.87 cv
745.584 1374.87 722.604 1302.15 718.048 1279.45 cv
713.492 1256.75 706.228 1198.95 706.228 1198.95 cv
cp
.588235 .85098 .788235 rgb
f
773.061 1077.15 mo
773.061 1077.15 774.83 1152.12 772.004 1157.85 cv
767.893 1166.19 721.61 1225.34 721.61 1225.34 cv
721.61 1225.34 743.719 1317.86 753.014 1349.81 cv
753.95 1353.03 758.094 1373.81 758.094 1375.84 cv
758.094 1380.33 738.535 1386.03 736.213 1385.7 cv
734.135 1385.39 717.07 1297.38 706.175 1254.31 cv
702.483 1239.72 696.15 1225.93 687.487 1213.62 cv
679.911 1202.86 li
738.056 1144.58 li
738.056 1144.58 745.221 1079.71 745.221 1074.33 cv
745.221 1072.92 770.241 1071.87 773.061 1077.15 cv
cp
.07451 .215686 .356863 rgb
f
654.836 1203.14 mo
582.329 1129.26 li
582.329 1129.26 572.227 1059.4 571.509 1056.77 cv
570.804 1054.18 552.797 1052.79 545.54 1052.08 cv
543.212 1051.85 546.759 1126.49 550.229 1139 cv
554.329 1153.78 609.134 1221.12 609.134 1221.12 cv
609.134 1221.12 618.958 1257.59 616.592 1284.35 cv
612.662 1328.78 602.07 1389.91 603.969 1391.83 cv
615.751 1399.25 660.977 1400.04 663.839 1395.43 cv
695.449 1344.53 654.836 1203.14 654.836 1203.14 cv
cp
f
678.135 1189.34 mo
680.092 1203.85 li
680.092 1203.85 684.474 1224.76 678.836 1228.79 cv
673.198 1232.82 654.86 1203.25 654.86 1203.25 cv
656.797 1166.48 li
678.135 1189.34 li
cp
.956863 .54902 .498039 rgb
f
656.172 1178.4 mo
660.829 1190.94 671.92 1198.65 679.794 1201.64 cv
678.135 1189.34 li
656.797 1166.48 li
656.172 1178.4 li
cp
.956863 .454902 .345098 rgb
f
626.792 1141.48 mo
626.792 1147.09 629.978 1151.63 633.907 1151.63 cv
637.836 1151.63 641.021 1147.09 641.021 1141.48 cv
641.021 1135.88 637.836 1131.34 633.907 1131.34 cv
629.978 1131.34 626.792 1135.88 626.792 1141.48 cv
cp
.027451 .203922 .352941 rgb
f
648.136 1119.69 mo
648.136 1122.9 652.012 1125.51 656.792 1125.51 cv
661.572 1125.51 665.448 1122.9 665.448 1119.69 cv
665.448 1116.47 661.572 1113.86 656.792 1113.86 cv
652.012 1113.86 648.136 1116.47 648.136 1119.69 cv
cp
f
669.826 1127.84 mo
681.268 1123.9 693.463 1131.5 695.209 1143.3 cv
695.968 1148.42 696.654 1154.87 696.783 1161.92 cv
697.091 1178.87 688.315 1195.37 680.618 1195.37 cv
672.92 1195.37 651.646 1184.39 650.877 1160.33 cv
650.401 1145.47 657.819 1131.97 669.826 1127.84 cv
cp
.956863 .54902 .498039 rgb
f
656.549 1162.23 mo
656.549 1165.97 654.07 1169 651.012 1169 cv
647.954 1169 645.475 1165.97 645.475 1162.23 cv
645.475 1158.49 647.954 1155.46 651.012 1155.46 cv
654.07 1155.46 656.549 1158.49 656.549 1162.23 cv
cp
f
703.174 1119.41 mo
711.125 1125.71 713.911 1135.28 709.397 1140.78 cv
704.884 1146.29 694.779 1145.65 686.828 1139.35 cv
678.877 1133.05 676.091 1123.48 680.604 1117.97 cv
685.118 1112.47 695.223 1113.11 703.174 1119.41 cv
cp
.027451 .203922 .352941 rgb
f
682.386 1124.57 mo
682.386 1127.31 679.081 1129.53 675.004 1129.53 cv
670.927 1129.53 667.622 1127.31 667.622 1124.57 cv
667.622 1121.83 670.927 1119.62 675.004 1119.62 cv
679.081 1119.62 682.386 1121.83 682.386 1124.57 cv
cp
f
704.353 1145.64 mo
704.353 1149.16 701.531 1152.01 698.051 1152.01 cv
694.57 1152.01 691.749 1149.16 691.749 1145.64 cv
691.749 1142.12 694.57 1139.26 698.051 1139.26 cv
701.531 1139.26 704.353 1142.12 704.353 1145.64 cv
cp
f
591.502 1605.16 mo
591.502 1605.16 596.174 1613.01 598.859 1616.24 cv
602.324 1620.41 606.905 1624.64 606.905 1624.64 cv
606.905 1624.64 611.281 1635.74 612.376 1639.56 cv
614.813 1648.06 617.567 1658.32 616.423 1662.75 cv
616.057 1664.18 612.925 1666.9 610.34 1665.21 cv
600.37 1658.72 573.727 1628.31 570.998 1620.76 cv
567.85 1612.05 591.502 1605.16 591.502 1605.16 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\750\762\740\753\750\751 \702\750\752\762\756\760\756\742\750\767) ()
%%Title: (EAN W31 2363.eps)
%%CreationDate: 7/30/2020 12:59 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9RfpGi)`^9;=d",I>@@.jb/fG-hD_0lb(+L2,Q\u4`1s0FrQ<!<P`&ne(kJAXNoGDF>?jm5VdQ*n#efkZn4AgM'g)0,m_
%JS!bX729&YYHfdHOoP46g=i6?Tm+L"))Wfu$qJ,/TV@;fp0iQCW[c@m$F5V@SJ,V?f?g#CCtgN+SPItAS*`tl(&t*f>pieZmV&b-
%]j<XI\mffa=G&fb[.p.Hl?^Th2mf_\$8SE>IjU^>44"?>^h_@N5GoIIPgd6M=<EK]i+j,61&I3^)AG2/:uPbQ'j+Lf$WU"("7O2]
%b6tJ*>um7sZ!C,_HoQWuHRK6AMf>AGN/Bc/g43Hs#.eb)l,'[-@4-no'nJk_;,S[P:h<4[=kZNeM,^'?U^m7B/:tY@%ni*4\DV=D
%Jb2fakbI'(Ou2C=aF_JW*/h.2:HBG<:]VUaMX@G1!++bu:)#'\5R3=i*r'pfruTJ5-PU2f`fpFb/k@[aJI[QN_d2Z)/-n!UW^DG1
%(IDY5^eXHR/g=^/Fs5ADFcindo"Ic3LS-+*XFAeh^m20pD&2?O+b:qE%\bV6*2#h!aOj#$=[3-;oFZ>6`s\$<%/WQskp*q2UPpc4
%_)Y![BN^sZgBif]LpDV!`Y)u,oV*POO^<(#>V,]3gd]uWLg\$UK-@e>]^hA;L]bI)M<(A7,6#J[J.;SL#XP[NXr[$TI3aP$J99e(
%^X:"aO!T"'r^<U@?]I[@9_tuHccY//@@MtK+9626P=1*@qC&-MQpU!]%7itfoA3j<'r05pCL+ho5*C9?Zp]mQ:2ak=#+24ujT+(X
%-1nLoX*:Q9EXe`#ZKlSZiQk][dNQ;3<>GZSlTb4R[;tWK!/pk!K"\q9CX0o2"?K=:S%q$D$331"5a1.kp0G/d5[L`e[)I=(dAgtf
%Sb`F'U^3Ll\;h\m^>N9i^DkgJg4b;$P!hD<=@EdMM08?o#_ik359TJ9\.VZH\dc?/rkm*4L0TMF<mo`gZ\Z'%3TDc3$CnuK3`T/h
%_B71:HdSn[mE;BS"d3o%9r1NE0hZg582)#0<S*$/Yu-&LD*d6jG"(kO1GnD\jAEu%o3(f_H]=!X91RmZ>*GJaoOcsm,3o]B&uU>@
%#3Q$L/BDf<g)r\%Yon*?Q'(no'uBWbrM^+`XU/r'*32:3EQqX*HtR;k@PgFlfXuaOEgBK`BH*eA94S;-&_qoXe=VR+Mfa^^'RNLQ
%A\;a9!#4[@ok#9pQ@"XafK:`!4NZPCP0Hn[C`nKopbN,Cd002J2_3J8i=Br>L?Q#r`(7f;W<jT(-4]sos%_fAjZ-Q6_9IV@fk[FR
%Ab1u_H(u[lTY%B!@b5DucV(FI_CPQR\\&G8a$&o)o=tb'7q1^)OeHWd"RU/8jRBmAh@O5`#!;0"i,94]71(9_0_SngTOtQY;\fTp
%C[3U!(]';en8B3EFj_@j"@PGk!?QK?U[,a=ain^@@-ZZ'_*S5&Q$Bfn5I04A@jRU/oX`_mq>6L2X]][MC[IFO[:JT,;es"dNISI&
%($H'JQ?eBK2J,857@A]kYS1HjJ6ONXF2mtUX3j1!*%`+/U]ik*SI!F>KrG'\>E5T/\lB#Aok(2pcO%P4Zm-_&r[[^$#;i)P3E]MQ
%=/00SND>,-Mm_,FV`e170U-d<Z]p4_XI0P%QUFhY2EbL5dRYGlDm6C<b)oO]$@t_T<h%1G@Km3]8DgT,DOr^7U"d7UeWi)<qEH>c
%`t'a%TnXkDI4>f-6jXQq+k^DC$1J[O62qB&#/L9(l<2=$b+'c/**j[)E4L:1ol7*?2_&[H<Af[6/cqQfhY(e=DtBWR[J%=/@f,lo
%;rg,EY9S[",apKK-/4c*S)kj/AVr3g'T-nfi!=aXAWaq%rGpdTEKgfDMV_)'XVPZ>*`oXX5lC2(/,U).pJ^AnX0.CYBPVHPTAk)l
%W67XD6??52B6887QEd2q&c0f/+pmo`JkZ:u.>.i,O$4&DZ4/p$LA229V*027"JuBh/44@<Xq"?!]o.`cp>FX>JmUGaR8ZWeaE>?J
%@^N>HIndHgG'X+(e=1D5!&SO3KjIi9TO8--U[>KJ%TBGIoho"4&dZdjSSiV+2t=*>0+?XoVO(k]24nYG#D4obUHh&NHI%2Cl:.W(
%r;a""2(0<CTF\OifBE,h9&6KLCb3)!+l`]j?OkHX2;]h[kl?E%B8;(1dQh$%H9+N,U@+g4huL4ukZM=39g;/6XfD*=:.NVY3PYuQ
%[[aIEhJ?Z1f.Q\<)(Oq#BgI)?V8cp4R39FBa.q='S/&Zi&)E)\g4<mK=b;Sl*NaqEd8Oo\XU!X'@OfFVB8%<ti,n&6HDahgig'Ck
%ZU1R(k.1a"HdbjW&3-cQ3g%;lBSXUi,7N5N0UQbJp&$YA@9`NiI$b4uEb;L\e.659jhM$VS[a44]PEVVr5^^Tik`kLOUimX6c3a)
%D%0Ao#Ik1.B<3b+ZdCNi,a3;B0#)*8,k@D<JF/"rG(l9^g`3&p9]bCCKk2_m:T9kg9]aE6%2+s&WG-Ig9/>[\Wsb<=3@Hs?F1Gj7
%\'3s"\_Js,>NTt`5*lqs="`YASH[-s!o,`Uk+!SLkP6*.3\gSg?I)WZP5010Fk(^7,lRTENo*.&e*3/2q@A3@lg?1D["H[3Y<oqs
%Of/&2.D[R1J-2q*knmS[p+^a^*B-%k[uqE2?CIQnGCkG\X'V6g=a-_aF)Sb9Ek.rh5LG2hf(ChNgHoY#*CF7_R]f7ghu$XU3,]])
%1V`3MC4d;WXCTVm,8$JQ];ub?>Z#Qscj9Ep,lAlDnF_jKhFDmuLugmfE?K7OFg%sUPCL$bVVZEHf)%'U6dRiBEO4?_C1"hrfO[>^
%%`fmRJ(&-(QNNu[28aO'Fb[oKBD%uD/=`X2Z]$WEVU=aBS5m)-Ibuo$QE"Pu\7$P5*lj:RmTo#m.ieTR4b<DE[7/8a^:)3>D\g->
%>Gurale%VV5][p'eXS%8D2.oTKF].>ECOmYk*lmo'--dMqiU?R8cAl(5PI?=CE))E6gm'EbX2-F]$VfO9e;jq59g*>q:;`KHG<o[
%B$&C5]j9$JOp`/p3*3KUacG>jMWIc#bGT_7U;MGXVgKKSB("u9%WIg,LOB(W05\X%ZQ<oJqHj`@,JX+s9Pi(l46pacAFuC2\.:RR
%>k>QiPuTU/Gg:5nR5n[!_X,B*&[Ho>If-X!dqlLnGeg3Z7luK?aS.H"9B.n-`p5_"?fpEDT;D)S^WD#?_=Omk?6#GURoOF3hm,6<
%4bL4#I[>X>n5HRKnATWBOu;^>mbe-&"amr>5npu)Dtb'<"SdmaS,]\Km@RTX/W/Rkn,j"]H8`\o?qt')R.5M0hneJ8dZ"!OC8BcQ
%X;8ei4$i!ZenR+4)@e[Pi`3,6eE]-.:;2DAA3]HeQW`9kiF$`olhJ0^11P6d0KQ>I<n-Xi9IF"Z+^Ii1KAded*A0aW1]2?`leNjK
%E]G.KEp4j*lN>G?7@\^+l_(,`3'M']#7USa)b7ZtpR./2Du8[Q(\=dM:>WB`aR_S8<-8sHlQ%,>h&fEA4+'`"Ct.drSj9=%0UhdX
%qqJ/mHGu$>Yi',I9&41GRY-C"Md!fM+),kJd1CD#8@<RQI8@mU/!UP@\>05.L7iU(lcX.OiC&"ufW=R]?k'`FPDmAK*=bfMksW1A
%`Eo>6al=$Z!bMP+'j;)V"Zq&/a\N3]dkMhrT:,U;YhgZR#BE\?=eVP>Iql_<TE<M:=)0mVP:5Kc1CL=!1`U5Rf'ceY2`R0VTIc^'
%R>V3Mpmn!EEIuE/PV8=uU<HPaeraLf]<44UfkUU17JXr1%4j-(79P^b;4MT?;-_G!5E"MDZs8]*;8.b9EMOKDs"$e44$AM]"I\AX
%.*H7#r\(q/nl_2;bB9[EJFYjq7<)iMkMFa<Ve8ks+L<I.oqF[/ieSEBXrZEm=d7oiH5=I+15hn"s5krY,!JrcLmMJQ)RJMd@NV3)
%kR"F=-Pl0hNQ#>EDdC=5=7E?;08ud#'BD9@kC:$/[#"_)8]>UF:AXd(LL^AP;h&Co=MK%%bgNYB`NDd*]B4VH9=qX>CJ2:J&9]YY
%L6cD\[LCdMfrXEdUe@bsZt`sSC<L"%)6>Elg=!!L(TV0*&UL%brq=!e_uU2Dl'C[&D#c3=kj)t/0@e,E$'o>5<21%n&K-r!huQ$!
%oS'&Qph[1@MTGcQT,,QfJ*Q]C?2O:WK6JC"9pXO[_u0"cN(#h@`FtS0ZI/UF_j_m3FgZ=nRrEHdJ.6[&W-tF^Bf[h.R:\K@bB%B0
%IP/l(4UYhiB3tLg:fo+=i]ho*b%t2?@`'2G@R^']EP\8$>f4<b\Dd9IYD(1Q"8U)r0CoqtIBO.rrZ<DsZ["add>,^Xjro1dkkl5=
%j.Bt-be*FqH1u"?h^SSejT!*Zd;7\70H2UM"0(Thmispe&+/%$%7.Xfh*P9G#K=F28$sU(1D"53@Aa2IS7m=fL.^of%j11sNSkr'
%2]k50*,>Z^ISjq3Jp9f+Jc=I%7]gNLWsuc.`76NBO8M_-07F9V\VM1:?f^VF9u#eZI`q]Ijo4^MYoMHsS\`-po-VZ(rSQ`9n++(9
%bPg>?==s8sQi"P@rSQKD4lQr*a+PI&P06#G3@tEZH!tL!kI]O@?1.N;Po[X3HJSKZSKW-N;XFNNTSQ*;3ag6XLRA;N%RL8m>jcb,
%\Ch"'flWrVms<24G#[FA%SsAPJY$#oi4tTOg1<f@S>%kJ53K@mhE@terSP[F3Q>`8+WD\lb6lq.6M>>jZE0->.qGugO?&28^Hn9(
%q8(^//X+R5/6loTH8>t,U)jNrAQ6nC&&YL7h/HROL!@'Wr,?"i=[/CpOZO&QR<fm&3NP0m?tX'r'F-U3Ii45PpS73KNEEnYjG_8=
%$%q='))UtAI5WB;'9.t4E>DI=_&.U`HI9%n0\=:!:.m6,]\*4#D[t!pe6/.ds(jt@m\inV^<=_3FPp6sX8P@.p3i9=iFQ/:=Vb>0
%KpQB0AQa7\(1*;\Q`6P`b:L$i@T?i-rFK,VRH"]t=a9a7iFR20rVJ_?1H,K5S<`RpF9Uo%3W.Z6,ei"P[GUDZM;MVpR\aS!m)(0?
%*"XgmLJ9`gW*su(`-gJsmtXVb[kD)JJ$<hirSk:LBqfKeZ^UDm]m],bkLcHP]5q5K`&&R]nN38ZjP3MT]jL\H#/'SfZ^//`#u'7B
%"K!jAFa<i3o(8b]M<TNPS>'7g/"&Vg+0#'RDrj&?F_^_QrnN/0$i`9"K+CD:*.4`M!6n-CSD`n!*uMiQcZrTQ\[PmW\_PTEW"!UW
%jNo/*Ra.N;*<1pW^u+,=pIkeRNAJ=h)e<rUZHUZ2+[]abAo5,4<cr%N%LiDNjmcHh#s(;1P,$(E/@\h+'4=66a>f"]B,D+>6c)D[
%35^"1^K/BW*k)!kl57sTNj1i0c,/'eP]'C=E.Z!5N\S#2m\8tDZAu2kA'>m)Q?A-t*FhD#)#p-8XfFI.9^01PBB?R&ltZ2ldr=l*
%2XNGg*eWEaJl;,GI[Xne:J,?p)J?ju+-'Yd[KFh_.449:J=D/Ad8Oo\Xf"+9:6M)$pmF^EK4<0D*(8:5F'YPFr2@+e;XQf[]MWku
%KHnk8bc1&Kp6Q!n3RYd4+#L>eSS)A+kAfS<b&+KD7%Xb;lnEGK'qMMl,S2eFl,16sBh;(:UW#GKBmEb-a-#?=XJFMaJ%fr>d-iI^
%jEp8\Y7=a?Qpj;2;<YZ*WQRY)5/h*o`O/j7C;9J*f<S46>uFeeHTgl[#b;-Ei6)EVF8i\9',6`CHd0T3_CuOHroi26s%m:+4"W!f
%[-[u$&$RTm+eJMDQ$AP/AM*o)[J3nEV[K*>3Kpsa2RgomQJ(%KS!t49QJ(%UTs2c'jt<-E&0cVuD!i6+*p2BgKa#]`*+60JkEbAf
%17_XHF3AZCREg6PFADa?l'ru?(*oFYYhpRsF,%UgV43O1mb0KjQ+#hnIsh!<m^mmM_Eln^4HO"F8WUb*kSN;9E!q/u`:A<"jgc!3
%GcnsnOo%>^lea]F@lD<i3WsKq/((%W>q=LC0%sjE[%btH'lm7Xm<!j.SQ)R?\66qE_iJ4ZN#k!tB2R/,Kn?dq>3(n[hpLcfa/b^<
%_l&3nC)q?AA,L],[`/5PhTr3s(W#FgVm?Jtfg@i2`]MC:j;a\-@XW/NDDoW2b+3'/j#uNA40%n_U?3k_)hFRq<Xt]Hl1E\@Xf+<M
%CD;/a_#>Q8*.OT(@Jl;[0CF;\K"'h!*$r9.^DrPpD6PfPOh:d;UA\X[HB.\$#EZ:/LH*j&SB:B7_P`&QHt^OQmdert>R3%c)(TZ/
%7WWVfbq1/m\W.*4oS).UM%6$q0%e3,q.IlelAh$`pKco@Ms)hf$VAeD0$Bo$)&3%hTP,2VrTaj5=ZX4B6.$L`)aELLG57[!S6,30
%HP!P8G5oQIVtL^]SJ_\i/+IWkN7=@GI;O^"mf\E,SkU'<6'uR15!%V6":'D,^?#/Rhs.k749'b,CE))E6[/1UKn])YFebGVN"8k.
%V/r/:K/W2Dd><K_3lh'S_n8'$kB:V.rSeVLi2(@^J!p2[qSkt*+>5r;33PWomkOBk_iN]dMM7:NDg7#_p\Lob\,=h3G<TGYlM3>r
%pe\cs@%t3@j:)QQF)Xgj6J-8.`E<.7\f.qLa-KskOi0HA,++A#G?P6u]CX,hBa^Kbe]mg0B=^"YB&\/+8)NuqO5Kt,gamS]iQoRN
%3!`mSrfE)SG;po/pJmVnK$N'LdJL/SeG]V8AE!u:c*nCp"kYC%Fq<6a<W[:js4`PprY?G!$c&7B2[QRLY>d/c4De_qK=;.'9oBcN
%T`.]H'kQd0XLD+tH\V3SH/ijF.lcMU6<#<mQ\/!MK(,&So&C#JN3,[Of.:5ZU`&u'65GekN9e*6ftgS1Ah@W]pGZ]hR6DTW;B1)G
%3T&DVS[+G4.EnL0Ik@[gq]P:Lmt*(u+1%%gb,3i]d`^(Z,jpaahP0]>1;iq"o"'4eo(P7Uq3tFS`K).D7FNgZS8=Jq+%%5h+uVTV
%Ra!CB6I$DT=R@iV@PmIrrqPAbMqh7p]kk@eJ"Mi6ZbV0e-*s8V@dRL"l8m=]>"*AAcIsRHj0Y:.H8i"WlUHSS5RTDeRe:Om]2u(/
%\@q9N"g%q/&u3YG%B+]Z5/cBS(&G"%LH*,h1(<u2s)I[VTmqRf._QX8GB8!OGR)ag\7tqYP$b/OhKoe=%BS8.8BrYT#uTBGd:h)'
%!>+9P_nZ%D3T5HH)R`nd?U7h*35?skaf;0+jFZ>M5UiWeX<^p(DPGdWs+o1L0Doqq=0L!E'+!PXESWi7Y0nD2o)a%8js\&DaQ)2,
%YJ[PfNFVH#Zgr`"9!/D%io*5>+7KN<-+G*PE%SpKpfEas#>`3#@(D8Be"n1feb*f]VeBTKcI_Hs^OZ<SDOV?WJP(a:c!O$!d2RT5
%03ar7-1<]Om**'.PZf!Y,1h^[iOD0N'NmnV$\=KF?:)H#.S>SO_h`oei$a2W0YH]A?L2]ai&]M%"i_;3ANAFIGmst,Ir@<'+EK(A
%b6[[E,fhO-"QnWQ>V""?P":nUW<,_*O`;Y.1)NSja(?4&f;AYinuSY(0XAW;+q?.SN$R?cUSt8Epjh_Jr4!4;-\Vq'<"uPI0J3`d
%44mPD(flehAfSK?`!T&[.>S___?e:4l%D7fGX5k>`C;p)=0<s88CtUfUE$0e$De^I,EG\si)q*S7+sDl%e(I;,>Ougi*N$r+<i"%
%&'K!P7$c$t^Fahpn^s_[$I"6g%V7q:?p'Goj2kd:NSPPt`UUTkKP+;M8uN!t/)hsdb*^E3\iE6QEol:-?tI+-T8QcN1fQFi-a=:O
%jUN0RUUVb+0.80C!?"TJbp'&G!$@cqrS@H@Oru.cE@X=@OElR.QcL*U;3`_)!7>:EJrtX0YptZ)Q:@9!G&*c0OsgtUjogNL,YC!u
%7!WE57Z`aIJ-@>4&I1cP6A*IE$#1(j(.LP5$"K@9]@ifVAJn<:U8,LC18;q\4Ka;Q.3BF(=Vf*bk(?2::]<l[#/eSs%=l4R9H1N"
%Qqufi1*:24aPu^%,"Zl?L>`EM(i(1Q'o>8m8r1V5LK#*j'Oas`e7OZp(l3qq&8>c'i2l$-JqS0_<:go.V'_*+J4Op;FQ*FG9K5N1
%od<T:,8m=Pk#mFDE""**o)sFS)8`l^S3.$G"8N1R,8.GA`:=JZnDf*bIW$>YZHD]:ZZq>9U7D=3Lrl<uOGG7m,STmX`,$sZfIZK/
%r_(^f1<ImFJ6Y`,)T)qF;5*smnq@_@r<8&pNss(DA,,esk`+Eq(G4*KG%m[$-\`6;LEjYBIubJpd<iXK(jod""u?V!K!#uG"^tCG
%MqOgNY>X6^W5R,X3q1([ai%3e@s2t\T$<t/!i*gnHpJ+#3`KiW#JSsT23Gi"`)rgbMp@HE%AUL#m.Ri[4p/XSh["j)@fQ2M-6;bt
%VB(b#P+0!hNIk<RU&I9'_E$3Dd0pe^$+&9"kfn!3lU%tgp:T4"^lTRdNg*>4_,ad.E;SZf"TT'J(&q@Qr(FAD<)QhFrj3rXp?Z('
%G+O1sm7qn@4U?T.`mjsP_.l$+58Tnj"f$q3R[sFU&&86<F*dSFd)5sqm,2)hJS`eO:+m1\>hps^oVq"uP*PZ*s%T3^kCiW;lF-EQ
%N7S8O-p#cb-et7Qo=o/W69h!0"b`EW+\+YQ]h[0qb^oTeXWe\KBNXOd*t!bB\YT43kY5sk_tO,^lhOkegaW8n"8Q7'9AZWe`U@<V
%+_t&0n4.S;?g(\l'>1BWPG>8%;Ym&-@DFmW@AY7CdjRpT24Z;8Jt*4u!j&-e5t)NdF)U>jHt4,0jp!Pk;1js)F&N[?qJIB\`ge.U
%jsOc0TA`^&]+A^foQ']-D,dBNYEQr<mkct#"YlA9M1V,JCR4*-X8m/t([Gbu?*+8"f"\F+ocGj,;mM9-Nb$E>9pu8Ekb)f/[/,L5
%lI@uppLVpI#<"PBfCdPq3f#<@jJ03UB$5Yp^"46Bn7(L@&L9d\)>Kg5JbC4UoO88),(#:TAV6tho`5pB8lU'sc3RBX\0+&/5<V/h
%b->39]8jb#Mc9F<bXRB^UWo[h-/5,aWuO>99@VQhdH%,fHqPuTL1=$nda1%_EO4)-RGDjBX`!cr?LF;\;Tf>LD1^;;2!]#5o$aaT
%YA:^%Zqa\@)h7,4UIN]`lfsCYX4Ds:h<]8iQ+#@]I1C%7bduBU>nBGg>02,)e^`)OHJ?t))SQ":V5p;47?B,cLt^;2GYf#HCQnhs
%07?MM&Q!7e$`;K-\V;3C!bpa!:AGIB`OTg?SdK8"T;fUnJWrQb(I&+8m;&'rCL=tYi8GSVM-'HQBYS:#f:"q2:2Y`V2HFGEH:MoR
%cs:qqc`Sd$1:gZ*W#OQ"6WR@m!q;iq$Ro#XjiV8]8l)MOY,p:p8BOcN-?Vn2%!;.h#R$R*la#'V"r`2?T'2a15[oT*\1Vlb[U+00
%*Pr;!]l"42G"NQJ)0F$dD*42nC])Ni5ieMn*D?Cb*LafA'orsICfg1'#"*_k5$";9giEs)S"AADQ6p;jj!kT'"I`FOR_#O-r0[O7
%fg)rWf5Q:td/#Z;b=Y&IBK(=HBKF\EfDAg`Jn5%(i9lB_Gr2tNl1IEG$f*UN;6(r53Wri2,VjlSeFduG0`l.*T>s&6VfkUi::G)k
%#4[a^dgo*e&D?ZHL4\d7kWe_9"Q>\Q\R)<?@b>[_B3AJP5P0-"D)A/mU0'?XTRU'Oq%ND(Jr\eQS*`Am6n/:'5XI_M_51o->buX;
%ZM/)+2:LnFX7HpeJ<Y[l'=bH0h_],4QQDkA:pSBO4sW/pCsd'co[8Dt>hc/gGP&Uc+d<!9U6b1<-i3CVJ"i9g?GiXQO1l2.^q%8X
%9Mp,*/>K74+c`9.&,h?U6tF4qEZf7>i*q?AmpOHmRE:H0%.b'5I]-nbBN&)fTuL[@MR"rpcGgIKZZ3-B-Pl#?Aoh=P(.(eA(ELsJ
%]dWAlJrRWq5VWW,OCZpuj"t95JOIs,We/E-&e24>=*Gq46X"C=;lK(bZOgs3o;LTk`Y\=Y%]@nCoeC#"#OBlu<WNc69n@)4@;:".
%P<9*I3@K-!%(+mefQ"EMGjlGaqL*/`4tAHT66DVLFL,epCt<kMTdNRel3%J!p@nbfJ8+9`%@u_G:rmphgEWE-AADfDCi"M(<+g25
%XcFJeX>,\8G,cI"8ftP8j%t%<NHc,f2e9_Bn]&?Kb$t\RZP=I&(M%fT^tS2G?j@biRg<2C#PnHDcjrOOCPt>&nTG1/rULY!YXP21
%MK+S5C=5:r1g<Ci)FWaEp(N6[c^BV2le!2^bO:/i-0taXd0;7/RKcg\22e(5$O*gU_a%TVYDg83R'KHlURP\an>k1I2MNrd[rZO#
%F/>(?Hl,WdE'a1"l9MgZgFO<:603:\fO/+Z@D)9L!r@IEZ17-9Me[l$]@Ekr[:"(q>&09F9[M<^UD>Cg&n%$K6!BuJk@YmR2mdb1
%o+$5DD&aG-f?kb/,:UYeFKdp95EXg\*ctkTD8F)bWB/j]YXHMUk'oXnal=ST"_X%m:LIBQ'UO-pq'oREWM<??*C<LX]WLmLBgs4\
%hL5g0MEu,($N\bk5G/9u;#LrGA=%tA//&"q1a(-Nefcto#hh05VG\,YNu(E>gU8sfN;1M8.K#!,H9oCjQn,]S^KcURGi89#U5&W9
%'9`&$E?(n5a&""Fqd_D03i$WHE8tp+bliW\K$tD9;:7NqV)bMc2)11B=;C@%a!?ai]D*hJetGQJC=G2]',BhM]+t>OV!l3*B(n)D
%&9JJ=(Wa3.(4"tti9aFhC`AJ)C/a+$KIfK0:c7!WoqhWi0G=+U1"pa/9(6m>["/"6W3DJ<56N4O!=_Mf$M\*<VO_1s?MsJQZ(aM&
%B'3*,#,&+r*sn/q^_0aMf3/[*@0(h3!:a1?@iGL#_8f25'k%/5NOMV>5(Nm*mi(#U&d:;c6T5GI*ja?NC\3GoSd&/1S"I['"9oN3
%"1"e<E,F@1<`A2#Jmgr\G<TNpBII<\1_-1jG.a[QgRX=V(s',u#LLAR2upCjA<J"!S)%JO5/mLuTN8[@2Es'J#hS;U#!0k%iYJ>S
%[Z]YrY6!<Da/V<%`7!ZGhpL4@g@+"sTJe80lg%^6:VE@MgL\&XU#t^CG&Jn?jKp$*$,fD)X023_I[t/cT$oF@*:>hC[N[gcHl]T%
%&t406egss8r:(oaQ=BT8A[%=#'9QU30B-9@dCEr0kf]1;D@U8gVU31g/S("U)9l?udfkHn%8rf^hp]i=$_NZm1Yf\F2TE_%ef;c!
%op0VVOg5=LBI:u)Qe)"&Mm>ib_0&4cfuo;ZXP3Ct7_gA<+H>i9jI1^/ANOMrBbJ\0dqM6E!*r4X4kqo's(qYj^N7*#&_:j.Nqi:R
%5V1>IBN.?aVY_e'hXYR&%5$48PqET2Os^sS4P2_-p-Y7'NKZoF=-QWTmR12f"i8)1S]#<<ZGin7_GA"maNdhe'BpKXgFu>IS8l%8
%:e0>DjmYAGfb*j]gt:F5-A''nb.G2>V-B<`:8HH-o%cSjnbO(9mK-V?L7.:V,]p*d4iu/G-%sh7fP>oq)Q$)jRA7X;d8jhd/74t*
%5=G,5i75lSg>PAZOe#\@0bWaS)ude,=teu#.$\3Z6Een^o3!_DI_:tVogo$.</stjnZ$uWN_neJ4],`GDipUhNGCQd/@lLEW]Z\g
%[JlI_QdY;(5^?XpjoV,$?,V_'lG5=BX4L]P(<(?5]IH%!GG8mN\j(ALp#;%N2_J$K]skOrFl]NVMaab&=,&qBc;a&X/@2J#D.E5b
%A3:lt@eI/-NBl7ud#2LVlYhT00+pIKnh?%;^3Y`+S&LAAJ+k5$/N4_o%9_QUPkf")QtH<)&3C`7QoOA9!TiAO?,#Hh;TOZ4CVXKS
%AChdQdURD[gRpO]B%A0roT&)q\YY2Y!d,]807!9P\G>4C\LQEj\:Wn+N4[\H"-iMT9b4Pk?FlHJRn0Qm=Nr2s/-3F6AJk-gF->2,
%G1KT0s'6SAOmp@()23UV1e_=(/W_(R^!r'b[<%m$VXX,Xj9luf]B.H`_)I=&D_JZ?-2&k$ej.j!45nWRknE%<@)XhV=\S0X"&Q7t
%_%IfE945HF(C6iFUePsO'$l6d$,*Yu89`Kt0q(nNq@huXj0th]D61aQ_WCU=@H)PcR]dL=dHkW<,b!n@'S34\GjBoUV7Yg5bC4@p
%,q?PPdeZo^Ni(<YmDD-:DTtR0QRi`3_RQ&\^ZPo1;_I%M0MV,+oj>[kS"irYh6(&kTp+ej_BhW-g(J@DF3>X]eYdD%NhUD=I@jK'
%\Mt9s'DCng]W";iNA3q4#lZkm$p)b,<%oQUI!6m*5O.t!;fdne2U_?1J(&RN>97Y8>L81dPH&i#l7)1Jb87?S(O*t&Za6(Hg[-R^
%cgHMm/"mXpO<\fXI6M+sbj>O>;Q-nA_*n-"egr=:\Z4`I)TU73Vq=Qj?9V7(p:*pk`Cl1p@S%s:i?20fG-?[R9ARh[?0j96fc=9"
%9EXV-cOpJj2'(g?ha(bi1Zcukq0p$;E(.:jl5m<5$EEA%$`@Jk$)\q]M]3[(,,R/8TB1Hlo\g@bYT?tdJ50JH:rlE0]17'8rE1W]
%@+0A1]9_,4kWY=OdG2oB@b]Q.VW\$ANC,.`5;=[NX*e)D-'e'@QtFCb,Td4)BdL74;_GI1Kl2G24Z-BD]rh$A+Gs(KW0pu,hoL>M
%gtdcme6ADc\9%$K9]:^K?W8t:dGrtd';i$;oKL'3,VQ?n`A;FXG/T)NXs_B>NMdATE03aUqqP2'#T2Ks%]Ufj`pWOh!!-gZT#]E1
%'AVl(RG>q$GCbk=f:_+^X8]e<M'mMB\ZJCYDA_O_7*^c7q8Dgn@3DtA'Rf$p_5=NkV""2DaBGZo_uu30pHqB7Q$m.@Lg1\'jm:sJ
%"^?5_N:Q<&eKj<^I>Y?9nOs(hp-@'Z>t-K#p=V$9I"0MO#LeWTU7e:kJ&]i%`^rts;p&[]F1f+X\drD/@p=m%(#91lA201Ui1BC@
%8Hd^4$]XZ.Or2CX6`AJm5]dp7E-.&[@/5/%*ao,%bK5o)O[UBN0Mmud"u2r6j0Fb3H#*kPd>$,30ug2GMk2aUq:R,6%[e7^.-VGc
%]*+8p+Z1]&Y)X.#=UC]2Ll`i,*DEeLa(EE/]heIiQl0D(J8*#j5s$7'L4^.-#cU9BZ:j[*rZji?VEPhL!i?iHkh[T$qii[SdH#%m
%(S,^Dduq(pio*-\&3)J]CFCjrP&"Lt+h`%JY!dp='\OL9NPK1jkW5TH0[5-,]473<a:]C3@t/S\nR5dFGAPhoDh\U4PFE08mL=l:
%!$a4m'3$;@=CQG]7]<7hfVAd)agb*fD-OrV6:7]3,(R$?%)+[B)A;*83r1^B,Wr>f[PO;%XR\\U=Pk",U+@/>.SEjZ177Z7hK"9a
%Zl-P*=,nH^4Dp/SO(eOX\=&5YC^m7%=?Ca3ZA;i/(:!MWf61'<h>Ck1b[fQ/jOML`hmWbiD)$bs;A`3)lu4B"QoEBb#/%8!QFsIP
%,W*OrB`hg2hu/>pQ5mW^UnW6Ron[,bUF>q0q>etmjq/gc"']=[EP2;ufVaQhld:W&mP:6sVAi*VB%oCn\"8JUCTW'2ET%k6B68n#
%IJtgE(6<#uA7J&6N=jl0RYoMG.'Bua6k1"d0;A$Td7*&n^%jEtJ>d_fR#W4pT48:HXmL/2G0i7ugK%"8O^d7k++f-p,5?FunTeG,
%6B6M0JYU?XjeI9p.%b^(gIClX6L*W9S-J"9[rVLo[e+"."Ol#0V4jP+E\nBCM4UOVYLh*?j&OeCQQ']T#^nX7+NrW"/74W8>[:_S
%2H^W0Y5UC#$3f-%m<^-#dcR3AYa;9kI/A#?F+3Q]!k>RrGh%9_h_t1O6PdF+8Mu[2e3Nk_WF<5o2U0O&llfd<bfY::b)i=&Donqp
%,p24gl[)UdLO,%FXCL6E9FjU6"5?`(RXQ4]PY1r)bO_<o34P6sOL6GrL-#rA`lC5dq]<at(e`;?rJ=n,'BMme!Ee_gK(G7j<#%tc
%M_7;l7dOi%^%RS;af22Y9i!7lm(I@RC.%6D^s:Nrp:VXd1In_AC]puQD4Fd`JDTZso_^OiPtLgDr>S+l2qJqXegk:!b]0=6bbW:;
%'AQk&Gn[AF\3p8/KBMF3Hp%[bNPXXWmDKNdJ$qI=h@N_!SmjQpf0-c$-l=Y3;PVO1:H:jqh[SlqQkW;_rSO4#$D:/]9&'cFqtI;$
%\,He]3>+Ni?%E]rl5guD/=JXK]`N+qgK`gfXV*f/-L?&*S;r2&-9';Km8lA4_J/Z_9Irm/UqmoD:@bs7(*__\NM*DP`ejARE4M<`
%NTMn%>F6R5B2T6P*gUja(te-D;?te%l7'(;Okd/Cd!T2[m@u[@@t(3Zq7.h.S.o7)'EgQX<K1iG5rGg<5c9"_H8q0$ml:@(mGm@+
%+WXMaCu],DC)kDZ<s_H\2g`tM0+kiF"X9Yhf@n#Qje\5A1N$2+5m.:l2q(<6hh35&P&BL<<W2.c8_UFMGECIbbj"f'Ln:5s29tpB
%Xc7uYVaBaOa56p.002])VGt"7YbC]_5Y8#J2^K*JIP\k&_a5X^\k1S1U@t(RphBiqd-/Gm[Vhp/1:YT$>G-okdeRbmG^($"kcM0"
%M(p8O7dse)QT39_X:49YYNhN<GeX.,j>5849U,,T/.a2<b`c@4N(!,u`GF?h(.DBVbfX)uXK/oVGIC;NUA7Icohc12?iH'EdLN4h
%B_Gp40k<BqA`3FX-M#.lohb[q]+&eEfn?TkiA1'GY&9<Hb3cl"JC>6WjDDZ1%rWT*H;UNcWW_"mX"C@]fSjfRIe>:SnsZRsllKBP
%Uq,G$".+q(4q5Hq%AjP#;nJ7e6>*ciE(ad",A4h)h>jLUS=>ui64o;UWDn+h%rrIW0^@I`.]uFPBKi,pZ+Apl(iJZaLkO(!l\&tq
%A+NH]aR7&cn`CmW-ZKd4a@G+D$](\o2g.tXO\fdePP1iBKD90YC4?dQ8pu16mhj%@7(RW*N="3ApDs"#4Do*bb^%?X[%C2++&ZAp
%5dhLI"E?Mh_T/_)Eh_Q=']`(@(l'6UfGkAi_a,9EXICVbpH-+>[:^3ESRc1+Xu.,`e$UY#p!m=4fs@7P%/g^YVq5gKPV(dVoUq[)
%`&>:_:$BOAhad;6Fn^^5m&(*KAuq_m,o[_:P5@Hc5*1pp:F[E6K\/#B`p-q]Z'?+1AOa7;[2)L!UU#2C;2(?="42u]++g.mcnLgW
%"e&Zk6.cBe>5i9O(>7AViAOQ7hIP1bN1n:,)r79VE4^.9\GICb35X4's$fKJ"s:oC[IboD-V;diJ5X<Rs*02#;F"@F4chtbWP^GW
%XPuE<q/3Opkj^6/ZH]t-Hs0.,)X>npNX)Z1$V(/t<Z,(NC6Hi.Wb>>a_;5DS^]%1'2,RD8lA<BTZ)2,>g,l9I]t$IEW+//H,(LVa
%U!rf16fRlcB:Hn[gj(N69!W#H.MTQul#ZOO$]Z@E/a]F0HSK6:,pq&DII3RSWb6`FS];*pXMMhpH3F[^A"'d2e]ZgH,#%_K(uHm?
%gm_M!jLLW08``3ip_V;tIDn)s^ZkF="B<[i:]9[aaP,8^SjeERb+!9:e`t&O-^DcEjAKbF!US%<?A\0V4(5(P<ceIG_mkV@"@hLC
%-Q[t+LQS,mco64gKN^UU,4bn%-2I;Xk,CcQDsT7Dm1^VhVQf+Q@QI_;KF+<fJ_Q6`a^nqOYFM4E#.nkS_Sl:1C0&Y=mA\WK.SHRe
%O;*/D!/%l]4kW+dIW5ZGGOTRUG4;G\d+!A"i,0n7#U0g_-1M;pl6J*k'KJ_fc`0&biSB^+bg`M.97l@u=G'9l;C?gW@9kHk=o3Hl
%dA7jbH`^bL980iUL3`cF8[H&"<iMV[*Zq>(:(raQJ+2BUH8J]:Q"`S,8Lp'.@mt[N"]1?!f%WGQL]3$%F3X/eEqoP`)pS%.\b?S'
%Ca[X?UB>rrepo'tV:<]1Reh#'E#.0D6<F)\PjqH0GsBYP<-,[=/=;3D.<,+Ulc5gpP$Wu&r9H854chL)9X9.o"7.p^cN/uaAlHKh
%\>"U)56E,@2r>_t:S/,e1bkl2m>[UbHEX0cKO,'b+\9[kWB1,pGSMp1_.5_&qO3Bhd\ZPQilLF[iI5O1mQ<r(>(]4:amOK/h4ONL
%[oXrq[@'V&XVKg'4XH?,Xm#TC1\f1'K=)Z]UL'9Yh]M3DWC7mJ#[<2^d-4K&Q[3r:)CT=t?uQ%i/l90+biT@2j!c;*R+a^uMApK.
%]\`3Mh;dp@lF@tk*hC;qg8Y-C3h(0Rae-Hk-3#rCG[HYi+@4AK_T%>0ZId.O;<=J"`TIdTcqA.5OcJmB-#n>)pm09NSlUS>UD^n+
%!,fF(!_`*g/VOOElV>'%?PTlM_o'uFpG%beD!:]B*Bf8CMe-`$Gs`@[FX0d`@)B$uK0(CZO=]Iff85BpDN%`(JJ%5&YCY`2-Hfjk
%P->%\I_`)0GkHOK/JZN">+q-TcQ'&69%"ZZ?6kDJXd7Tr[Ys\dT@B'Kj`GN>dNfqqd/@2VI?bRJ!l5VQRN)kH7Z!GEPOgG_gSmRo
%9"$\)+Um$0,Z;nN$$at403/JL"K\h=Crcr#]3I!r)EnQr/Yb2eq+=?QV=6L7A1<bAfM&1HOS;kA[`EY1]eD5qdb^IsAl#Ljbd!.u
%9QKGRk(^TT@p%/*oE&t/?m*kjhDUE-KcBsle8FaEi:a_S64E!ANBX$7J3d4IE>QiE+Q\a>kD/pG&FG+d5(8EP2%<0XgpsnP;RI`T
%AkUmOZBndp2:`/gp%cR-ilGD;lo7i"(+W\(Q(u8bUt.;ABPd/=0M5M`rN=RBPg)]_.5XaMHs;n$VI3CaJ'\S3Sta8L5%Q,Dpdi4j
%ZIiB,;U,dJ]ZP.5Ki?<%=.sVM"p<tNk*RY@*U"eUWMVRm%p^&UoO*38F:^=e3nsGNaB@NM\FkesI1K%<kX`<H)3SAQffk2Dpa!7e
%Ya.=d%.YadTWV@KM'Kc*ZqjurXsT'\XV,n1iL8N1RN!dCaSf`[jE="-jH"=,r"S?`o5XRD1=Hj]inFJcC.@mGE-67:hAZno_N1$<
%\XCaLM9!a`LNS/Q4gNlc%89:#"H$mZ!6ufdC,32GOD,.GFUG_3eLO3P1+H0cE-oVOh1=4%[9:pYe]N"R(41ib$,kK+iP+27^%$"V
%h\+.JTLiD&k`0SeO>8Xn+;q[?*+6="NTL2thXCQ^d7<a?jKodpO!/i<e+J$J4DJ]@?2rL17(At-,5"XU?GMp*S)#WDmgFJSc+5WS
%`-q3'MtkXDNc8Gcc!n(t2Y;[uZUkZ\I.p1o`"s]6p87eD$g=48@3ZF,L&nZ<CFsiXL@OMtTDa?3D52*&cR(`(c"[tV4n>!8qhLa>
%Yl2I]*5fe_YP3FQM@7+,?gq]-MH_aj7baP!=$EpM$et:+hL$'Zm*aV!X'=+[f"5%eNo!2sG?dA5HILElI\95H9c#S&8,Dm)(IcND
%Fn"P_ES(201dT`)LC=T@GA+aRJUa(N<so/JAN!gTAM.*i*OMOY9pa8'rEM6@fQ+gHK)qEkP,iBX5XjL?O>kQE='_U"Ic8+'>,qgY
%:JW+ti.lkk_<GQ`]MC@(N6Z7a#8HO@Wm1*R5t8oFCY&"02o-$s['+p4Ej9JgVS#=DB1`LfjB=3A)>[,6*2f\R)9nTPfEp_RHm2.)
%ZQ1!1S)Ha+P&CFkLQ@s$L(jn>X;<6)$YO)H?G^=Z0%\XhN42<KHN+tm:X%I(,b/BMO,[c9rNkjc]q(aEo@_poc1C`"c$J^NPg<[S
%(bhPoFI.SjK44Oh[VI+rLD-LueB3EZk=/4DRV(_1*/jChDUZpmq2Fp24%hMj?k7c;,<kL9[J[fjp8PoWi6<Uj:`<]nN#'XR_$FCX
%a3\Z_EIlMHgFR$oN:on_NutXu\]id'a!S0c@u=1Y$)4&=,9YFL,dDMGjb0aUZWSKU+JqfI?DD<FhP><;L7]G.oXSZR-.Y0FSuQFe
%)>&Vm%gGd>E6JrCf>J^YMBCP#-\m"BAb\[2.""WFPgE3:m%a:[a$[FRrU1)M"%*/c*!-a>PV:Z+>HcLi0Bi0-=Pn?"AaAhC?#f'b
%/W%B3MVhR^:SVBFhuHY;5<ST/K-$YVJ+f9oN-RLS/:He.E?_NckGu9cTrAoP-Xj`c/:#u!LCU%"Lh-l=o(L[^5PM"1e!MXs5>Ab1
%]`PLjCj%I.L)^C(P=(N_B`j;YEj-Z3ZuCq,O8'jVFRo-mg[.c0eEg'!fmUKAa!\=A%b5Mj>AN]IEods1L(Bofh<f!t]e1:26pbOK
%Y%jb-*r]'_DL5BHZN'UL?Z*@A-/j#cDQLA(hP1h@E#(7OZbM7pK5'+GUj\hHiF93S5P%bJYu6@8[<)+Y76-/moE2\!odU$!OfQM]
%+'`VuOIsX]@ep@[L<7aYYCuZ?k8=HKh\ANRZUfO7Q#jYC(Z#lHHmbq)?d!EMgVode2*BLs7^q<r-:4h>*3@[cH+;Qh`U:jXdE-=e
%:U3qS&\JBki$,t"];`<sI`%eEpbS"ZfmE>MKa*%+@Z7?'g>jX#7YS6A@Uf\*MO,E/s,ufG<]+%$1FoGq6n]J>1]*YhCcd`<k2/48
%WFTh/"+#;9PD.Q64kXRD*;B4U68_)*SeSnh"9,7>?0)]5re*qGhM7Jb/,%u+^XcVimDum@8n63)k6Z7NIgDg3KpQA/Kq#J3g1\+1
%g'6he<fko3B@;UlU&>6nh)Kk8p6sA6?3qd5cCWuiqI6sBR0ZOR4L_N`&#V_e+Ei*U&\TU[YK)g\*eCE6)m$\8q%J+_h;l.mZ[!+/
%OBuD(:h_HNG&,$4&iC[&%-7pg[ZR5i?Gd!V._X>,.X`X8a$kAcn1`p!Sn(rNE'j7G1T=<0?gSU.qJ3]dFR8_iFk^rOb]FQ)hWq,)
%n4QMsj'aTsgL5-nY+1B3rJ'_"Z<r\4p[%"oH;;?AcJ_p3^hi\<a1%WqnFP0P$`N7_po<6VfiF-_q,gp-.u_-;V`piLXILBKg_ho:
%laa(q=HY0V7+l_`h\[p:X3qN+,'J"42pPN`UONkarla^!YlV=H]@_)+PR_'Vm_lL5_V:*_h>9]J>j7-b0]2$QMVE?$oB+m<WLH<.
%.<bg2dU)AerplktVS`6W>mKZo8B4e/n5]OCgqE,^=apjj4^3bApF>>Z\CY9<iq;+`HoB'Z&Rl7*hYm;agR$-Pm`jd2d-X&)M7L*u
%T!$k"LZGKt=:"]WgD+5Mbqu`hDRLeUDViiJFn<:>aXs[a*4_mtc]_RFTA+60El,H=P]5gr?+QZ`i?J*CYBtKl>'BB%*M'b8YBDGa
%8<`_YA"h/#4+?XDFsknrX6rs\/`Js!CH]2VB.]2A37*Sp1YUQhqfL`aF(a+$[/7KI2;Gb7M;Z*YDD'aH^"4"nNOb<rh`^Gf%\!:R
%k#-@eS_"t=06qQ\?+@Je\P"l`<Hl!\QZ6)$Xm<-l1PbBfkk<8<ScoY[DoM$$GB\s,>]H[LhMS3G4'>^IH.H'0eXO_sIsdkk$$=a)
%<gXOP]Y_!&%@C`rHjq*u.&S$@Q#N\tYd1a3mAr_0[r3eel:#S:olMadU`\(YQ-@/)fudI^6s.!uT/Th(]3"fn>6Y:XLt5X.Soa>_
%PsPSM/r.p2MK&q)1d%n\Pu^r%/`Du_`hha!agG25lb\,$j"h%oSj6%3oW\7qiXsdf^IN!O*RE#(\Eo&W]\[oHVakBk_]4m2A?K^[
%T'XA*i5rb%#!B@9hhL;kD68&iXOd+/Q!D5uarS761nNhu]^"a_7k:VjBD^f@NNIG:ec0_f?"LmnYH+DpZE^Dn4MS#d*Ojh)nH?J/
%HH8SYX!dm^EV3eAZb(N($luE5CgUaT[?0R#[=!""?*1e^HE4196#b'hmboZ3C[3pWR5KJ4j'dp1eXC8O2sOc)3F1NHM_X>Kg-PDE
%\or,,lW_QS_8t?t9(urbWEspU/%lkLg?\?'G-+as2V-\19j$;OQ-S!6l]'K,+KpIM6Ws,34^pg!K7!P^\iO.^\Z%I<oBTVmlZ_Ls
%KlrA0K_:3ThQJjOf>7,d^j!JshRO,4"SD)N%H6S,\.Ln85A\8u9jo8pQ7Hf_+85CeXpo;bj/H*CfdKM&rf'AorOgO[7J>+IDX?c%
%]tq"#j-<RmjP>5a]&$sII,d?j)sPU+F6h\<#Hd2A*ORZZHAn!!h:V7TD^2+qIG8akegG)cHbTHV:=+4SQK\+L_-4s)EtlC_]pS4t
%T<Xa'BmaiA7GM-@]_OL=lh?uFkqV_:\UQ$W2@oU`IIhjBe2D5>rFrT7f,chc`oI#0f6k=,qg=Z!5Gsmprp\l=_4Ps\b5Tkl7,<?@
%Ems_t/"JQtl\Q8HG?6D-QtFP=m"oS!WV#H+:;FO"8p4+Pelf9<ft)UUnls'L5.T2le?/m(c$V)S=PNEPjA6s;Ln;=d#EJ+]1N4X(
%n:?p]l]XRcGYnqB.X+S5+1j`D9'_1W0N)cH1r83&mre+LZa1S"N\:oqoqQ,IHf^(@fa_7l'Xj9i8)0.!%\L2U6=#';mdfRU)oPV/
%I`jni(p>m0_sj"a)RD)3.H[Ruoe9I4`&1IQk=)6S'=2Ig05dMim&=omh9GbqCg(=DfLo0*fE*!Ng#c`:MHbE`U)^YSiTKpYA=YfB
%5M^?=S&#30Uuu:V/`YOBI>M3mQNZ1R*uA9:q5bPtiZH_$#lg?m.)O.")*YhdCj4og@<Y4J(QND3/&KQnC0/c#=$&a(?gW[Kg1FDc
%YN6Mh+<Fl'0=T8T@PL\f`4)jC=k_Yim7Rf`E[[bngGp^4OaEB$F`1Q3;fC:Lbm-Ot<F:TqcZS`!Hm<"cEAb;V2E0_m$(]>_fsS,,
%Gh>oSj"Wj1gC'W'`c:'>opeH1Q.(f#C2EjKV4K'846ha<$C\0bCkXd,g[e5i[GhD^[=8b!eZ5g6Ol&mK1u[!F\eu:C#H;YdZ-`m@
%'9AQ#l2#'<gsqeX*QICWG9ZQY@jbJ4VKXlY_70#:^3eNBm,,g,pGP[Yh,CFZgjQn?4l1#rM>Z5]_/Xg?2c4hT4$DFomlfR!TEsnl
%N7RiS+:taDn"$m/pWm$2m(Se>9'j#kRMsjC44oQ]AUYkeo<,VKV+.R%F[&%?U:bYf7$FJ%9(]]8?&lX:B[tbT:@0p9T(a/.itg+(
%4iImnYu\L#a,R[gkp@L5EgaUcY1l*sQO=%"M:J)%.3Y=SFqR;X_-l9m\f+;M?;>O_mI`Ue),iGAaiap51hgbaDGqM+YFSX;];h`'
%p"EuWE7XCr\3n!d"#6H2*Me+]36f;">4L\3c0oEi1?rlW0Tg5(%WAAh]u.j%]oq6p+7H&$52U/Po"Gr:^T%P+,@?Kn4ke@JrhE`4
%qKPuQdeAd8BD7tWh7KSc@n9Bq0V1`mj&OgBRGDKc?\6J^2PQ\/lIGk!M2uddSa76!pdtJ5i(dTg@J?a.Y#J2l;Y'hZ>4e>V2Kg,S
%B>Kd2paksRE+enq]reWMA8NR7<AdQ1^&QI&5'NX1kO-B2mp&GP/*CQFG7CE00Dd'QKm,W%>jV'co#6m"]mnEh]faGSlg'nJKC+R`
%mchsIb.C^rr-9U'^QZuu]P%%4[p6Gu/7*TSA,"$;bI_$?r3Dk(f<3&i?2!QZ\p&0p?;J:AqdMPdVR_^fb*U_(b1b!\]=aKCOU`I?
%DpJ:;n4fa&;S;\;XNJ#/a32?ej#s<q\M^.0(TM*@n+'[+o<+5JAa\5lBCl+iY<:X-SdKfT^>5O\+hhRD4ZjE^H]RU8+MMO^(d8BD
%*\Yi\R7B&?Q_+CTniWJRn&eF\]Qs;m]Y$p%VnK20>eI'4?[P2OpC_DM[?mfgDGaV4(ETs^aOR\A(WkgH?93F>#[_,KKr`X%[a<k^
%>SNIP0##G)b]VS8U3W9[9%$c%[<,_cg82g>]h]H)(fAWIhSo,54FC#g&)W9+Zg4)e\Q4a['qXI7Q*]9BF/@GBh,XHe)6RS\)ctR9
%Xkbmg#@H+C^C8p;c-m(*VQWn+R"!:Cp`$E=8p[tDY1H=SX$fpiF^A9UI4'<Ce8K]8hH7=&lnotK\OPV99-#lK]]qsB\\UHdMqcIY
%\KqKmk0Y?%D,q$k4"ZIQo<bg6kEhM!G9=XXDp$7ppi`4Z<n_FTW4+"fa/eq*VL6b\Xd.Ga4kek_4LFBhhl,X>@<c&Q,hP]OXOQlL
%3Vr[W*D^U7[T^8nSofWF*l)f%Kjd_Mgd?FCXLn>s/EHn/Y,L#G$h*O3g=jl0+*HM/:X:'XE&erPJpi@Y%DUf!%f\9Y2!rqN@+XmH
%Z?YZZ+1BMCOs9Q@s'r17):S$m1G2gQZ(0et+(]VPfU=8enNS[XG-O54VFdcrd<9`^8%^J'$!52:Tq;@Sns+J)nB8Z$kIAlOr+L$`
%s18#_Mhnh2qJ?'Kb;U?J=Prjrh>G,s7r\,.D*M;Wj#V295;KCi+)pfQ`o0oEaJl3!Z@*DoU2/MMP\`96,<&^o$F5V@Xi"Qo2NA8E
%rfA2i50or@Tb-^pX#2DMq^4b94_+E:F&f?=LI-c"ZW,Q2p2?J8)_0\A!>8KQ)e:W^>iMH7E!,EVTb,\V=&83"2qq'?9ma/*Rt5(R
%;2WDl0Qar8X^q&b_f[@IY66/6k<J7.@ib0\nZ#*ajo/jVrbkZuh.LRgV#W`_l/U.cmFRuMi94`I!(q6_r"5b8m?R@J/UY>B<b6n7
%-[a'pgFltq9l`^sSb(%=r-g;jQc(#maO1<7?/*XXr2N/h@jTh`i,mG`o<utl)BKi94-=>QUEMeO)P%CVO'9M/s8S$h':GN/W=8S.
%4>1c=,)q'#?4qLKQcZ/b8IMqn5Q:upZ4^\J'eLIW!ursB`"Z[m+u0e>"6!2s3^KM\j:t,'7SsYq,$ISM\tI9jB^f+i$jmCn\DfK"
%K(FU_>4!k+#`9U4"ApI^>``GACfH+]^^H=UaE&h(#>h7i+S%(O9aJ$eUEZo\'P2su_o*ao.'?bUX9M[j!\:Ks:1f@E('Gp38-2qb
%U;Dl%3bScq/6V@^IK0d3&hB-]<PY5l>X&c:.)7<SE+k#,8sC0ebRj\_\1]P3nNAmj`;28U=V>9H5BG-W&d,oX+sN6>h(p5W_r31R
%jA^^"M3/*'"lu"@(`!Z#-HJft4g?IA"2^c=ZNMPSU=e5dUg4BaMC;ToU*:fc"X,9K&o@ae.1e-E85><EjA8i!?]g9i"XQS`$j5@c
%&r.]fA3,=Q_?Uqr(e/5[EcRdq]V8:Vb#4>]'LG_%%>]g6P_5,kjTo`[+=<>ZP1?08Efq]1rZG\nI1fg'#8G-p,/XUFYtkT:2o$dR
%-Vd3^q8`M7Qe1E3\[GK"D^\7D7!Vd3G$InK?0*Mh#)XT+N>Y$VNNarTKc_HANf#%9(DVrS-ii+u_"X<u'lXmV.4F`g5t1ih#Wu@L
%&g((5::2!c&OHj\Jur;]9iFKH!_X0&]3S9%j:an3m><*n5Y.$ce?14PXt%(<U*q2j@P4t'\>"NC#!&(f7MJ9*=BGl@bWo#POn2pZ
%'L7fpa43Rg62l+o)cm[bJid!KPS#bRJq8kQr.pda,VR?X\=/4)XBJ[#&N(.\S5/$4e:^YYiP]^n&I"7b<Y=\5,"cZJ<YT^F9ouP6
%Z(#6L,(WWa<9/d[Jj,5t?FurE,L1Wnq3sF^#XO_A1CZL!]YsBj4=O`9,j%\<;ptp./MY)G%M10nM9LQYiC.4G?t`fU%!:Jg7Wr&\
%,VN7(#;?Bc6>OF-<(6s&Qs;+I!f)"F[M"Zp5sZYP%%=.N8g&QkLC4]=+:Rmt2N\*"NEcN*".]KbL,P,q&7+!/=:Tm1D.Q,,9EYW@
%kh7<?L-jOIZV]O-8P!P,(XejS$*bf7--)e##UkD4ML[f__oaq]a;)9LBEGPchWbKuP!roh`.JX:dDlSFkV>uc>,6r^_\"1471PHB
%AY9Ct%e@T;"<T-++[[GP@71s%3)hT.^`[D*6*]"cK8BeKa=:b_1A#Vh"!3N57i[U&d-=!\6[j[H&f#SoCk6O0N#3e78`<Yp2bL@Y
%`W.S9Y9K^>0bX=-FI@5S%PoOR&j-]g2H_i_;\I3&YQ,5,C]jKD"[WDM@Ud)68.BP_+;)C?N"^HCEkJenQ::<Dh*C$m)_=Ya,*Ldi
%9M($Bo76?$\4gRFkhMj"+rD/1;ir25&s9%='Q"C;(/:tXZ_2FJ9.@lR-pSa@9bI^m+KpZUP:H]j4\,em'_9@?+I8fIO&R;QTHPf=
%:nT#2*0i>,!0em77)#U#Dr@01T`iI[BKR,'f-G4Gr?N!JJrG5*AOKbP)iI.C`EqTA*'%6;T:(lC$7GtaO(T>N_#_!=9F\DN&4;H>
%)3$X!.\I(a_46=ISJHb3+DH@cdMG)VW.@?qMV>%;>f+\6@#-q6>S]j5e=j\_Yp3ZE<7!G*BFJ&RoI@3g1m]$eO=5nd'r$,<`/me/
%KS,"t,esLrPc-fV,de_iW5(K(]n,i3#IBOX;[.5A"P3"pa_[W1,.5/o\mC'nPRs4u\>0_=$`G;@&%nO/,!/f?";XSgBGPD"1/;D2
%'d-MkaE54/!@:oH/5ZSh5b`6H+:f;aYSgII%.8^8>2WC3/Xer_++5dmWuMs4FKR;#7uJafRt(b_Il-W82OR#*hiE=bSC%=ec%BCs
%Zm$VpR#:I7J??0u%o>Vjd+'UrWf0a(OSAh*9gJdd5]-TPM".q[k#*Ds:]Yp:U9:1CK2l?D,b]0SK-m<mk:rJq>&Y=h"Mj5Oi+)DT
%Je^]B#4@"C0uQmS(jH32,OQ..mi`6c119W;2DHCC,=)AE+uj8-aXX!P;^a1n&gD"s+&A"=J0A$VO:D\L_FXkCekAmj>0^748V@Kc
%5o(]MXq;0R]$&5OPphTP3(C0A_0&V+&in;V@^O8BLuHT\;2e%4!RQq$g_Y.NBFI6WU\f\Vj&j<1^C%P&,5W+r"VfHl0RkKCE.RPQ
%JkBhc!t7Er!-""g05p)-=A'9uJZ/isJb?:<4m3Cl_l/LP"\\)j"r.s8Qc;.\j*XZg-3.@+,HFpt'K?k_\-3*48E*-]ou+"bZN7@A
%B*\cF#-T;<XND.eN$sKdL<p=X).R:*I'>_HX9JN2$P?.@o-=H.922]odMn\]cicWXF_.M8"f&5^J4'GhUL;"L;hB^'8=4s?K2_$q
%L`2?aK+qG!bbE\+9aD8kr#!bYK$l"I#sEgM5XCf!>T=L<*44W`]1B4-E#N+R0lV^UPehkX"<$eSoKG%3#c84d_Eg_e@Or[t!Fr+"
%&;[HPJJp::1,jonP_6%LJkPAl?q,r+O`4]g<1ZJbcrh[*,Pjq];h*-aib';YJ8mX&29!+!JS5&C8RdRm(@kk*nWKe>#Y]uG1)pTb
%Ab=+nLb'ub5_+hp%UpO$e7I%-@ItQhU_==#&c3)^!!3j$I21QQ9?jQZ=:RY%[8UY0C>DLl<Q]%$b)`eWTh5S>i>!kABiJ3&1s%_9
%-&eQ5JRC"</](>k$bS_07&3Yt@-KEZ=p@VJ=M^I4#XKMer$9YmMC#NW,4YWiKK+d%8T]nhU+dFW6/pB1HO1]9`i>-P!(Fui\0)(k
%Ii3VU3%7L@d+U3&m'=i<rY<mXM271d=;;EF`2j"*g'TB5Pc]`L`DIu8WPW-28J2H)XFO/33!>$F"[SspJX')p^p=&!XLWV2jMB>U
%M9$GE@ieNm_DYk#M+u!%7cO9h(n"j&9EHrs7QQYi(;j8^a"(1*!=UT;kce2&89>"FSeRZe%2^@k"+McQrFN5U9!FQN/<.53/ISLK
%67st<Jo%u@E)"j!&T3[MSlCD7@NpFWaf9))Vki691>73dKo>ot!_SH2$^Je$30%N,JQX1c3%")pmejQ[JB/$d7KJi$FBG1P`4&+`
%+t1Ab?sZL#8J)i]oW89V&VY62;_"%Y[KZ%-VHFJrd@-((7Lp8c9cVk?OdIH%+fqLlB^Rm>I_aclXpRQ2\A#V.aRM#9d5J6)$<9;k
%l+7C4Rma>.E!g^'9&Q]%_B_jp6K0XkjMhb5:U+=>UOremCr;@YTR)7r&:Qt48U3RL-SS)uN#64c!t+/'fYnQ`?l&l:=):q=CPeN`
%2`8deiJNc:i2r*r+ScHS%h_s+Am$7m&5ag<X[!g25>U%l_Lb_^^9b_!Q)@2.<`D(i%?!Y?@^306/"fJMM?aG<0R"ie=59gC0HuB4
%`&$V]Q&5.ISP8L2eI:-"jb"EO'=@Li?N!g%L.'k?N*-G4(qrd-Zt0RN'JR+\$(]E`&>-($Mai@<P#JS3K/?[RV(9d*aO7=Y,EfnT
%FJ<XVVF.g:%I-:0pgX"@M2X]XT;2gMfqZ]QW\H>-WrO9H1<)rO0H_N>:#`Ea8?'g9^)Z](TGEsm*Knmao%,.UUdrqA"/WgL0ihRM
%jfJkLL'%u(@)e+m5)Jo"N%lUd4%\G5\dChmQ38t%<A;F)Ni+oG3AaTCn6-7H=9sO3a`MFNU+=./(`+S&&XJ;1j*2hUV1f>C-T,HD
%,"Xcqg3C/(<s^.4AEBVi64-M=$^`6+N[XOh`j#H,XsE7C'ZkX)o8dC#%#lE6jsfU>:ZVd]Rm\S9-=<(cEeo<6j'\O<Q&e3F6E;\?
%DNdNSW+h)%9.6UAo#lWLXND+Zo;'IP>KMqZDB=DgJKJ95r<LmVRV@KFA*a'cmfnf%Y?o>Gerh3n8?7Pl#:1GpG#Uo8Y/Sg+%oeH4
%dLmuKOA`01aYPC#5u^Fu`^Dek?n\cc&P?"ofb\K0:M58]5UMd7,;Y@Y2f<PbUTh<s'$\dT(%,bV'N-.0?W\&<j^ZNG<C,^p6V4[r
%34U<^\f.?*R#($`A/3Wc3GS]];hUWqQqnHe15's+%L\eoMLZWNg$WdHE4C7I;'@iMF$]r5.MfOq2NG]A>D/6+-O!u-L-;J4"XI4B
%.&9uhSe&\%Q,@PZgE9Rq^'@hUO]VX`<X!1K<06kf-(P3+s0*[QaSBE$9RRjlg46S'Wtd)j_-,c?=kY-0N81o6N(fsEO_C]$=$XpD
%!Cadj/1nt0(.bBaD'ETrI2JN<'H!:D=NM1s-;s4UD;[KUg;`_p6.d3;B<bfek;eCEc4P*d1_GJ$'mp*ce6C,ZZN;Q[@2R/[6O&7/
%e?HY9O9f)VQd9WX]Hm!!>pc4q^^7BD6UPP.K0Y(rf75<_6IL==,3Tf@!`U&%8$Q2tC&S+-$3V'GBY=[m=]$AD#?*5]b<[m4UG5gJ
%7MY/o'a^p@L#`r*@*,f-1KL<-jW@A$LGh=EYh%qB<a&'P>K/-26W?qe5*Ia`!q@aR$>IC_'<a+3@9CMnYY#7N]TrB@4<-;t,`/lo
%RSC6J+G#*U,U),c(J*Tl3Kcdp<l%+_5l<TBmq![L*/*eog%3*J.N&heA>RUX1sLtM&gAk=aHlCLVj1pR7C+q[n.K.?)INi\.HX`U
%PZ.^@)h7h24tn3$&L7@R7L5bR87u%nqN)?-&$)oWn2/5g'1fb>G))/SV:cR'M[EHbC@&3"^henPO3J"Vg6sfu1G$q*[S/6Zd0BkH
%)fa5<(-%VbAg1iRNiH:U^HjYmUR>f1mFF$N%&[4&dd8lSK<S$6RH-o3$SI='"=om>+`k'NAC)T8_.MaATbN:%L6>`ZU9>;b;;sjr
%9OkfH76S53%]L^!3+OA/Sj7<><$[X$&r!/^1SS-eV)6+?&SmEOi49'7.`iGO/M<amToOq.><sel]7@g5(#,D"!a-ELBrAh1.OOR]
%a9"ldaGpr$Nd3!,M7A0g'/"p="#4@J,c%s`D6jo_Vc!:Oa'_W4<iJBOGbT6Zb-Rhm7Wsa31gigu8g:QPgogk/c"==L?q!&t@drnu
%Fp[8*TY%;4:5*P\kh>2=5H']#jG=JMW.Ma>erVALS].%T,1&4`OmJF`B\h"c*K2!JG6`;RXHEdLUcW3(o12%p;mo>bD'jC0;OnUL
%9@@Y5"T:CVj8n./U.2RUBLNoMW*-\QdE8)DQ1XkhC`CrsEL0FdX_,XB#q/P?`=%V,4.nYAbE;3Bhs\fo7;?Wb)cla<"^"912hn$r
%%&or$<Z<]2rA"a:?k=k\-6)2O(LdNj3sh8ahcf,YM]'$G+qsrrr?Q+(G%L2Ak%-'%@*#5'K[A`!Uk_,4cLW)&+dXo,#L/:rJlWC<
%EfsI4SIW..Z0F!hk:JBjOmnJWR;DSiB-Or#d&++ULlV^>9G,[Pb*`(1AD]WQ=^k6-A:12*-_Ms?`d(JP_7BYa'<.WKQcLs?/9t9N
%&ZcFTE"4A&df>8F'A9@<aiRQue)+6'4-a1^ke7o/5`tEn$<YfR9?1\TE9Y^r&:oNn/'aknN?D1?fg:n-g*r2E8m2hF2MRM5J!#oh
%4$%dnCV`_"!BBS&$jnq'83rVC-2JI7b4%6?'%)$@C/b3mI>;$24S^)\1,)jCYim:B\07%BiDdAh";FaB"D_?WM"q"VpTD,n?.kM*
%'DNU-:B?1h[.h0"[G8hFcEOo5LotdQD7'J*7R>"XbN`[f%Ab=;Dr9k"A+%6%nrO97(f"XGc>ls1na,#AcHDSb#ST^X3oJLi'(+mV
%V1fao1/#btWk!eH'mA-mck>L)RNMF.a.2BO>h&]T]$YaNl*6<%o%'Hm1>+R+Q!uH>"M<CORl*FAd9J4YT$Bt@NKDDYk.Y9@&I3&?
%Ztq#i3#=dYm;q]!>t2h(]=pKEOnI32,u@9E1O?SKr%g%SN/$=#g=At4Z,t$1.\+DWPH_u\&W0d4%>5`1\,cuFHMNOo"g*>Db\T<P
%Z4)^QN#9\?R+=-2N]JH;%sJH2Fgnbl2ZJXJU$B9?4a-,@(AS3/;%*_>NO-S>P#5AK&n9*LkEc?cf5cidNpHNO12jR9i@QjN"P8\N
%46@&_26IEFG!m?O3DA%T/d#>Q+L`sf\%g$ENlI3aVECC(:],1?kh<F;;7`tQ];:nd3]r_IQs6!+gR8/DCTCp?knjN)'0`a>ri+<b
%;[43VKl:*Q8*E!_Uutf*W`PE-k^1,)e1+^$X+;*l2rjsDB>fLBrd658F2!-&]Eubl2utu4J8F!n5IW'.7\X?Rr0Bqpo)l,FW=ZUu
%bD#2!dce\VX/V5BUIk?L+Drt_SSGar4sJTbM&dr6ZU4=;o@Bf#HYP*4cO'c\AuG/6M4gto]NuR7=bagTMYo*F>aG2\Pk_u$;jgEs
%>Re)=e]%l"ZJ\,dC;*j6Af.YcR!S>;%RP4e3BLgtO:SSj=dWUXm*`U1h_k;k-n!u_``S&\N9r/%6<g)4b?DuT3;W+lPA##>/uMgC
%8n\UC\INu%7I'8KHZtnGli$??>%;>fWf#Ar'E\nKC7S%dFWm[urb5e71&s3;1b+k"8$4U5m%GMaP%&iOP1m;j]:@()C(.m=-.^6h
%p:P][a#VDSM)@fP#1-1REnD*hH4B,MA"#<^jk-`-.!e/a"9aj0DGX-crA%K4X*$#^,PX^3^2(jB,8l;]]"Yu3Fu#da5VZSVf,$qQ
%'>L'6q6@Kr=1ip?CVdnK,LDEWi0D4@`\h9jl76Conod0*g2t'&IJT&U[r:I[k=67>AQ$lT`p'EtLFmEKI93MmEP^0W$;&?L<*2Z>
%+GW$PdtWFT9:'Xb2<I;qfZl6IU(EUfE%RiaCMu:@R.tpm>'S:JTou87Q#/u=B[!p#oMY`p4YOQ"4uXfFGs7;ulDg^_+\Od7Lndbt
%:BLMFUcM3^E6\Grp?_T1""DsT&8JE2dD\:)fr_?DJ"2feABd;TNgbOAQo!rA1X'deVh.VuE16U8%04&R`LI^^-7]Y8#BF%qFP^W;
%B'1nRKst0g6Z=V<69h9HG==<5mWr\4qGf&t#r(At/-\I##o4poaKPHe<64`c"jn_WLEo@[6[,A(l+U`ENT2hcVS*R?Troic$cfP*
%/@Xt@`K"A)(oT^JO0,?=_8HY;Ce_IO7.*O[(8=_hG"\8],$Hg?OlT:/0KGM+g>'LWCRPQM<!T>fC9!CL'=NKU*ltTmKa<ufcUtQ'
%dKpT-_p;#]MD-0#ANeW:g70LB6'M3dJZ&%:H*JVG]s*+]Gj)_HY7V(ZlS[Q"I?0eiA[utt3e2:nO]FY40D"\#qr)7a$-+WI1l)c7
%_,rn3pmAi=lo>MD;[I_KH.7(86W(i[F<[d-T!\VEbNNo@Ps&3BmO[g%ORGF&-S0]nCQ.GLgqN1^&jcjf:=`^TBJOB`D!N'@$u7\t
%q)DU9ak5A1!O\4DA'!cc_j!.&KFekP$=#'bVn)2W<aEm,$O3@SJAElN;H.6P$+2S*]Ou09ZJgToi(!U:aTRt6*+V9,d5=#-66="B
%$dqD(`o0*Ha'R-IDYQ"Q;C=l2iM=JK/t@U&Q+-n"/go;j889>^_i[JrZak13\F4CpC/Qu5s*;\Pk^(<$_s!8sH5F.jpmI2tW8:pp
%Lb]?p/o2Mi:d+s`hPC;n0gb<7DW?fmWRXt$IKY&\XJK`K`sGkG9%j:`of=GG$.(qF/p0,q],TVW1q_3<8hR`5MdE3.TIHMF`^N6a
%4^]ktBTugJ\hH)C4)UrMeoY5*OI=4coMKF(+D][:3"U3[9fTOPF@X->&^E1\Cf^u5G!N=$_+D5(F-bWh3T$NLeZr*$N7+@V'9pRH
%hX5:HFLJ>h@6DulA-_\nRk,PB"'m>VG/l]R*(p+][5t`"$ra*[LlOAp`]FPMTF]ph+N=i:bJ7X#5\RiG">SNOf.@Ot>H48FTWg1[
%Au_gM<YP=C7aiEmNo!5S"I39#U53/E(`5m.PL]dbnH`.F`NmX@oFniOMO2A@A;la+f;g0h\=.caV<u_^gKd(s66WKL21MZHm4o+*
%G"Tra0kIcfkbJ:n)htqXbd[k%@%oa'ZF\Q9LA[,n_YpB_=Ob@K;(HTPfn.f91A&1$Ikniumj8=oHUlG/.l$:TRjR(S1'bkfQRTT;
%&,p#&m[*mn5clQZ30!AFr:^]c"ZVeFQGEmVY^8mmZ"nf-QuJHkfiq3ZR/eK\X@X[Ha*sas)o^!,hQ$;CgYhNt5IGt(g(#HJ.F-]^
%-]"2%[Y6u6@d+i,0k+;nJ^S#c$kc`U85FeX<:,5h/K@)3_P=-.KTs8LMl0P+H_4n];gODiZj767i.-1F!*/m&Ctm!#*L7;&3c=6>
%;c`G)cAAYQK[iH?./"\Y!6c1c<5]m4+NO)OJ+p"OlbE7V^KR9#lX/U8T4>&-Wm)c/HpAV%iJcN_2]W4DWA2$e(#;S)L/i"d"kd")
%b6kZa0fT>9B!r"L1'R2$ChKn,d-ahgb3[$Ue%$g>,'g5KJ*tIT.60*t9RZ\jc_9#u(+4?$1trbEpN0q>naA2TEXOC.!X'a_EoY\l
%MC98ga(`Q8;g*R`UpYu>f:s#3'U/A8qeo3YeL28cns1Ot@0KdLMD2e;RBY&jc#55Jf.6US$Yq=p([dc=OC/pGi)qlfV&J)&TJ0Bc
%&pGL'-3PhI4!>aQ3#Z?OkT9CWCK?Gt`R\nYju49Mc%+jUp4sg`#aoh8W^4U`A&BqO+Ns='Sk,!h(8-@=E(oVA,\:qKdX_fQ1,boc
%8P)\JQ&:UnC7Q87Kr;132h;<-`F7fc^'e!ckZCX#E2G5b^Q'Nb%+tb4idGOPS-7/n]TI!Rf&"."&X%dL!P-=qPLE,UiD`adQb[^q
%Ko&DU73Tas$Y)abBXqOE8P$)NHicjIgkk,p4<0r*r.Ppk=[*W/8J!2KN%oMu=p.\-C!c((7X/Igr'E0$,8:ij_H;>T'R/g"f>lUp
%ei/.2&UFsc!6P`)4DN^)o#n=5elXg#r!*p1\EKO%iM2&!A]#rHg0A'_\!'\hn9potN7G;]caU/"[0@0!s24g0a67sHrp+q7Lo"W&
%+B)]>ht]B3aYBJ^"c\0ce++p?(p9=%3g]urRU$K4>\IttX)BGj>H85";popAk$0m]ZmJ#>&gV9Kp=bYd!SFn6"63,=d+%\7&dkAl
%iFb>YlLCTCnP]hc24#c<PY6Z5M[T)A!I3;@X"jM+90'X^,&ZM%J/KrU`lj"^-S`)1GefXrn^:'`p=M7FZ4c$\aZ)EZ\IfLhenH*c
%'71F4%]j2rBL2F!NNcS#4(7"sp8jPpk(5^I^`*l[LL9Z.9Q/+3mOtf+2WEL/4lEWOc_2Mtl$71Xj_G("NDk:C\HEm<lgOYPAOJ,P
%*,(&)#r41;_\G$9i60;@q-9!U[c/-?3SL`<$POY\'Z^`WWg:t)i-BS\(d$5u&a:lO`*ns=8GSk+B&b<7VUgg6#lqZPm,!kYi-;Gt
%3AJR#)VLETjjP6N:j?h/=ia*:p6*t@ZtF*iJ@[Y/Mc(`r(_F;]Hc2@SjerD2rejiT%uapE;VmqA"'ae"78b7L^8V^>=s#c\:[LEi
%FGd#pnRlf%A6!:Fran*+HN_&0^KO":XRXdSo9l'gTXWX>P$iSFB<eNiRf(43VSmhu0.Y?%*n@ChRA/t^6`0cc"f_Rf2Lp[L#q0K@
%5`@9Njl$nu/k*1nRTVh'hL=b`+98=p.WT1HAZE\lL",D)\RcfPH"a^U;,fg1l<K-K2S33AR$5n@H.``Yf2VO)(b\.dopb$Z"o'6q
%(OA6ULS;rH)G5R+E`<e58J6g9%"ujMn6YELj7jo-"FL<uMs?,69?IE_pk@&GiINr`PjI=@c..HD+mn>o'c"<W&Tf%=)>e2HaBYfN
%A;G7@[U5&G@aD.TbSE76X?2h\"h-@q+UO^9p>rK[J**UH"6!FN_NQ)KNNU9!UX2JKjd_:nBd$](m;<eG<5A[11L+"IX)\XqddR<M
%kmf*!]q@Q$-cc;QU>DF**<cL#=lM42n9J&)3O2(<\1CGEckU,!iu-CEB`i,p>T+K7I2I).mOWl-='7C^^'!t0<E^[#f%-N2>C0q]
%DL=DZDa14/r(/8*,En"W6`pFmX.@(L;OV`>A"6Y,<uIH\h/>pMFY?8F2EeJ_<X4qZp6Ol$9)M\YPd*r8:1kg%heNX1OZOap#?JHL
%9g=cQi*OS9c*\SfI6u!G)"I$#eVJ-(jp]^Kc_p$4`P_U+la:IAE*qma-hl!<pWHG_0/@QTD6[C^?9ATq!ZGNj]>gr1XXVnp2NSZ<
%gb20GP*=JdE%232>R">&"/nb"KLrQ)(!o_'mVibS*(#h!Ym=)pUIc*J.-K^ZT:#C`-A0iV<Tuib%GZ9;YsE&T6g.t8ZF+T&7FR&3
%!(;W'<e>.a&5EZY!;MFt';%hc?;2YT&l+1aG(Q.=Cp5a]#;/.H6[17D:p:cEkJ#OgJ?lu6Q?E81f?tle%YVPQ<QVid^nl#+KlM?L
%enf-=IQXmUPqpjtU3]e>L`R3bPaTFL8uhV0j0l\5g@7qJmrIOQ(?7^.^?^O42;2XPG_%XkZq[598KfVB8RK>BZrc?XZ.P4#OJo"6
%4g;qbKEGm2FF+\&+HXbl#-5)WMF\!m"b<C/*Rl8`!iqJCAD3:#fB%@&o`X42S@$E3@ks3V8gJ[`)k44?ZC>XuFYW"-b0!WRUl!\"
%aaW!)I@0kI/J$&4SK!%K7d@bAX(\N-dW^U0Lt^G1:%AfINR<qe/!qsC])P8rJjN^$ZT1kq01m+aG3ihW<?Xb,W4LJA`b;!i+T2k`
%79>2T$9hFX:ujL1',[@<V+mYK5gD#UF.W(.UJqCrQg%jW;PP-C$j*]:6)PAbi.@3F+FVscBEhGKGCBl,d;n2Dr,gNGD2.'Oi!q@\
%)P,)QiK*7bX-ffLI]D@M6dK7LB'_j8jqEr>,FW+,U?,Am.)F-dk7N:G*h`k4_&-1]j5G?$G,$,h/@XtO[2F>$nbVat$%FhbH1lEc
%54sGdNH#L;'Vu+?n>W@ErS[e_dg#8:4M;TL@-SL''o"+aUW6aMg8ju!^nZtK"n:(@W.Ui(7MRrMX=C;WhO)tOf%:>DUX&rH^%W@a
%:iEAl=MF=jO5Z]X,u==VeIUmQ3.7J3A%il2LUpd1nKWMJd]%ddQ&E-?c(DZgAtY'IX`AK?3qo?h_o+Br*3g_&a;C/j-0Vmef(eYj
%J0p%\ZIY_O^W98b*"uY0kbL2o1q*:O`Y7Y.D3&36g`JuX?^Y_qaoHW8O4dul]Y#_$FkQd_p:Y$%FBO%X%`AhA\]ookeXaK(.`Ram
%8(u4!6VopGZOSTLR'T,Iio*RZ#.LF&.ni1-B)"[#X[""$:nJRQQ)eN2:Uj&^7\E>,>KYY>*eH'q6T=C2V/o+[9bR]t;;Hk=mXVOe
%Ct5H*e>(GogOklF[/4)/2%(ra]Mg-HEe9$?-\#=dCi=IE@2p0D&%o$cX]UTsf#jPf.%3r=$55["#UDqO:*e5c%YG1__.&Qkm-#gB
%^HQ(`]V6dhp-7W"aJ'>Bd"g6^>kN`''ZW4<VCN-e%SZqWC7Hc3dk=K#k2M3'l%SH+8sr<:D#1WS74pj;WrQSO[a.^j+(n-HG3M]<
%-*"[GL;&="el4RSX0Qsamoku$W*.D?d*W9okJcp`[drQi2nZ.fpJPas2/5LR2A;k:cQ*%gOaW;-gdWo$93F,4,r.dkY6uh[`6nG]
%LO@TlS4,j![]!BPl)<HoW64WFg=FiRCu$qqa;&C#Fel#H?C\72/i7>_JY8\e\M#kMi&&\XQDt.9&5crd\I$m89ZG92#W,-@j"Nh5
%WE;&&(`igm*TBNtj?^fGg%M)mlMAFm;U$R-aK!*<V6+?6*!=d4nFEP"fmUe;4JpCK2PBurls#RiAtT\:#>```ZkSk5hF@$)k,P%?
%AUnOo-@`EfTd!&g):[h8]5$M=gePV:@&c&6TT1ag`"4.i+i(C/ItU:D,?]4=AdA'K]lJ,)e[qQdS#Qru!/J$jlT:)6YL<EM@-e"g
%,hU+RI"Kf-/tgUGM>(Q=lc!)_.qZCn.99!D.#9%jGF^'P.n/sdiFIX-&aQ@^cX#<6Z`K.Y9)mR_aBOUFiV7*G;@ohTPQfp7iH=3Z
%'Z,R&G;,JI'gI*59NR.D@3)j1Caj1iJrtm$6Xch.T%V(9d#+61O3:7I#Yemf1o,K&3%7"h"dHuW.YQ^9D9?-SGUFPm`N5duJfr'5
%dH7F!+[S*2IYUoQia=c]r&_\ajU7Fe_:2MH9cT'6(hX<l8XJT]-7a&U3JQN[Ck*tie>^d=@eZ'n2e1%FNig5sTdEGOQ5QmZRip8>
%M%g%8@VCgRg4hIIEB3`!Fr>!YX?f1*eWB7@1p+4--:JM7$e)W.S5sC$#MTW-bD/h+cj2<!_L-^d"nESBV#0[h5u#<27IImZ,Qbk3
%(]b+M<`P;"i'\so8)t'2Psf=#aN%^eO@H2=W?=?,OORQ-aqXCTlMuGaPZB>9ojIKsM($KK'Q.7#LI?uLjk/Xsgnf7+f@H>Z7Z*Ah
%^_'4r",R)qbreuNW8e647.CcTUA56d>o&?a9R<G*.`UYSlSqLS;f#.r%tq.<C#Z>,j54JDO86Sl?1Z1'(UC)1IL=8+KW'HVFCXLL
%FXW8$;RdSE,#pB>Zb:*l^j.j?Q9O,1qb<L,[&M`QQZ-urU2nnVQpo\&Jk#R$C/?YGX,+O3-pr%I6i;$SMSG)B5Y'mf)=d^TLnL=J
%B4;#YVs&=??(DRZL,2B2p:6T`f5383!I+P%po,BY&<o&G6o-8S);dNIM#rBU1T!"`Q.Ls>4!19>]*p'q-@T[O'5!HAmL']XB4b!R
%Bsk,4&H*_;lH"adGq@S"Tq[;aqRSlNCLY67;b[i(A[6P<1b't<0>lbOAY\=ETDSWYkM#.CiJS#IiZ(LMfE<.NCiZX5-oOf^20)YR
%O^\[7E4F;;q[9V(SB:ciIXT3"^)s1L,g2P5(g/bi?,cl0'#B_n<%!ujg1`.S`E?$j(5uNGqiK@/+sm)Y<:;UcjA"^dad();YWtZ8
%KKpDT<L0VsP!K>>g<m$l4oVTFV77;LUOuQiRs[\[?JI*uU]Qe;\aY`bHN%3D82RB!\Kpu@0Q*jml%:U33(7ej8E=?(8N_*C>B[98
%g\QBq3j\IY'kk/EAFnpHNa8mrMY0r`d%rc8>^lLIi=gF'"7,b*Kp##o6sRsRBA.tI/[_67=+@8=:!LO5k^.U`Ji.2I/q!N]o^-2r
%XM;<Vq>+HIpX98L#TNi\4-TT!gYS,^g*c!PX(s?dnug3dG4@M@qt4$?s4s%!IWmDfV9SkrYKt1Bd[=dqkm*P$KC5[(h7h`//Z;0H
%n8H&:boJAg`[>-knM*;l5MmX?f'IXoNt1u`T;6>2(3+ECX>YcY6l5Q5n<M4I9,>n:H7r"s+l0O0U`h'L4CM^(f3o2X$jXX@].e&-
%9)<c&lDgN$m.d'[Rle-]@tffQ_s.`^e\KlK*D74,;-`YXS0:/E5e@7I>ZN##mb4?2O=uN@OQ7[c3He-f__6LOKe4f`q('5+'a>kY
%f8j'C7+k+g^?-&lo#2isp1L\Pee"+-?Y!WNk:$,LMbH%`'I&TH&S:B9S'>BW;oQ\Cc%^'ip2aKRC6]9`V?3aHLM3h>W4A?ZEghaI
%f+JB$26HPOr#C"3'6=r7Sl_7ll`@6+X_(fI7N4;<@'c]_DPPY)@fP"T-Pf,PbU,-:HJ>jA>l-p1<s4/J3j8MOP>"G]:8'oL*p<4"
%?b8LRnnkoY&qhFbXF;F0+pfeEeLnBW7r;j6`,VRTo3PcjQRgJni@0RRooB*i.P"^EE6(@cY\VRc-28>=Nrf8%&u<TX\Y:lfVc(2]
%8]S82+mn7#?AFa<f9&FEYqo9>;HM;EO:0+-dETpP"G=3\qP74&d,jD5jJt*IZ:dCqoqs:,ihqOke.P^nPn@"[PamQ^IB1;PbeBa2
%..L_R9I)j"3a5lAG!*b?+25:fqEOk4#@P'j1f1\K(3>2kJSG62-<_*YQ!)A=PUOYJ)F[5MZn&"H;D1&H!O?c-/P).M(OCm"6JH64
%`2cE%3CS4'et/SH8a>q`\<ema&!c5g&//D?g(i,l4[$`SkZMur<R;2t?$fSJ#R`Bp7ccc1c6(>$SH<mpXX%)g8YMo+K+Pbq3I?+:
%O091;$0O]5Dqg:M<2qRm8NW@pK)iTrp9m&O+Kd;-Gt]tNa&*FnZoQ+78&k3!V_&b.Bj5I$I7$k@eiZo;?=]2NEFr4;;'ohI%Pkr)
%EFjkN,oEUD']uk3\rl%'2q%k#8'9LVlLCX2<.9b[*d$3!8U"k+,'KGClrN/ESC:Jl[03TWc+^lG,gE=a-M@^D<h5\_7's8!PGh@*
%rd!&t:,PP]oW5Sap3Le`3Cf%nlp2r>JUMV=:.O(3h(LaVIFnFbfk5LG`a[hNdVW4$e91-D7rs'pc+W8ga.=>oegCuS20QL]%>%n4
%'#pE;:9kbWZt`!BGlXGcHuho)Ds,AsD2Ja!!-C5ilu>WF8Q$jZj48!UW+n_D.l1k4M_1_eBK^SiKnIMs]D$3r2`TC5@KutWFPWj=
%]'r^tmRpiR@VEiocGmN..1T,L9:XYu7O=HOV_2dr,[oP7?+AcP3C0&N(*i[DI=tfgK4UjYhTHTup<5sJ>#cqK,6)<B#5u=JUlbuY
%<hps$%3iPn6D`1K#65;HW=)(oZ7+++^d[?jlU9U"H`Nhq_7Z:-'%`o4)L@<oNq'u1]fUp7?dJ.jDGI%oot]I2s*tkTe`96l]=Z<V
%E1]:^:H*Qpq<TI.,[5f9K.X/WdCF^^$d?,,C4:B)=n_s?oBsmu*bdgQaTI[C:X[O:RND$)L&<Ek,%g>tLj.gq@E"ZjL8D_+mdjKY
%C5J:[5*^.j6Eka"2MHIYAeL9GXSCK]FAE,TY&jb`ipb1[$,B&0:+cc[nBSoKYsk-!P.@KX/o3r2Dq.0?IPlsO!?*'5j&s%>rHNSo
%#1=jZP1iBcj8p]GQJ;Mr38Pm5K+[dS,Y)U2#gcLNr.EC/\]_SoH_^OJBG/57qq0FnR,+P\11U;H*.ir%iDr_L-Y_;:RF+u,0(;fM
%;`#f:;ZRjD=I:+Pc%V\oWVDt74N^\3)t^Pr^BqeR3%.egeu2Wb-sP/IR6"kk\kV<R.$\o4RWoM;fG:+=Lm2^.@h2m-D:Vh37d:Ip
%ENKF=odfbA>^93V21A0lgeB5.^jW%uBoiZZ6/Eq)A#_AMlJH-0:iY!fY=@Sb'0Jl*[Go;52r.?+NVWtoQV`_GVq8X'm"M/LVF2,?
%`[D()Wfl/%Xnk.Q6B#o+rCGmGM2Y"uKUR`n;i-d:TNXq`%pc'5f_1RN90QJDRnG"!F@@69hrRPGKR?R"`,F5-hJPg_m?OAF.Nq_m
%.:JbRa[E*Xk36K49*upuQ6](q>^dll-_7U<Qb30XdCD5u(WQCO`S#6F*dnW97UXId&iffSG;R3n+\4WS(^&nE#b)<icFKEMkY_XJ
%>pgr&rA%M?OiR+cDBOTZKWRtiF%mZ$40FGG%YdAOPE@RXW$+GB3+*k;;511Uh(1Ik26LJ&9gtDe5S!;G7n<\>Vl+OQ_-a:E`ZBiM
%37>pB)=@ikJAM;cMMZNDp>TF<-Z1Mu5[snI:N+hmPTFp7CU+2IGq*k&j'Cd&C#m(LMA0`@@R66K5iF1o`4N<im@"fqW33<9fLs\j
%E#'b7l7POu<LFQ";D9HkK*I.6[[X(QD+X(*M@^Kg%e/0t'*A>?G$lQG3t[+1+f9tTZA.u083OG1e7BegO4N@%A&GtENe*k1VZVW#
%iec84"0s<@C6>)U]A.Dpl/NHf'nLI7"(OF8gSqRn]-@Cdl\EZ#KS_#e5k.*U`<GTg_><nmkJF'0_gWc^8(e/IWQMDW^EAP8]guPQ
%L8m\0W%IGQ,$><:dcWj(?Vj(Z5!",e6s\p;hEHU)14e$t"6=440d&s\>73h&%8kl'DLu+f>e[>rYsD@'0HF4T2aTprU9`EU,NNS@
%UQXqa`sfMI/X.#hc&aI/-Ea[;ZU<;\1FcIM%$@S>>4O(]]X:/1L,A3*[QRBTX'K:(>+k&uLk5Cch`8UXa^=AprdcHD`]!.R_sqIh
%5c^WP3sLQ&2LB1_/.s8'QC0r)R3YiS4VnhASSXIIU\EiP6701nD>q1a&uEap1i^Pa&[]LqR^Z>>lHLQBIE*maV!B*?Vos^=@0XAo
%Cq<l?>@/@#.eW]$M1fEAb^O?"W1#f`ZmPt;@W+B>j)e48J$^iZ^SQK*7L,\*cR]b:P+0AbejM6c>A*32M/kIACf&GPPcI(jS]K4H
%fI0f7%V'MOh&7_DZ]r7#hm$)1&>nC\\M[=:rXtH[GO:Wq$,<3Z+)VOQ[Hid-d,)$,Y,27nhY`DoaZ:oopYN/Tf![W7]'@jK=W^o[
%iJ2Jq7?U7_Y35N$eILe306G6B=m\#faDWXG,O4?\h_A7:b=P`b3,FlgKD3U`dS!GccgTP!Og;8'Ube3''"8?Kh:aCr43sFO@+"k>
%eY83[lY2u\/M=G0ZKg"YEKOXHpC3J4;rc:gZANQbm)X8&`AAU[bNCQcKL%\9iPTuPck0&k-+d&b>BpZQ#eC?V9r#3\m7gG3(o8Wm
%7@VK]o",h`h/au'_7Bkdqp("\,H-cA;DHa'@j<EgH]$(OW/$c"aQoh$<)Pp1LtAb"b"8l,c)/9/L'D-kV^kPD)]2:J;(CXB3F6>'
%A\&r\U&]'_<JPd,rAfD0ih05>*N?^lib1[n/i0Y"O?eD'm!Q_)^"pm^qFm.jEl1_C&r8\Md:l@UBr<u0_kFe'f,Acg;MsTpRnIOk
%P#>@S>-GJZJs'A5HW6PqEnXYA)No^5XW9aXC0!(NE!4Hpm@>Hdh7?\n4YT)Xc*.>9M2SRG@?Fp(Z@'Q;!"Od_dmr1iaoA,r=!>nZ
%G^0TK9-Hlin+pUp;*Zpjo%m.VntTBmerPF[</#:11.5"H/Rk'%%e1)PcNbAk;C)\?<M[D`X-N1Y8JHSX)\NJXqb`Z"..TW>/m.,s
%Rs,Y*Fa&5*Z;O7A*NcLD*hnb_?G,taLIaG%.p]U);GrE7[O@>NL5CIV-*4,F]ntiJ`$W[67'GccP3Ns#?3/b'$!%RRDL@)33>/cl
%mZl`j]cO%YX+]3Zc.;C\Xq^(MKM*E0Hs1A5Co>Yj*@KQ=>b51'Y.Nu'dA"Uqc,ZX6pBX.Ncr[YthciV`ZUtiPEaaHBQMuUam7Y;W
%<:;rRLVH&I@eR6A)K*^eXcY15DXuo1]pra8P^BCaV%O&A?W@Lf&2*6TORr,_.ftGTOg/I%>X3=3N4*9"VVG2Mj#WlbHsro+3=+=^
%)d2!`"j]':]?e!&6r[:Q4_+U44(Y#>K^b9n-$)G)_@`8-ES[!e$J%m\6H!2QJ"3+]L*CZ9Ve$I-No46I!EmZ>Q:kJA&3aa1:0so;
%JpLP:ba"[d:Q[pt>*Z7*fi5MVrEYK:K5O2P*h`tW!1K:[=b5GBqYLj*;_'7>DWgr2*s11\L:@sT0]%H,M4WT84lWjVki47*?A1D&
%W.Bg07;neuGh\6O2bO/o$UhQn"c*669"U9u!GL1l73W,"H@.1N4D<sP8RXomMpB"tlCQc_R4ZKSU#jFnh'+@Kdd?Xc8<-X[."/\g
%\l7[!!DY(uG#qU?OlZXEBJBjiN>[ToQ**Y>OiRu+k+uaYR3;lf6f+pXh`[0WZ#:uf=:PlY_UU!]%ciC>N^hQaEurgoD/?W<ND5?:
%4dIeC,]4X@L\Z#i?h(iZb^U2ag.d+`>=a&EM!7FUSU8QHBqe\5.a-*7BHR)YMs&Eg,/(Y^IT\F\L68#:UckPfO;Zm$3b.i(=D<8t
%na%&kF.K;W7%*32iGG4R&f=DBRicK(hW!T[(JSsZh2%+`oU/o\k+BdfP<k"U%r+9&)"um)j/?1'P(Kc0\g3BhLkbor\lNDBWkhO]
%/F#./Z6Z^[_cqa!-BCM,7<F!JWFsiabW<tU"o^fbU19JE>W-A"F_6M1XsI:+Dcm-33B>Gr;KZH3&n;+\'9/iO.=F&A2o)6O13$'>
%,WW=Sd8"N/%$RCeo,(`uOP8=LhV*;K6p+Gi/#uQb=2f$13-,4\U.i_<hLMohSb4<[D\'\q3*o;9K0:W9+dL!/8m+m\_"nj9a*IbD
%8YSl0EZWGJ['&Eu:(j[4?<Jc:Jmql+I+XUnL.H:a=e.0>9qW@-YBqKW@]9oGQkdr3k2b'Zjl>Os5J5^P2D:-;'pV'9/'D+dR$bs&
%^_^::)QB-VMB%'SLW%1U@t_u5aE8*iOq_X35fq)C/#b_rGg//mJE5<UGRG,?&-MM>2k<KH6T7R^cg8*(F&SmV&AKUp1/#(Ur0DOh
%^j`34GA]:#h^kIfbU9tiAR['-&mY4s-V_OGmVB!E_T7OW\;sWV>.qC4g1ds4c?B[_9G<V6iaAbD$mW#\b*Z&\EgRgtIeeB7e!"$o
%X\%3sE+"2\e?9k.TF#Vtj'!trW`;YjHcRt99[+(Gh?lcB]s-bteLX_bB!4OI'jlVpR$*#8eK0GOTlYHraVF0Q*:h+rR']\nAtN>S
%L)-Ed3"q5#k34E/35dp:.0pg28l7.kc7k>;bleGq'9;rXeqK[_6J"Hb8o4?rhZN8#<4'"7bJQ.Y=-f_q4@fJ*<3'VB,YN<>5jI-0
%\p*PL35<D-hYMu=Lb*4Fk/l*`c%ATO0Ks4Y+#R83<[Z0.oICWU.\jnqcqal^Xo#J2)`p#Riq=ZBlmci@d;0/qc8jmcbh!jOTP2%H
%SBJ178P(V]RA?CjA=0uNA:kM-JeHGp>8MmRW2U6I?2Otb'h%;a7?<A;!@ZWXOC($D^!pC2o"r<D^=9qtO?e=]IEkm%3Oh@(l5l+'
%S(*(R_nZ_bJK`.)@PmR;:h9B@1gbHZH;.@C[^WH_c"?9K$Cnp<]ZVV<l_=5PENC`'BH.&bJi);LK?0,lC)cNX^gnkR3/EaPe_r<K
%cqY8["?hEqjG0kr:bi&0Cc9\"a9j7EXW(Vo/t2('cQGp(dTJ='7!25cNu,S!3?*3ICZY:7Tn2qsV)![hJl(MMls[KDP;J^fhm*rL
%AH3`T*(P8j^D'i^;J(7@YE*e$(`1gi*d5VOgR.^r:Fj/uAFIT^JaC,?NaKHeT),I.)at]#Y'!-6n_$-O6a?7<V.j9[+@!4[3f;t:
%4:>`d5o`D6Sg_e8G#UgsmtkJ1:kkCOeAifZg!+?f,*Q./MjJi+G:5<W6(t__Zb7bG(74`N0oNhS)Oa&n[MbMN(2\HoA^>3J0:LKD
%4,'m&&$ai:E20Ik,b%DN<1dQrSV8OtPI_^>\Moe)3I$'pSL4mS"j7/#MY4g)m3\K@RY!E1h6J;A#m>$nW%No5\@R,-7a<RE2q<Wr
%95[7,,-B5PG8m8eI"U+.\<lh(*e*FUG3*B.Nj3MSbQ:sQ3p;3#%FSn;W\>/o_:&'s5*b-Um%+g9@a/P]lSsD^I$ZWE)s[NWOH]s;
%V:n"M2Jk?C2)'hp\_<jQ$9+U_qsY&e9K\23FVuRAVp45BH@Q`nQMT""$6gt)W]<9gO162(0MmP5=<^c=SQVOB73M(2H&-YSDnOch
%^MFb,RX)MDk.&^T.`J@AV.56:psr2E7lI&uN2#GD4#uf0CXWlBJFTl'<m3p&QoaHD&U]$%TheF.A:(dC.pk%]Y8'>>opK2N9MJ1_
%2K8"fdI0=HL!]oeR9>01BQLN84%rnkU:>l,19<<$1=as[Sd&pD2@1+N&t&dM6Vhl5IYo/(6t]Zkn8NZR,MFR]bC]56dTp6KKOn6S
%UBD<./"o.([(e[<%u!^.Mcc\TnPt:QoiNF7M@!e_PIrH2N@R*@i92V;"K@WK%u@t(#9asAnAH1BAW)lg#,rWN152O>Y.>h`H&'k)
%4@@l65#"=OE>BlOeL'_u72k%EW4@&`"qF_8bDEct1jI]o8QU4ZX9lI<F,0>e-'r_UU(6J9,12=VAqC+,5ehuGM>k`D$&ZtQgK[@!
%ANEEj6p_%PlgC-_KgMm2`]1)H.S/,B3bh'N,.M)r+2TcNb3%4?:^Wn2`40#,>nbU7'lu:JYc=;<gk#r/C>58*YZogudpR6Kl`h`q
%SQhST%#j3\m:Tq?Bp.k=b#[9?.0I\j7K*9n!mQ9[NL>sf9u<Z7Or5oHW*D`#>RU4p=]:^X*!b_iVGLZ]@JTHA8peu_VZ(B,LqaIX
%9$u(c4qs>+_=jO`aujoc(gtE1$5suJ'l$%OMdT3b3>l[`.YfYL=?Glo$:0'u9cR"3YU/f(NFJecV1^qH>me=@iJp0jS8u/q`U;0f
%GC3:<XGYB9I^E),3Cne\hGc(66(3T"_%0;2W6k2EgkmSC1$SLYPn([I/I>]dgVMAlp?&<Pb1`5[$[-*E^2jq.@VM^"cAidN>8$tu
%S=h'_jRZ=\c2+V">"?BjfOT>c4-UZRCSpWT)t2V%:ODgEBGYFZO*@G8s"#IS,ad9-Cp[-L.S3b`?.hWtPpeW-V&KiE)B.O6E/ol'
%2PUhJ;Xb\?(Sf1OdWGpe/=&5W5sYK14&fUi40IhG+t`jnZD^D+SY.K./]j=]kV_BZEZDN7/%11iN^/Zi34pCa?\33ZaX#!fW^8Q%
%\cqU$qBcR!LCu%).U<P_Lb[^mS8[jd^fZ0E=qo1f=&Ti?V&*>ai6M#?Ke@a*JB(9_+73m]KBX(!"QP(9IB_=^d'q[=%b41m0s.3&
%<dL!VDD'f)l*TJD?dYl9qG5Oh2")@SDZ0=5IjKi:;nf>r3%`g%UQkc`-ZZ!jDV:"[`DMj_2CYnh$_9%-RZ*7VR%A)Ub)5I/WY@IJ
%p>nKNTh.*YOp;#9cZ*J*==-T-@Eo-#=^qu*i/CBi/UjX?)TSNB3CRJR@ES_)e)@7GZK6&-BOsX)Y/iOTC@drKQMd)P4\W7-@HTC^
%c]m]Y-lebOC>MY<9EI<b5NJ2C+OMY[1lchH7@UN1ltTG_A._YT_0%\?N.BJbo^2Q<o[fp9NZf]4?]h[(gi2Onht>(,%@H/A(-d@!
%-9/dlPfbL',nFOqCrqYZd_..=a]"unXU98d9k!r?A=N'M.&!PO<7;)YnjW5F]<sma.nKsqjMnBulsT#joV>]/6Kk]"#8o'E"DO9;
%lPenh?qV%U^M+n?*cHJrh9r;8]s4Q$XnU)c#dfp?RWMG2%34J3O"(KHhcY;&baKDKJg:t/)p/TrlL$"H?nK;e63X;J.gc\mjD9gq
%Cfb15et`ua;^WoaEu<,ogP,kGK$=56rl.dC<EmD+9]6D9N'o2)lDE[MmdAgi\%#oSGa+.fQK*s/%4l-[2V9<aMmYo";$:uC/hHm4
%pW4G]N1X!4E4=Kr^V)[L6HAF.lB9%Y4\('54UUii8'(8h0F6UA$\%"oXDE;PlNkgf'`X1`dPX@'lL#EpjuJb*Yg`#c7/4l;@]i^&
%--tg[E._\%(U4IA"!g\-PbdsZ:(*SWftq)Eg65_WNMVdf=K3NYhNcjIW0>OmF.4-.hoQm;0OW.1[uO9@;*4iD5+4m(/X;0uf%1l2
%?Wt!OA!;)]:nkRfk7B\iYX4rL6ug>nAEV>i(ZPjd6%h,T7Dh<_AO=;Of5uQVBTe[8HEBYIJMG@;^<gXQ+Nmhg5=3'@G^PkRg"a/t
%rmaH=.e/.D>EHMVKj!p;e/$M/T?jRsrSt(TiUu2%M\=uuq!T20=kG)7g]McgKA-E2g(An$8.7oTr"kHdk#!;:g8N1Ur?XmcLOC3K
%,5qSdgppA]@IPS`'ie$741oAu3`N6Dq9>'P?M8_-rZFgA*1+T@=6e1.WSH2fqO:G)5WRPt=]0*#oKbdRJ+9SiXo\@=s+UK%o;>rC
%FoC-7^]"&qDnl8n?iBZTs)7r,[s*/rQ]CsqNr,7:gW^gB^]""ImtW,ps)>PB"gYi;0C*!Fn+tpkI?V)us8/;cqu>@+r8pf++90VN
%]j#aUWWa,H=bh%Q206rM2WRY&'p?oY(D<,QU3Z3,.m\7_Ha]Y$=ZsdA(o/Y,3/LD]CtuijAC45rKr.`F:1bcCq?U65?*[\oOb7nn
%=oV[YH-9Gl$gJ`CUU73-*KPnVFtqAb4B6s\(VtBS[XIkbR%)<#,X9u9(cMKF(R$d/2$,$DLjTf6R&*:kKn(OT&)s0pUfos,2'D>?
%;@(7O=`e+QICi#:_?c5cKscd@\TrCLYdU=>O^FQP*>Y,MAuI1$U`r\k9t/hOKa,AEf7k$DeVDRCQ77mDf(Q%b!#d0U7E$?I<1?k`
%lFCRaXRX0oGkqgP(n&SHHm.KF4@9F=r,NqXEg$EBP5[T@m?*V)234ra#AO%UKCgPN2"(WbV/b4;rh87YRQ5J7XCY>l/T$ph;OLDU
%:5;.C/daALU/n7`S(07[[KdjXB8mlO>.^f1L(?OYV>BHI2'"_ds6!a8=H/bV%L^6Xn>ahQ=)tWF2FI3'SJb)%B<iScB'e$b/puC%
%@<B_FFmT._9#o^GCFG+'a/?gSRNuZ6.`dt1_TnN&S\:e@7S4@M8MN<TM?9o56n,6S:4^c*pi'6DVU:Bg`2L0M#\9KD+@]"dJWbCk
%Q0D`3M.s6,oN_,rrcpDY?2'75G[$57J=:Tu>AATUC!R5Z>J8`T>3&t6$[M(p0Z)%F(#CD#M\9+ZSjtRbRMD-aL/tER*m:Fj#1oG/
%fuH)nBVLkWSS"uK)anG%Y%tYL$``Y<\PV+U\f<u?e@p4?1]^((.(V_FmpbN1[O;=CAaUNogbBYf3k*et3f\J]d1luPGF*X7\R(kC
%q::TZI"-91Z.9H6=B3/Q(B6\nj4+8^Rf%p]hZsp2[h0H.bkO)L*^?)n?.foH<pi<$>uK-=5uUseW<]VLnY&6J_7)il?862!,L45Z
%fT/?rRVNS#ZYBqL#"S$'pnp.E1XSKEPdX290f3oIYqgEuP!H-8@7r5c.b@Wk.c``6##%B=GFG@bXA$23Ie?VGCobhSqJH<N4\NrB
%ipS/);kdO,8L@cP3C,Y,IW"#:i0S&2]P/mrVQDXCLlKRsB=?MhMQqOp0jQL'IFg@_8?u#-!B+Tdr*<i&p*b7ZMW&MnZ+'!%$2\%t
%)UDUWF8bb,%/hiAY[?bkT6J?S9`".;_g[*c1[EN-@,J^K-HKYK'TItI!E<Ys[GK?>,LBA?&b;Wmi[$*?;lLD\JV@fZ$h6BVL"-Su
%>f\!QHb^9jf/XIu+>QS=dJWK.T!LN`EcSA"1AWd#N'3[VXOBneRG!q[AR`H:WE*UDg+sU]T!H4pFK2$QYj"K@ME91o/A4!E8$5oX
%,F@'b2'U`&UQQ'_(3MK9!ht2Y`f0>:8li*O*aau,LNk5,$I-ES/ae$b='E$I'k^fR!R.JP[2l'd,a>SNCTjG17tPR'54Ve88BQ4W
%&nm7@i,f_2dNUdnRdreNE+)>X$g`F*:k!/mU@&5?5Yr47,NO]oT<G+$Rf`i2Y(!-<(C35.AQed9W[D!d0GgDe"+2LO*_gu"g#25E
%Bf6?:eEFJWTW/Y.b6TNR<KS9kRti6eS.2`>RTd*?TdkQ+>5flg'3I1#_W%klmHn1Ja9H7@4*s'%Hm)8cZKZ1DhbV&P;X0gtI7JB(
%2YV7T<:%NKVeT)T5IP-tk-FXm5Z^,qrdr6R]etnHS1_P=08d5R]jtPllfg&FA%ftd;EWju++4+3c&,l>n>0FcZg#;q5L:I!Pu&W.
%^eY=DIaYB?[DST`KYp80D?REl@j'<C**!$n3SJ[>4]+p1<PVU]GEB5%<ELKNKiZ#4d$"VXLIH$##YMI16$#gIYrIQ5$>dQ.9m5GK
%LtJu0'QuN.Vd_37#dU7i/<YlF;S5P7;/4J:--bSjQU^q<85Ykqo`f/+eEhuL7\tbiIa*6O'cFiYeC3sTi!5+Ed+kO/Dl\/AP-r:i
%g:\uSpnZ&]22d=9c0`hW1Cb.+JpL@t*TApk85O.;M6@-do;!+T?31hI0>LV;ru"_Pb7Z,F@M2.<G]Pf3I5Mh+,WSJ.I8`uePnH&7
%P@dYB@1Y%>2T7Nf=.jlJ-uqnH<uTDe.^UuPc)d()([o$E&AT*b$_1LEY[\3^VaB(:cre"[^jYBXSM[!OUeu[W$TY0/M2PC8I_09F
%MF1'HVGZR'#iQ0KrhP[M&t8@\"C=]'"8plOkq@&gNdi`hVTjA\%gHm1h1*q(s-iu%n&V"UQUG(Y9&M>R2`HNN!%'eA^I<#:l7DYu
%@W\7[;'`'u@Wt/\$6Qn[ZASuF;L;IZNp,shc8$K#>O3VVl\DWFaDP@0Ve6c4X1c8=\)8G6jI^l#\eSLp2gG.8lb8bd+aYl:9IZsf
%-),]jf!5>Fn,C8"4'deI<..b.g:E'_CPkYN`6Tn_8E88hbkT2=Wj:56E"T@ed!XVj/]`IZeL#IeD3(FTEbLJ(ai=fnK$<mT?B!<n
%!6O1U3dYg'"l%Of=-)b%)rQCNDjSe#],HJ0DIG"!OQL'%dD(C)F[]l=V3u!q]tB$^7<.HKGgLin[HB^2J0mII-TF>d0bU]fl(FOT
%I^PSEmV8UD#67n'#q6YKXG+1@K!+<,B,#.s]-3)8;CH&s"OL/ZBYjOBc-;%d("Y<JO\:nNN7![9_b>G]>'YFQWBiK76-E-k!eio#
%RPZ#$iOU\^&R?-^CQ@FQV:G-uEjc+.>#S6Y'JR;X\EbZj+BMBIlq))<\roB3_LZ&+VH#(-IMD#&.r6oWcVqCq#9b\lSgg51UB<-d
%0LS?N%j#hIU$X!8O-62p2]tfM>b.YQ856D2_RP"h&b'"4c!lt,UK6F5d*^V7T#B+-Vq:I!G?a*fb9cL]D1^OC6)!aMPiCFD8hYc+
%O`Qe?*O:Ck-I4::A0qJ4H@]e/D_VS._)&K&b"[Kg0qM\)c,#o#F>9U$80+$?rL??O%4pFiEZC__>N:`ddpq$YMJ,ObOFi+n/m=Q=
%4'.3R>EMS&;Gc@%*j(<,I1B("[DF9;K$5![?WdC:6tM.[QBjU=h:.@mPZ3$ni`@Zq/\2R+X5$RX/N;NXSD^*kd2MR;=GR<tlm0RG
%Q'5U=_[0ajU`S>!6@D),VVQ@+"D%A[6@`'9iPf4/q("DOC0>+W$(c6Q/_+-h2VLWcnA&5+9$$mR_1Jh,1mTBKm0lTh[d57CAt$-j
%X0'#5U=M[aio-$i*9;Nb:TMr/p,KGM-P`hjV<O(R#We/,atGMVdN$;pVl=NhfM/102*ro0.7qLbmk3Gh\_,i`?Mt30Z5;Eaqa:=G
%eY`#AZG.uOBU3H#@.U&?ePRd<VP4r8c)t=TQr?gt*%Wbs2-&Hd&,gE)EV!R:J_Pd-f9s6&'YVIjOHcf$gW6u-+MVA;5?/te"j*$H
%nlUu<9Y70A08HXag4N@tEcpC8<XE(AUQo4LZ@8LglDb:%jj9*Sc),?Y*M<O-El=*5bCstYSWM!-d[LUbq>P(aDOh6I5&\H3!cP8J
%bkN:Z41ZFYps@W%P^)a?+d%GTYi1RW9chH7lW8%7`s(kKHd;j7HW?4I0<82T!im'4''jtCZA4t<`_]:6AA(;"?*<3?@dfCR'_6:I
%FC!4EE_(dhC_3Vc8Q)qe]+Ds5?/GE1<+i!U_Y-A09dgj8=kr`ec'/rn[W9%)7QpIub>:230@,"@jl&K;<sdb=NlP\/\"[Bdh+p@_
%G.D(nTEdR5jfX+5dZEB?"8E*ZJA7'#+8#=kRX+io?M)FXUu)iBK#'sWg\AD0`4A!mp*!f_m".:"QNa^6'&LouAZPGu$0Wtd?UZ#Y
%g5U7UkilR`hGSN4$=_/m/LF!HAeB;mQ*bL$)%`#>OmOtm9UDAhXraL2ZhfEe*+bbQL%#*$G^D/YCe%d!3/g<tVcW,L.O::>aI3rP
%FSQWT162APeX;,K#GDBd0m]it[4Ze@QHoEZ.Mcl</+M^.6VqK3X-eq%RO!S9^+08*6/K6oYg_\L*jMZWMbT=('P%lbkM5ej(C':'
%i_\Jo'-pT+rtACePXAeQflU$!*Y>`\B_dSthb-t\4br^2!aD0XA^?XpFN(G+\$'2dn5?)?6&B^fbFPs0ZFqg[!e72jJJCKj+U)cG
%I$OFU?m?OoaI7=BNIng*9j%u(W-ZV;XJP<>"6HK;;->\W6+IbB.jBOc.H_IG2q7DUhG'==BiHpMVi,js<M+]_@C2J+%tYOo!be&J
%6;JeeME9nEg^rJ8npmL`rT7"M?XFk3cT:]_r@dJ<&A1W;O:rqmc<Js'po=:T9UQbPWK+5-.HJl&M,0qilur,33h,Z:;CY(gO+,e.
%Z<3I6k64q_E1nmQ!bR0tI?D[K#*4.f_hDb)Cp)#sVRTZS=rd>'h6T,-]]n?@X(2JUSq.+jaXpA-'C6qS^ARhJLO@qZJ/DXPH!hR+
%Mp_SJ&gPE0.Z3f72sjn?+0=Ir_3Mc=eQ6_#mLbV%nZTg`YkZq-.hV36CnRNR+qV#`]%`qaQXdXt\U$*YChM?Jp)1A;YR<o\o'"I0
%!)^'ugko/jH[*[CGlm94=tt\l/7em7oT4T#<#'^2"%]b.@;,ik?8BopqX"'!=+9#">J=Qs?)d)GI,IoqD1YMWFKK+HfXF"6gR@<Y
%#c2)W'Mn^V"G2r!6I@Qj*Go4fi7-cJi&$DYc*\99e?U1n<^8q">i9<qS#G_!["G\a])0HknQno+U1UY]7pR34-<[8F\rmHIJURt&
%!tn<S`K!#?rU`QITB(Rpfs-AeA'N65FO(YS)"1aeP3_=)n)uT4Ar13,adVM:etYs`a*N]#ML@Lj*:id%0!D!-_7!=kJ:bWj"epc>
%G("?Q5Q@<*76@S'M%4nmN$\'TXTai12RXf;R^QBX5`%:,/m6r-LaTFaRS-]H'QM<65X$N5ci0oO3Q:-f\(Eq>&`Y7a&9C[@i+(If
%g)NbJN/O*.ZDCZVe^l859fF)4'?'j6;<'fS:n;.'cMQ@=RYt"=7NPL(1U<_h@*/iV:ep$N%*jZmT+AR%qJqXGh@W./bIcCF+Jfg5
%d$YTW7(0G<-0I1;39[oP%@FS4a9e)LBuU]<bFMiMZrL<ND:7tu6bBeljLDS9l&(^9,+2*q9YR%!<E!>NHt>83Tlq/[X&\/'[.V>r
%'W%<h[4;q461Nq3%kp!kGdLgk9EZ\)%LflHH3n&Q]]lf_6!G;r%*P?`ji.2,*6W`@4D$V1Y4%DqOg@#Hr9W-!;!fe=e(M0`V+J0Y
%5)s6on_BJAq3HX&?Q-?<bCfV9X_fuC1kHZ<S6@#/=kU1:!2Vr^aqncD/")e?Fk"J*+`p(f^Sb0kKa-$(,KX2,HB:!IfbAK]5Cl<e
%N_YOGS^_1Fb`tT\K$Ga`cSd5_[p$.bpYhhY?QJKgG4(l<!3+s@N:E)h9HZ;)J+A4@T-D*&%/j/\m]k*Y1kjG^3(@/54:7LpA,K_U
%M<+`P@d;X%P`d'`TIb`T6GG_e@efS8IT?3f]0I&QlqM8AJp$I4TsR2C)_\-1Q#=\*fE4am<PO0686T;BhP0:sPkU7M6V=l"5TNa;
%EM_YnMZ\L1gW>p,-iEI;Ve1Mm!F1IZ8@G6X99^>[j$UGM/:d"=BmfD-cQF@]L=EYmAi]_e?sBCm%88:c_E+SCboXGI\"(<Q!CA+[
%8[0L*+PEZZ.;Z]SO%%k7pT?J8A_`-fIS-B"7ak>3`]aan@s1PU_F1K_n:2YX[GpDQ:n7cL5Qj,0/-Uf>g'(Z(?&hC?[UY\n3sl7V
%@$"$=_EE#SJsK+Ol0HGK3'm4!*KLa\M<\BRcls-Wlj#9L!FF\D<ZTiHND7#-&Q=sGnTeZUA-MH/.d5mG:mdndUF8RL@pD:@fC)Ou
%_$Ca.eCZ%Fld@&9/!1uFEZ^_m$^#*J-:CBATiR#5L>4g_q3B3"=H\?WNb_@F^LK9_kQ9^4i+3[c\r6L<?R?hg\.f3TRr06^[ciJb
%0%"TU@i_iC9j8nFWiNir;K4tc+e]Q<9"SVp7gfhG131?uTMKUnLr\c$d2aAY*bn+O+nN\G:qRE,nTML=-.g+X"`'>b"&kk:S*YRj
%#t]M_LfULI7H]maKuiCPeP6,uQDM`4JD*RPnbOGl<g-Y5FDW7r*NaIcKu+@K88oAB;85'=<o=LUb'5:K&g`??&Gu&,^PuAfk`LUk
%+>95>2/DW9F'10[kts8socU+e?='bgg=Z3HX%(QVRWj(IEG19\@H'uUlD"G#V8_-Dg:(QEM:J@u0sD\2g*65tjpZ;r702\-m#hC+
%#q2L][TAq]?1s^Q(tG(31moahls#r01hdt%N9[c:gddPQ/DPK*Q]\/tGi/^"(*M"GGNkGO2ZDiSX_7pp5-e#_W6;\_:5fh(?;`a?
%^&D1\leL"AMDpV'f'!iu[0/%KZD!Z6q]Vf7D5=/<iZJaf79c3i(c*G?9-Mk@@J\$JLBJ!W6&Q&D[@^kKMF1+($]P'OeHY'%ao0]m
%]N,i^V+/*VM`c*k/Z\b3P]!Y;*s]81"11kmgED7O.kYKKB$7>03aR-79_Ka,oX_'OZZfQpa@4%lA<Kb29ibldrAX4AU>b!FFd#pR
%YC3Mj%=)+&(*"l`fEnJXFkX_8kXg+)24V=GT8!+b(dRrB]YqFTa!I5BY?M*1H8&e^TZLgY3]&>NeL&<;c*juh,Z&i`*C9>:4/4W7
%.=d>6P`%PER_qZ:Tk@7$!B1cE/Qc\?LY#BrTQja/l21=Qm*iEQ`tG=ecB=aT9>Ec]jLYR>+u4md$K^$9Y?)F[Q4$2GYa6T:;T&P_
%m<"keY_.GdLW))CDFG7+:$K0P^E('&.E)ec3d0KlQ5$$:[NH/@@=:#M08aNTWYf+ZC(ieKk*Ep;L'5:[p9_!e4`kFMb8-#$JiuNV
%kEO1k1*+)h7cnpC%lFgIqBPm2<$!g9lHCjg<,189KV,GBD.+;]l(2=:G0uaN6(/3+KY[lB>I5@#^T`KhC8&tE+\Hro+q<X]VU$g@
%oh,Ol2>`[j,1h3nk25]&0?d),2-qgsiSoTAr=_Xd4Zs+<nlca^c"$`J<H]rAJ*j@-P$Ul19iqmm:GpPn`/+T63Ja@e_)7!XX@)52
%+t.4\en/JIbK'q9jW$R&%f5'\E`9@Sb8LEW0+1`R>K"X=\>S$E-9SGH.drg,=Bq$i"ZQ7>C:O-_pS<"lNpaX\hsXiCKe3Qr04Q5&
%^%R"1YMn98MsQ6.Lg)1hc.FF-Xl0n-S#4;1re8DC"aC\B*:&=T&TRiJNPlOD/fN>P('^4Y,3a<gCo/fC's?#CB@sgrgL4j!Q*Q-R
%hkO?J"p6ci6-u>;=9lpg/SkXpCn,'@.gC:*;)!O`1sBt_oW)/maV.7VY?)]lKPNb?qR`'@Ke@]Vbd<*XD'.*-!Rd>mTEW[T@nA+n
%O\R6ZCRha`I,g`c<["_ap)A`*]YA]sB=]+#p_ga9U3e=r(q1=b)mK1h8k3<g!1/tc3b2"8DU\(4S45_<\RqC$_SZjs,05QbF6XEa
%aI.1^9<Oa4nPP'CoP0d15p&1TE?KNp<mlEs^F/Y'D!O"ojl05&Kin>1YMVV6P9RDpR&8GNRjlckd`ALaP!;K:XQ,e>B#\;^"-bO1
%GL=]soYH7LH.&!Dp1%<]qo=^Ha,^OOd#AjXXN5)cEp5;FUK=?0j2qrj&I/H<IWKK/D_Bo@k,7UsGQX,9AS$!_EdY*0j(XW6N&T6?
%0qb?S"urHJO6Hm2/]N+6%BM6FH^@uj+>&2R_YU=.8#\Ej?M8Z77p9OJ:G>apH5$;K%#BsRSSlWuFRmalNTH270">'K%&r;KD.RdK
%oga?lpV6=ANLOm&>2SkVfXT?+TK$A&>m`+\K0N^hU%Cs#XSeVPRC%<N*+3%FFE-Z]Y]l^m2H\5[l4\3H`N$X)%s=GI5BgBD:H:L'
%7taqeBg"ruCYBcN?Z"7k9\5;c(i(7EOXsJu/?dqg+,]/WV34mP4#ePoVt=1`R<gZB.L2)!idB<q#8q-17UB$Ko&>a%]J95P$bc;q
%*Y(cig.sn]\UQg=A"3Uq/1*+\Y\5f]PAZiB@`>(uVa/[%Y(9gi@"7NS'#d6-nYo@EEno5.cj$4lZ8iu%SYWdM"N$,:M>C!JpbMpp
%T*pnC$&!:U8_e>);BhRJBK_1PZ+Y8`YU,B8"%^WU+:#+'8un1@jO_T'6gm-?cVf<4Q")?IDOfuHE"ZGI!->f*KBSFXWjpak-t*I=
%Mb28V>"*tH,:Y3nGF%B#J.#Z[bSdW)S[Efnr1kb,0]HJ9lWpt"Zi,/6B#/q(i[.kr15fNRpBM?Tf6Mh8'<=q#/254dNh?e!Yi7lI
%[PES>o!<'G,oB>kU-(@DH^'=\H-2d_W]UJM1_TtgZlgVn"PRZ27);3nY`ZrSL-1!Z!CK+?b,3qK2DK1LB^`3C;OtecA6><,UQR5=
%rIuE\Le6St2q7P^"MKDjS:GBQG#g1IOY&lkDRF3"W_kYZo<0eX7UJ(a]!NVRE,@GEN"ouK3MpS_ilZS^g-nMI'8@`7'e!-;gINRT
%_?`9!o>`eK:WeuNnmUD9b1GW\6HRe\^+`88,q-f23!$m%YXV>A/&g_/ePV?$58)=$Gql@>h41Y;6^TI=+--.DDF(4WF[!9`"KYaR
%bG+Y>Z4'"aQCuI0N:6F,m]3lDL&pT7Bo4nZ%Lpc*_pXR]>5$=sFOj_MI.<E<6=!6Qq4m8R?^")QKT?X.m)-km(pe_"8o7:r+lPoI
%\TN!#747knM8p<&P*B/o+12k9.s=]YdgSfnFQ=EOhc$Jj0JTj\5K0)t%72YU$f_;hF+]kIXbY>M!/=CG0cis%a_'(rb<u)$;3sId
%d`$^#Ap63DM@#i:bn]QfWhEV]2F1I;5ORddd5u'YFh439RQT&\S$);rQh!Bp(Em;*`!GhYAGG<OG[ZVU93#;@WTL:Y%YL=]9'crF
%nis_?MbFT!?Y9M:*^9JP7"5M$RRI\'UdX.3<[t,pU+sT7GG4$Ic6al;a_-cV7W>[?\ED)+.V/AfO]s/0F)*"E_pVg3kO+RsX@5,k
%g<-83)1&Ps/Y(B!*^G(c.p=]4dI!_^4c833WbqOZ6[r,Q%,Ns0C9EpWM5lQKq#8;tPE0%9r0fa?9hG#bWrd1IL8bePRn"Vhpu%ff
%EH7TsM^akcg]6-7pW@_a9rnGHPWVj/2aaIFJ<n*Dbq68>o^+cli>,g@*DK%GZ4e2l'32QlRb!'-Z\0('N&9$*BD./FQr7lgVCm8M
%PM>78?Ht=@5JGT2dgF]5RYaO;%+5/(L'>%PCfO(RicDp#:pXo)S#k_Z4bA`9Sd7t3:g93"E$<sj/4Fj>eqVnciK@cT+;H1(R^MOV
%:cmL@-2%rE4f'#6q;I8kAaN<H`!3C*Lk;`qjP78qoWl(W(-"HMOHY!gn&4BL&rQ8^\B;g<LbV9l8f\VhNROYd'C];l:gPdf"i.mN
%V9=r82+DH?ZGiLU"jj":@\9-#@UO[6c4gSIj,>`,a3"3B6?e^Jmk>.K<[)O<_PsLnU_16Ye(Lh51LdZlcckc]D8'Ypl28U*`6&dV
%Xlmd)3GMT^Y9=t6./(d^.;=mhU!nW;PsC(3@R&MHZ[RPVPh)JsE\%:CdHr)!no.XCI<J&dSGk+KTm?!l8+]?l>mc00ACsnOdSufE
%]*D25"Uq+rCP6qgOq:*\3LN&7^n]M>Q,Rl["Xf3dXt*M`!04XR!`E#@nL>8M.8:;P1Xm$ZQ%lFi\ada?@=RZme$ZM51*%DSCY:A,
%P(l[!iQ"-'(fUcY5$AZlJ[t_W3"4>)_2sS;5j\s'h0F`8KpO"u9Ec3gUeJKkZ2`M_T^\O6.\JK<A@0>@D-R4h.S)pE(UQa&WWRZr
%$WCFk5$GP-Z8LLLeM1);8Ks.KGWR[g)j]9DH]1@J)*dVeQI3Df9au["12-fnDkr'%3OL1_58PJCOWTF1LB8nA-:"t#i7b8S-]eA2
%?";cXNKPZ"U<<C6O\I\WJUSQ0@if%Im+]g\,CRA(8hF#=h'Ia`<ti9HQe;k.BV7?G.'#,n?0'>$[pK.3H^1aQEa9BGP,#JX0d4`i
%g]pd96BPRd>,A-E9T.Ah;B&obc9k&mXkVQ:V0YHB%J+>j8F\!DW2-)RR1iTB-F_S;W>)&9?NWW#OZo.L.ri<e_CY%j9!H&(9<U:V
%emT>.'L-^/"d<CCX:[BJ8qtnh(6t50MB.lCSp$RRHrC1UO&ZVk?WRclG5O:)$49(d%iN`ImV!4>\sg'BaE:LQ?/kqo!N@unm^o*r
%gIgEl?qsPNQHrLXN@'#-H9X64^>OcoZ1Z1^bP+=dB1c*n"md.R6-kR[%>27c6aX#G$C9:t2W>t`46A_\,t%H'Co2?$Ek;E1gN7Te
%49;nJZ\Unt]SdQgFX<Z?g,9LiaT\^I%SR5371,_jCAY.UNh@`("1$3LR[VYG1eBB"f+,j?XQ@1YR=;[3Zti-2'KpXR+@ouX"%c24
%`*uPr_HWko=VdOTnD.[rM4uI-poGt`4AUl,]VJu3]I235"GYD,Sj-W$C9.nRdPR@\5_@9@Qiots3iG$jlZus#7.*L<6*K(=r^kEY
%9SH<GM%l=,O:'@?"h>Q$T,&bZ]DpSr`6OCgpf_D8VhI9t2huIs:2Kn6%0Rg+C[]4@/g)la(\Ne?ljeFf4'F`>(A.fZj`Ne`Qk[^$
%GD_&0;b6Jtp_;%bR\iVOYs?lA2E.m<W(Dq\f03/=d"3q3WBs-K:K<tLZJdF+4AR#X=42Cc+2P/MDZka(&<@H7[tZ>$J5&@kFmcE_
%68V<1Jb6-2".1LX<peU@CCn/^YI$5+KGqh+d08qYJ^06Krfo6rTQf:Ip9QJ5i3;*hkB.Dg=G^F')VM&"0b+qA\>iG&cKngrXu/81
%Q9r6CE^F&28__C.T:"cSaXQc5/8tX%#4-%V/tO3\GG"S2BlNbX,_thZ6-BsG&eK:\/m,!Qi)bT[KlWNP$'8q(A@*1jI%g/&$b6Mc
%rsUFt'24bWh2!+""/*Xt6aouOTc>nF\tt&)7lkID@VMeJcqRE.[*Y>:SB5L^h[)K.8I&NK\Gh;kQs#jr#TL+IoN[F_`tlf1CEDj%
%81($)7RSsH>0#kM7h(KZ";VTW+iuS#SjV4K`J[W=^X`>t%6"BPf::-/SYkV,Y5'SX(HO0,\[:>*$Rqu:I6(Ehls12,h_m%e[gXOV
%lpC7fpUms($f1Ya/fP"GO68NP)2!3r*5b(H3_/=sfE6cKU!*:/<1Y:UAcG!s:9cR5W+\k-=@odQ-aT/Q4kLJ8$st=?fB.b%mSMgi
%[<Z#s\LO[PQP+6tXs]g[EL2L^1in5r:0Kr<b-EWq7,<5\3lnlGS,=nYg?-PBe;gbH-G?G-Y#L%7qHB4Q+Qr=0U^I!@W_ua/U'AT5
%.'HV?K*RlN3\"arH4Xb"bnLmbj0bl;opAtpqYL%KmZ%,).DLhmcZumH)6?&m_0SeDosG=ZT>HV/n#/J7:L>Wu25j!.5>1pKUc@K=
%9.NS6blSNf/l1E,f'Ps6ib#1"M5!qqbT(`'BZ=ailu5Scj1N$N.+h[-bbZe<?$\!/,>JOY)`5t9a/F\B7;meF=eZC)gaHF>O%=/E
%p19f0Dnp3=`%!i:*m2C(IEibOEm>b4Z6bf#TYpKR0hoXG8Y8>"+NG:b7?u!ACYQnKgD-LX-mN1FGiQ29/o&m!_KpJ)=O.D2/IVH%
%J7hkcTfs3"Z>64*-VNd23S9&:g`>_kQBIWa\:ILi`0;D9?!a)B"%Gqgd$2n:@`Uo.C($_l$X`eBIC^GIlEE!/rj@e9'g!T9[,NY%
%K1bA/3Rjj+WLcG$TLb+3T\NuOfb:F:CnMt72hAu&<pg5=a(-kCVVh53f)6?p)0T:5ObdCJc;$'n$WB;?#dA2&oJeO,jZ;Rtknp4H
%*E$>8\FitDJ+-gOq$$9`5pNi@;Q0^=6Gb]j9X_S9d;Pu+&3RJLK<I@3'4+e[MOQ<g-3F99l>qT:Q3c=:TaYkW3?Q'+5Vg=%<IZ.K
%3d3q`Yj]E4NDU3N*("[JhuWE[BMQNXXu*Dd4Gc1aDkeLodLXfALoquADlY@*=!4fZ+FB8G2>p5[&XWlOJS-rU(CoC3hte3KP*sDh
%Beu-oHmA9^(jiM$)HeLir.M:GBl)mR#W#1eK#=:,hVcAU]f99'7Zp'mZcm^2CrI(%ZahcT?.4B\S;KhHQCt)<3CJ<]T@W:"jss^&
%$.[0DOf&)g_T38^/XPT%*rumEVUC&.2nTB,5B`e0?i.E_$4lCW<5N!lQIB/Ti:=@O->8dE(!oDdR2-DTD,UL=gt=jU3HTd;:'t=U
%?r:@k1r6e%a3$cUJCY2tqY-ul-64\Ke7dFhgs@(k^QOC5f\%pkedkQOU=M/n0*,+fWc3OG[h`Q=a`LC@YAP%_Bq<PN$?Ih?Agl28
%p;uTt>$#7WH'n@u3AO19F7P5@Y0UQ#:mEVLj(K*Jm.sL/(13VI&[qM^5:;O;8f!]UVGMqNL+AFH`RkS27'&<3qi;BI$p2#RVPKoq
%HiX&j_r12$9`jdV8mU7q*taS#1Q"uY%,$<?[F./SMINF?BEOZ5jN((>E*$32%.6MJCcH:,K_<tbYJ/=ZZ.a8_hT+%/l4W7-VMb,]
%+-jifYUcF@[4.OGgp"(",hH#A@VQ41,Qt&,O\!(k8pHYF$9bKW_6ZnT:eG;f#bm2ZD)HS./kh9QG7,NZCX[TY1B1=iW!nT5!T:&D
%.4`k"?cM0.m%?`l;r%qU/*k8(0;CR1mWJGY4=s!;e-DR,A"YDtAuW0;fY*=r[WqQc;Et(+*_p8uS:2,;eGUZiQf0RL86Q&U<)%E2
%+bM0*fM`q_o=gqL>3#mert0SWh.'gkm_uGj?[D/E^%_-^]UM.,c?me0IpMH4T>ZW`)/Ku'5bX/h"Nh8c/'X/@@RS/P\'-<nR>>WX
%plp`gPP4;l?D_#%Un$.I`W9Rbb>__bHFVcBhNEL_3bU*+^)N``[BR9#nnoJp`aPu89D_RM%hYE&9sat$<%U.aHP4du#W%n=%;&A\
%![;$l-_NB$fE@mn'd9"\0of@X5_Pl5@V):RE!1Cf_UYcV*(WJ835hHr&kg2!-hnia^g60Kk=jIWQRP(9ZMpY=IY(p-ZIU5V!im;<
%8(LJ_Zls6<nYK3<rY:i.:4Z)5W'YBI$[U!^p2i\4iF:$^q/1PXE[>D#G12pIY@1.Y,1tKgNCoZ\pCLo)En2?bHTB%eM)6K!l,3G'
%ojd#R<N9Nf$%g/o,ghY3e7Pm:6m&FC8Mn"T$MG\MRIGT&1]&h!(Fi<\5'R91S!.%_"G7RROdp/eYL+B532oROQcof]_U:<[93$S&
%jjG!Y37.]K3<!?Hj"J=Fa"WI%#g%YdM%op=^O3?:,_p4ba:Sk+:5h15Z^6D8M4JcU-e1nt?n`AfAJ/0?a"K<#S&7+Fs)4_<;fX8^
%RKu$Ef+fsNXfghgVTRi('jWTH!o\:a5d]4f,>;M<WYflf@O,1kO@g-6:g)PF:"5tWc6lRAEhrdIWE<.h@_Q"eIdD-RopW/_HpOPh
%L>nEh!,pCW&)Fu'i-C^GI5_B[UJjV(<t(ngCDOYCLB843S:Q#;6$sjO:KV&Gk,:DA3tkbRgD[RtlM8MWX8uP+OWI!MX9Weu!NW[G
%hrWYr.*B5.<D:Xr;O'ns(i#=3hSi;i>hr@uPGqYE=k#jgf4(`DZ,Hd3cda^@(sNs%e3H]c)(88I$Anl#'n,Fc]--F>iF#"kTlYM1
%8-kXS:B`Q"g,Et@Zc&D1m?;4?=Dr)L7\1eH,H!I^[9]DSa/N&q$8i0&:T_*kiMX_d(Q0ARFDVr&BKgj[c(4"Ga50#C[T>*Slr/i(
%0-73d0>IM0^\k^OTmlg^s1J0mC^&5cmctt/qYPdAnmB--bJ3sN?[hU9S$0R)Y?ubR.MgLN>Q*+Ppt]k,^AmX#>u#TNs8;9Yhu%*b
%iW&h<HZ!i$5Q.e#rV"-q2ih>>p:&q.o@:=a.)eX0S%na1YJ.YpnCt_KGN_!,P\g+4Q[e;TrnWpUq>1!Gh7a>,EJr+,En+7KI.u1#
%s*23R90YIel@n=uHE2Ec:Rj%`o,#1@m;FZUqW>9=s51S?rO\hoGEJqCO*0*)qWdDHq9RrHb1iPCUm$L7Vp1Dmo);S%21<V9q,9K>
%\1#0C+SPiYO8?W*rloZer2Gn@pmgp;0E1Q%h`^c)J,\Trn%Selk5Y5UbMR^EjYt5Ir3$W3qqlkum?\oDpW/sK3D=pK5is'8Wa0mL
%&ReZ69ZXtu\D+`oAlRp;Sb>(@jl6J2<+51JL'JEO]-4qdQ9VckBA\>bj4&BbC*."5Dd1nJ?'KMYb\bhr)dW>CM!!.kgtZ`nb>%Qj
%p,P\g^f-NT`uEjCEO+E7s)#B^s7EG&m<:V]GhC!,rV(;D<81<s*uo-bq>9(J\abiCGj2K</=Yd*K:g2pnWIfbT5`%N3]5i;lHl""
%;&gK%BDAm*F>+6rM58`]VE)M2>Dl+geu#!8X\_P9;;%e7-U8Kmqr6#AN_>=Z7kj;2h;4EY7CW"RD`g1S4.N]O<)4,D\$m+D+0";L
%$_1DOe[KICC;'S;e*Sc8priF(^U^oNqHn^GdrogLYAJJ1C>AR?Ori2J.dc4kmr"KH`S^U\f3eLTG@,grh&VtLEVe4t]?9Aqo6$5A
%VYfT_QRD[$/a`6Hmqla!^?"1!o:,>Q]_oAd<cS,^@<03[<#<5tN<T.V)/,;3R>e\UA`2g*8DE&t2;;"j8pCl(JZ88G>Y@NLeU87c
%d^_B)?pbi2^uCJ^Q%q@i]Y]9E#skr(l^oj781Qlh;OhcTc]?,_@_LLmX_p&(Aja)OKXT>V`ToAnf_ZCq"_L7brst9MD@n$`dM=`f
%Sll3pHI/4H._G>uf0MLhf6SHpMhS5bV4JO""Qo-AaSYT4"iet^G$M&2-AU[h3Jj1VCB8@>*sOWP]FM;ZhGUeTJQ[13[=B+MNhZ&3
%C3;&m;8,>,_e;isAkEj-dVG*^]^hE'_6s+5@9>6K/9%/6"_i:tbu,\4(Ek[_TI1G[;43q'3#[)F)U/\_.0JH"2-GY"Thgm,1hMX=
%(A5UK&s)k`oNb]4W:EZ>1[5XsBtL6CEHqEP4OEioO:K^_J[eGg$D,empRlaNQm!+m6Q<`7JVZ0b$#Dd&jsP.O,,\Xgp58pXWrn):
%?T`VPf(U=OCO#gm!^Wi2c5\tK0I7E*lrR`?HAg+$),'7s#"NngFmU_G[m;0'Z!]!^jDcFhYI$;-;0Zn,^&q&Y-:(%&bu.DtUhI%s
%%[r]M52o/RLR7_brQ0><0[IYB)Y?b##KR[R@$\Gh.Ilc,T"!UU]nF2;D>P(-Y#-["IZ`olml&#dj`CF6)<Ekl>]9&<"3pBf3dY$_
%Tqlo3C.I=W]h^ZBF_:^3h.ul\-D1J+XEPb1ep+ismsNk2T5o"fq=N?Q:V6"e$b^rSP.'pF'8PaNh*TssCV%>)DI#il[a*9c-9el-
%:_0m]NLR!0M]b#VO<1'fQ!'qPjQb*'gYGL#L-DCt+2OUa*La#QV?\L@BQ(f5[>-/GE`mfGHB8'4e3n%'"mJ*P;J(;Q+;[5l2\ISk
%HYqr*K'MG?[CC)9JLYo/i%V?3TTl+[p)rX"/#9K>/pEm#"eQqWE!>7Jg[+0Y]r0DR4Lk83.'*'IH*0p6Wi8Lf,AH7gF.H1ZUjc@@
%$2mQ/CZo`PmH-csjLgg4]\N0-Oc)@K]R3.kXd!>`L^;B([k0:t$"5;`*iKJ/G+)??iED(H6[:@:UM_3Vk#?=@]:2ZO\>#!PJfL64
%<r)gbfs_P,>J0"JQf%2d^W?hso^ri]Atf%q3*tf<o3qr>Wd0/S!#7+FO5/m[HnrI6+Y,mFI(\4d%mtNU[T`QRqn%4B<5:eaqsN<h
%*c"!PcTfOSK^AZ)W+)p7\HrDCjn&1iGMBZll7h)N\]lADkBFI5`;Zbu"+$tYDoWX&R8a'!H,62kGA;SN[lKA.WAe`([s*,!rTlGW
%T1J-proSthDnc4qMZ]Nr?MCGPZ,_<73P;o?<)t_(5:X>A_QV4VG[:-@?7IVnJX=A6!G=<H/3YD^q4dUI`AP\JTC-4+RNM9dcV9p"
%6CBKQrSo@h`Vm'0F=3CM_YN\JaFCmD2%AnM`o,_0&Fm'sBp1buLptWQ2SQN04P"t*6bI/J2k/L6k:SR-19YnoHeWrBrjR)sXSq!s
%/*CDAaIbV^g+kI>h0JEko:>cNh;tp8qp.]F?A'_NT1`-lTD-+pXSM;_Dt!7!qu,\E)qjZj0Bf%1CutY+Dk$4PrcF>oRdWJ*QrgjT
%Hh:8M0]W/&\o#--o@nUSepd(eL!mipn"9!g-RSpBml^<Fq<f,LH^De,mlqVD^sRp!c\5qHeGD/C=nCJHhqmJ"pA<1Tg(;G=+qUWW
%YEL])*MkdMhq`)2$%:*'X!R3*=Spd"roqi"mE8>jCKh_:R$rk;WOKq+>Z+faUHii"dM4=VCkj?2&CZl]f2R1d1'm-J,gr;..]LtT
%X_^CPE4C07jJ^a;G%=f(q'"j975md#DhGS[ob!ZaWa_o(:d.kh\6a*7E:B]JIYRfA>Pn3jGgR[gmiZ/JYI2*E>C/eEdl*&so:A*s
%fG1P!`Oce0oL[]iD*$TNj6#'`[p!@r1t&b+,1T]b&5nFeZ1VMt.k6YuAh%MhGC(jtGsM5')tY0LjktFRXcNhp@EM68n4`?>AN`KO
%mP-8jFGT)"90GEVTl._OQPgejfX)E(h2`+iP4Ga-%&nYSNB).8&R6'i?a@,#MK:$=!hE;Y]8$Z'fIY1g)4Mtd.l'K^C:ZTuE7A_E
%$.,:9-L'GO6pdiiD@3MKch@K,:<HH&2-lkOo*G\GHg%>W7g7t`oWc`]VL'ijp9MdL%A;rkZjIau+R7GKantLKO5Q:0)?S,&NC'oD
%+Nb,;RY6l#B'69c"ZC7:"t+Dp.V-'kAP$X&Fa"/(R6ibm7HL1(V!Nt]pD1,DU)",Z1dK#\9"jj/cc)bge5r8XH=)VNH]i%MTV+ri
%n&^S]]A&h-M/QkPQ0sm+@i#,Zmo7O%.r$uC64T"sapK[1X&M!"$E;(#Z+@3\I1(WQ3Ms@q&b_kS@dm!R<;.Gu.W4UMo?c:MZU2_i
%ccm.ICBA%i8,=V>R/!@$9k2O\X)[G[.uL0"FD#Vb,-4n=Z!/]uG<Vtjei,qu,(McZ$!$<>`GoV)\_+_o_pNtV(mC!6Z9p-B+>*'n
%$+WrD,&5LI4)B/!Z!#^";#6IJ6?Tb#;-abVa;dn7UQ"g<GB_dZ@tfQmh7_-EmH=6>-(OO?i=m\<*sKpg&l(I`<SS(F!hWdDRK?c;
%-0P12)GY"rkN5!dBZagb.TDC#M3)!spXCen"XYH1@a1[9C4:AZFMEJ@9+'X]TBF8M)2U)Z;CA/a]H)jIPU+d<mel%`IlN7)DZ;sP
%ZrF2)ff'R6h/.k+BEklbh*4`m?fuG'ZTjPKZ*eoO9EOj"OPP?(U\4K?2]_9E[-rcfa)1]g//B<jHf3`"GWjmY]KO!lk$IrTolhI$
%FO\;/rq?FYrg7a0ptU+&a\"mD#kkJe,3\P)qVfE7A#(jUA#S4UN]Wir.Eh)UQkSQb+.?Mba\P5DB/ktu-2U1545N.I)iSKj3ch_l
%OlSa.!=6#(OdlpB/"%)7jGnuaU;JPh7n>].B;*tjk8^:C5nnc*TKa\11_U0Re!s3Dc6eW(F/D=n6;1$o([5=/C8#l:oCAb*]GM3n
%93#hH4^o'92b>NVkDnLF6d_E\l?*Y7K4RaK=q-c8R]KtN14--(0VDG'dDOKUeF%4KY9MR\7-6M2.M)-8-q***6c0:;7//Pc0kRC/
%DQXD'+jb+tGdk7o-0$71\HBO:H]ZUM/Uf,@!!ifu*.jWR_Luj<PRR2]?>A'@K7$XE*b#O^#/\ld&lF9'4V+/Q"5@(l4(?GYlo)>O
%lqo.PCRXKE30`rgFOYsP^i)o>(qe[X:J8K(\Bs"$f\Sk'BI0$o&"6J#h+EcZ6B@^(_BV0YXJc9[1\?P1e4E;Xa&(tPZQE]t1l.6j
%X<Vo5`>mms)P%o6d2%$AF:!aX>tO8,lB08Qm"h>XK\`]K#@2A7!A5pSVqka6WCQdj9(Z>%f2jg!/?Df&F#*.Kb86a8nJ/;Bj+>qK
%f8L@&j]*P8A7i>f>oO+>*409Y'"f!D@M=*j'a]r21\!ZRI?^.j/Wp0@:u>T%YfSFL]i+&3Q7D.:.l7D,&nn?inL*bFI31sJ1RK"8
%Pa:6Dk_c&FkX%,5oT3=b_2+\B83:te/jcH"Yad[IOU0`1""+Pp@c95R!`=F?A00^iZVBE-7):=?0iW2iBHbma@dM>JQI^K+-(j$V
%(D6O'EP<KWKgK-<X_*I=&%.0Ij76'+3CO]<LIt5aC`a@Lh)lMco"(h1Pp"2QGTiu02PB7ZEmi4t0rof%23HC*`PN?ijYb.*VWpEP
%%`YM>R]1Vn>"p4UNa6TUSMOr_'kan$bT7:5+n[9QK/E=23PkC@h'M3Xn;oJ:*E-h2>'dc-jM803-')M\0BpE^(c2Wi8M85M.EU'>
%^:Zh)'N-\1+P[%s`Q'fTi*KM3YIgg\A+JqRATq'IcdiC._HYg-FULK9ZFmZn/'Ota`bkCMi-)3r\X*,]BtsYt9]n8tW,IL0A<R:B
%;l$$NEQ"J.!Vs'EX7B54!0RoqQ:XinfqN%WSQ,.+c-aI5XYgf]nj-Kfg=D(Q(IJZ[*1RJl'VO]k#@XBrflHU7iiGDop>QlT2N+4t
%_'G*[J5hurf5H(_G^uf2+C#ATYr$<fNXu[:[Zn-LX\Q;qAd%Q4?#ajl%p^1gKd]k?Bq\!sB<=q6DcP]#`X]lIUP<rX;@Jd+5T1HO
%2^5NJ>EQ:MWHoj+093SYMad(%3Sm?,0%0dF"stfO#""%5)T8l-VIC$@5(*6@5*Q;S8WmK8?e-02`bQ&s9:&;/?MuM(?Y+.V^B75!
%[[6&GnLl1gc`g]B1X@<Ig+ol&MZE%GF=Zt?^*4>XWdpsUkbRG90^=gq!1?.[3?[_Ar3G%'7q\4292d+>i)E`4iS+$20)^ak_()0)
%_9u6g$KMCE&oEebUog'q)ihH86b[X5V)YN>@@6?bn,drBURHN9k1%nfCcu2_2.sndl*<AXTr[eQRd/`!#+&-$V'pUX?5qG-=oGC3
%l8mXf,:\KW(>TCG8BHet3FXC=AjdeQ@O%hX/m>:l/8CMt>[ds'^]lE6pli#nIf4Bt^Hc'35*6j9Bpklgriu=!$EC]R!qL1XYo&)X
%QLK!b)/[r0Bu9%*>H6JX__:m&6pYVM/M!Ju&JiM>R4V8X1R0++oc/L:,!i?=*<E$U;:-MZH'.M."ApI;[_rB[[ed;[;j#AnWi,NR
%5;1,[X*2R#q(tU@-I";,$A/N*0Y#\OTYB.0mfdIDBq`DL*W!SY=T])l,)n('3j_anLLr$uN@V1V,2B&nl<tn`FK&Hq`!Us%\#C."
%qBY7dWQc+qT;tsB0Fu%&``oHHVRn$hh`SM+L.aJTq2beg^@lqjq!'d6j3eLPIp/qP0*eAh+Skn\HOn'XHZS!oMoo7boO6iRJPB:>
%`UU5S@b/U_>!IOs.;Ic`RSoQS%P.Sh``TS1:rP`_c]"1sR"UXhFWVZ.VF]7R(0AhU"V7J$KjAM=#%X\0jmPboWdDnJ1A+KA9g,pZ
%e5+$U""C9.0%D<!0m&9b\a1P)Z>PKoU)Vhb9-=<*A0It2a%@eP1"rr1E=aAs@3.C*>[HX=-d=U22/:ItpT67]I9e,\$SK&B;J`h)
%R4lud`5Yo&\\UZ*A-\S,D*To"BXts[bq]FS(fkTO/uHb_cXHf#FM&rh`F?k)Vl&:mQBH[K]lcW=7:?r3O;_\cOLjJ$,0mohfT74[
%lfDN/g1##sRjr$If^lL>[H&YR9LXj0(>tIfqZr_k2!G8%MRAcCR,qlf.Jhb2del\WG;&PW+F_Xp_OBC6)^>%jS)B=*oS#JYL5A"Z
%CqVJu38>lF+8FI\e/Vo)@ocQAWhk%MrbP;i?#[-G9k&Opq6AE&0sTC<797L7Zd"+:Kka)B];j+E+_kL=Ic6nk$9XaXO6EJoG%@Mp
%6k7^Ir$7^1k#k!(V3n+`lU$^_1cJ-&Q`+.emKA2TFfcMD75[O?#0#/gr3fe]&f9Bg)n%Ae]0D&Lm,h._dhKM_363DCa4:sl(;]'R
%h.=uu"1WruA+IH'7?!82+%$%<H_85rAa<S_RKHZK^ZngpPG1$<63O7U2N!C7D1-NVcoW[I\pNb]<YOG%_:]QqS_L/gj!'au*H;oe
%bP>9'pkA6cnr,oUI4^Bo(s/t*7S.lMfBs#;M>^3(PH)Uhf7<@_kgAS2i1[7c:1a=*4]mTlSDdLTDRnR3I$eUO%CDl$a@;O+QYXDW
%KV[VdmL4qi^ug('>6kl$42N7R^":fcAKQhRW*?<Qf(DZ!3?a/p?Ftl&R7QD#lE&[A@u_C5YSL@\<q&(7VE,c]bO4mi($MO><29gd
%[+IeRKNK9CTcYWOfUa<Z(jEn'mF$(3p2K3s#=PWOT(WdoeDrX<kO]c`CXeJLnhM!6oBc#:@<QJ[RLDb3DTR1P4Nr!)o/IL:j)C6`
%MA.L3l:^[mH&a>V='IRq'(=:SRKh28A>o%Wh(YUUs14L;%hdDQD4llu,8!(SYlXY7jA6@W@*5#m.TEum*GnZaMaj1B\X,Yo?BDai
%io,Qd/1lXh^LNdWeb$iBaW]`*mTQ_Kg'"`CArLL,R-nablC&`ueaZ,/9P%C^XeHZJk$U2Ik"uGT(`8it_liUQE7Y4T*5>7MncqR'
%$\+fA3n/9b]BG.#b\#AVArQ5?QWN:n;d0MnN&;4i/RM;$`WFS[IXK3A[^31EYLY2(p(fYf/^q@UWFTu]S/T7;hW6Y`)f+uZ%[/5\
%Dusuk!s,Xb9'o2FIlQX=(l+7finrpC`!)?l?O2XsR$N"33`VAb]sp2;aKQ4)RJ_]U1IeIBWP&0*,=^ug)It_EgsT[C&T]qW'T:sF
%A@#U9[48F.<HbE6<iSt[jbg$IMm[[h'G!Vl:A4[pr4I@j<Y5md2(;+mCKjar9Z!`M@$.87/fmcf4:7,qgmk-2(`fbjiF-NLW)*M[
%l\9sd@U!M6@2_$=8c,bn3T5_95GjWQ6`)ILL'&Z$-VKJ\JD4ILdetbpn).)%($3A1=@t8fnfgFpF50KH*Cr!q%\@oa]U[h<"l,3j
%FWh_fS&L+@K<8QhLe_kRkO%Hp,DRRB@Q9a5idC`)l8s4(!!#h1H!U0iW+VF#pCP=_7,MPEC+Glpm#oG_8UdqAk;`BTMMMu_R2"F)
%;TWNbr4M1#g;"W]VV,/N=e2(8JBrdAEd8K%#>h$`4JBb:0<_o6(\LcTZ*4YO(DmAQ:XX_`k,M\D`\E&P3h9F:kS3AIFU<T8G$GMc
%H@i$[@)O;.+$<BA9hAeSp+/0n7/m5ScEG3I,e;q'$i:t:162m4Pu[YCd9^WC#j_d@d$#'$(`QMfbD_S2[s.hsM6+F+h._$#gh(2C
%Sq^(tlDgr0aN,#B:1UauCU"`M@r8Knca"H'\Zp(YC9?pK$BCK&N=\i^i#g]^b-(Mha,i0TWo(=J+Yc-1ObX1.)Nga"\."b_p8i-F
%1`pE?V_NiJe#248eIq`_brm9'U^hc`mA=RSTNYUM?r).1@&$!Lgpq+cEf>OaF/4Xug<cV2kZ^!1G;F,V\*KFY(Ce0n:?P)P*4;M!
%*IGZ3#7"Kgq6?$-KMSu(&8Wi*941n^POO.P*hfGh62A&;;4XgDUIi#MG@fK?-p54%4.\P^WKU]DT"WD8ME:YE8i2:_BVSH,DqJWB
%LWH#=D4VKp2A!-A2:7GWUc[q<X[hbkZlqSf?#&,>O(^n9,au4N"kh0A(JfbsjCXf'(t`\SD]PRpZ-G'8Y]W\b0p8;J"k\`^+RcJJ
%el1X;g6TuNmn;q]DA_?5(KEl,o;HI[#-o[J/<13=UFF#gL3Z5s?&_-1MU<b0qpM>;8:aXEJk%0"$1Q+N>R]r0SLIEm'Pn7jBMCgE
%U0>.XE0/EH3!a85k-\I?V7Cm$m8ha/LEaAP9+sJq%I1Z4IEs:S/#TO,-eqA/afRVZmQ/K#(MG*FlKQA#K^7k,DTa)Am;:`fI9W3O
%aGrCd*`o?"SJI)efS9:Q0Sbc!MmLk:Ak7q5e^`G@SY*5nk-pEJ,bG%fN9eaN3]V"r3>B5gBH@.m@D7:`RL6]hQFBgqC;ZH*-9M&g
%]6ANC#h!=0Tb_bcR:Fq*c5BT&F`^<A#Ldc@Re/LkPFXpYf$g$`VEO*K/it=,7<Op&[/+o$:#:rA46sG'#g]`M\7"FP>COV0^[./g
%(>[YR5"H[dM&L'G^$CWEOOs$pR'+([gM"LOH+ai-Kk8`qGjj>Qo.jA//h\3mCtrtjha=iW3NJ"[%FC72$Y`^f(oKN`KVn)5DZ6`j
%#UImLof\]9B$"Q<80C]q"\A#r2>N7n[U4CORuZiNJ]p_X3nOJE(LX!p-RWQuW)McOaV32q2%k6I#*q:54VEK+A$]KkacYG"*`9a^
%Tf8`t(bjZ97#Xi9MQK)_o$XM1G0gL.nf3L\gkmQ6_hedj/ku_P?EIG`T?*jn4fg&9D05]3mORdCJ2FOm/p%78cT:q71Q>?183';8
%:%tC5j/@MXM,W#V3E&Ot`37R!FJftq6R,-?GF$u&B2A1?f1,_\l(Y$Zg\(]?f^#b4$5M)t3&&6@&:_!r(j&K#R*@<dk5n0#?PNto
%5<7`UW-DUpOIC:pKTnDq,mqe&:\4Bq*jk&Iq@,Y1es]913BH/ka;k"RE!Y=tg66urAV>Bqh'YO*>^[o4p;nZ_\,"ER$$O+]_JX2=
%)8\Q^!8W%68BjY5>Z[Vf2U'(>K>U9N:UAd'i6DnJ$:p96;Oi[H[FOIPo4ENh5dsQ@So]MiTYWQ%-&q3X]__GIIZk?]C\GY^&Hnta
%Z96`FrQ1<I\939jf=C4TcXNr3.We2<F!5t+49D(P*VTR"6#cQ.F>8*-bUHM+h,JDGcr!6$+:21cH1_2jTs@V,'gUhL^W3r@Jiia_
%@,(($#QP-')O,0X]Tq31IK\W4k"o=`s3ZU#6feY3-4oNWO_CdXTgYN-n27QNL->9YeR:/K1e6Yd6'_.UTNY=?e:]Z0DUN&tY=]/q
%#`QqeAU]VL-FUf@@6`4[B-*JcT/A-='`Zs9,m]cQoYAPdcnu!37=SS#.cKa"WMjYt;i5(a>16$B"<:$jB)`hh[i\p<]Z+H!rB*,s
%)-Uh8=F0rI=Y1ac,N"3>A+"c`V:3KVG<k<4=2,93VB?!IbU-A)i!&nm?ll:a0chW%37Al&RFnO,9->-U$/EJrp$bO$,Rqr*\5H]j
%QAiJm]&t57pIG=TRSIT_1e/?Z0i:Hh+D']UqX0H_3N:mFG8Z.t8]o/]:-I+WD]-S'5uP/Jeuq`f#@fW:VZQU/n`iG<oKId-KL`\O
%HEc.'qM;$pG^?8<g\N$1^oj([)]r1YfB_&2cH;Fgm1`$lnhm^b?b&UsOrGkukU4MM(JS7[LCrO:qT@quH4@-P=c^t`*s*pnBWoX6
%A6pr0P/0W6BWPn;Nb$4EJj2ncJd-$dL(&[%6W9J.-R'Bc&Jj!E;0]NP*G]6@7:mR]PR:X6eoi45U@$KdT*p9aG.Mr?VE4Y;3+)^U
%:.;NR7Q!Hm?ZV_R.%Brj\F\utGjsOP-To;OVsH-%22O&g=.)7-';cN@RBep,\sna2:F:$@#?']Vmr<s/?a<I-9o/dFM+N7MmJce;
%S_h*cl)HHZc!P-?,J]oQ*f3"g5+bMkOiDUT%P:jg3VUFVQA0!t8.AK2$!aHhD*<:#c#n2H,F=:-ni?E3X_L4SJ"eM6gO<*b^t_;a
%l,qS`9t8H3;S?kZYhrNeO@oRjEei3n\?_NNn'j();0d=%H.PJX=8"s9X4C#/e>)C$KCbe,pS"O`FU\Fa,A767@f9-s+aXaj;e,-V
%3af"0F[ub8=09MVLI<l)=nXXea'RNa]_=>.]umtPK[/<?7H_EK[K]4dZS$(q6SN=Sd\!u4:m>O$_bc1ahr(ag4]"$Mc1hhjL0d*=
%R@0p`f.mKI*]*@'H!2kYPj%Ps1E7t0;KM'S"F>a%qHGS/_X+J\@0(:^)p(.:G@lLA+C!n_oLrdN'SWg;ZTKs#`D0S;LN`66AG1jR
%1Jk/$s*T_nJ5j#'G`5.;$1\JXn[epG[!@jj%YRn.^ND\$B!DBIe>h7*5^^M#!.cIC:"&IjPm:V]ja^!+epn;ekVP.fT1YZTQegJe
%mlI7pi'R5'V4g3Rd10efQQBR$W.*RN1a6\3N2-$1FhXWV9!#nA:>hH)U'Tt2KY15Jn4hr"SqViH3r*#62A3c.dF]XqLb60]BUY!i
%N<&k^=R3h`2"6?LNsUWRK*C%U:M2h$o<dFAa^`!4V8Rdubju6(it,6k=.`&*PU\BULO)dRNH\KOq0XT6n3,!DpSBaQ@[*L!J+l;f
%2pn#TXtcKEmZsj$'U\u]o?Kf/3($u;8cE#9ZkD>UlW0sCWi@FT6rpM,4)1_VcFquQHa7,p<i3!,qSq@"T'_Rt;e=S,7oQRN\3`]5
%Q">(u=ZFt>c+<Jl7srRSPkgC7mKmVKDbLa$VPl]*UFVqp`T;^L@t\-W5F[:(9Sm$)[-ci21_pLc#$>$Yq\Zc11b^CTP6]ljS<HN$
%UM26`eFi.A]FoM8;<&0I&B%U<jmG[e!8u^2au5$^qD0V/k+>!lkoPiNVkDtIlVNa;'I)M`?2Gr&LajjdpE9i^IBn!,HuB4#IKd?4
%&la3b&'t:*]G;0B+L1@tfOa'8!WgIS)=1u0KIKZ<gI>>86Bj&j!0;DCX4[N5oCSTV^meYnnk^W9^YR,*0&qKt%Ys,U]-U9GT51u[
%Te6-b:!8\\*KJgY(Yh@'*o[(Krfo*1;]mJD@j5$4:2XoMdCPLbHRoA9-FZ6pPKKqR5+l5%'VhBO%M1*127>7B3JVC]Q82INSU#(1
%ZBZ<2c<\B@p3&D6eAXS+8l9%F3JtsteSE^#6i#\[3qpO;;KV4bWl.;fCQLWI3?Js10g!.g`K<D[d(qQ&q.nN_0L2cUq>8HO&b/Df
%/,nI`Sbp`i@l&s*h3_*S_kYn:M)UEA"@!'Q$M0MD)j=?h\"<:9`G=D[IdDXVC+mu*2?!K&:]Oe,HBcUC5`SR;iA6N.OuBkEOUKp'
%N:<'P*Nc7I,bADT.PGno)@*Fk0gc,XGu7"PXX8W@N:_<M3&;**o,pZ1.T:&KO?a]U(<;rmN7@WL=NA2$3AWU2]eNq9]Pq4?XD,oA
%cS=jXf@6jI:91+*\R(Y&>?9&;@0V0BZ(D0YmNh6Xs8-"CEHdtUi)$UZ(U7erLM$&<)HA7%VRI4eV\@T\dmXKOI6SpkS$Bc-Y4Ds]
%F'd'V6KAA[_tJ,D^GVGuL3Mc:lhnMbl]Q&L'Tc;'6^[D;:dOnZ#l_kI4Z#),96W6sA@UO8:*Z;N9nTX_hU>F:OI)=+NLoaRXB#@@
%F9MllP>Ub:?#)jt#?/euCUeP&c9hTAc`tQ+Zfl.-<IRXT5"=n\+GdMN?X$).(&XJjX(q7)]2NH1AQ,\9D<2_2$,ZSL3""IOS`-[$
%18c`T6MWB#]&M""rk^17D\SJEH1md-F^#0kPTa1&kfmZ.?8<9Vn5*4ZgddLAEb2C2itQ@^[Gh-KiFW?t[?TkL<=ALKPlZR1-/;Jh
%>9Nf('A_mDSDB`=kH,$`Rol`:)6'eS>B<_I*S7BTJPl1+[Zr018Kjl$:A&H_eKNO8dQ$WogQ'AF,V,h9pJdJ;O>Tr(;g/5Y:!O>B
%'3)\D);\=;cP,'ggaLm](9R3HF9A5LcMurR?F`,b:\)!bU!m:2^F/oZopD\Yf#E*1OkhmGL5M_&_ZsA\>a8?F<2>R"`"VFkLJ?bP
%JQC0#("Ng'bOlme<bscSW^of[e7AWn_)cNUf`p^NI_ZsB&="_-k\12Nq!G@F2kNYL[VB>qUPT-DpVQ6#To[[j/quld!"fA@g<Wop
%p.dF(/7"s>f4h32[E\KNGYP_$!.iR!NMhf(IouU;mS8T%1lAF=FR)IZX([)%fk'TSc6[tqdm=Y'fcJZogsomXJo6S!/S+@qBDZR;
%qr5<^<nnDpE7NBm<-[P7\V\na:K3]\fOgDA65mg0#-Mc@5_qm":^s*"M8HGN7p77M=HOB6>.P`;J.a#.]!9sf4$KgW(q"pXqZ]3S
%'dc#T$aRcr?%bQ=b^gcW4Ko8C8t,$U`bWrhVO[glr==$jQAS8M.A.C)b/=ba8Ggpi.@X42T,,SN]Re8^$2)_cG<T-ZSp0(n#d9G1
%f8ir>!*WG(#k^tU2T<+G"cE6`b?97ZY'ligq)U1$9Xb`iB`JX?kfkD]o^GfG7]AeEYo4AP@g!oONKH]7biQ1o9^\7e'nI>j)gSq1
%WGO:IKMn;XKGh8WSSWgO8*$IBVcb&&>1>=le<G-Cq"-fZ["Ctif`J1t9.p<?)YXAf%R^2`"*3ZMGIRT&U#-utODLJ039m<Z^4Zkp
%n].2B8eX<+.9\9G*7)'soZ*Um`q3R;)t!=M`q_]qoJsCAkLUE\&m6B28]7rJQ6Rm><:AT^Jh9F=RkmR2XY>Q?"`Y6I&BZM,iIEAZ
%KK5oC.0Mk\(qt&<O,U"qPqB2Z[8kS2X76`*M%E`[X]9VDSr--=).K)-YXK#F=%9WdZI3(jG)h]i%ASUF(-f1Tdt'rW\,\&t:EZ#f
%4,V>6LJk--'jp:0@e?bnggUI=2DrUO-$dtd3sZ:S\]K0DC8`!9kMZ!W?>h'3EPYX2IWW>$NujPRW^oe)E(LA'*+'o)js9c:+=UJW
%-VO*%2Y,*#Za_hF/U>c'`_n9M5"GJ2d2_sg#3A9pHTI>gd_X!ZI9N%mk)(&)Yt$XF,@=ks)FO]u9E<\aq5K%GLfo.4=caf&F+0D(
%%/En)r?r+R].cc\K?d"%ALJ^1fW7Q0N4EYH![9Gc3M21/-nJ)G.rc=<D!Fh&&A/i3>*3rIV`^3ti^=0<<5fmH@t/=,jf=F^/Rt8(
%;--ap&WGS(]WXfIMe3@i2XT\Dikk)^nkH%D^p3BkU0D@s*5tn_mc/"9oVN=8WF9%V$p-_[9-,^@f@3b7T2&#uF&51\f=pC2+o^@7
%bn,>'G8%<uFebY%c:&fK,l%3un1((iB=CCe&lD?81UW(Vf(G0`KLADM8d/pVauHk/aIG`E-q;rdS1],:?@0ETEN``X[G3Tf"m'f"
%I6nFj<(Y?7*\/*7%+VP%<*kA.H43\.A(Y'0Acbrr&\MBeL:>c)mHsT0Gd<.``H*_'J!=;m6."XJ3IWH5%m6I*fcd+.cu-aiNtrWp
%2N'Si3`@YJpCZ\o(&2`b'jgOrXr#+N#eIp-SaFI%gr4,5"I=@]G_BZ",<S*V_mL:6p2JV6UMu^ijn3rKK/k]t^>#*j+V@Xc4FGo7
%oWZ2E89)Peo]`64l&/?1cgFP()6DJoYM>[tcKcI0XaoK/Zh3LER=`E*/IK'e/5Wm"VQmTBb&J?g_nUmreA]D&EI>cP\Eei#*oK4)
%Q"B*6.BMprSiW`5qYO^McS(m_]_(3Sc<GbpqS2^"7YF(9j;CUmd).tQ?^6-.;M.+6n*hE3WKdb2??rNHZhs>',;jLu54O^t.aasp
%D;CJ)bACfb:fF[B+WHO79>mmn's%$fYA?GdZ)+#t9hmP#QHrmYkW'RMRN_ZFLQbbiVscm^.Z.WBFYOk'A,^HH2ebGfi1qEir@m(u
%W48RqLPqj\$)pjH;b:&X@@Ko<N[QQh%i?qdO/0'h.e5ku`XpNh*U0bej%U&+Nf=Go*Bkkl+en_qYoS^STCc6@l3,XG=>[O[IVftk
%_d>ojjMf)<_RK@,gKkfY)172I4*<9r3g[=0j=45Vq$bGk*uUmI^_[eo]\7Yc/)tRn#l5;7/dI`HV;ZpGmr"AePoGK<W$..iL,f"+
%IeW\]f3L"go[<`g`cMl\qs+_:j9.Af4428EUpk%3f8^U9"J,bqhd$PE1/=$CK%Q<HJPoY#69eSBM<q/CeI7<(i/,M:2,QiiG9Xq=
%?;.V+N*TpS?(Rj?RZ?1boXG%BD>@5al+lAB]=X+Loat&"NRA.#"g+noacb<.7cDIc9%ii[4C:ND\W,M]j_f\CVm">fg4D2OPbqrT
%9CTk<6Q7071>YM6_gL:`MkTRI?GF5AKlK8mIAF2FqdK/iYAR"S.&-V#1G%S_:@!HQ0"uSho<-s\_Je<TM?SFab<9m%LEp]>a/m&8
%bW!POIa>bjLPX*u.'F\EMV8dsro@Y;R/?Ns:1n+6hcl7__B,Y4>$=TQE=2E2`r!h'RPFQe`MB@$UYB)lf/*13(\X,'\\'NR(IFoN
%T4&W)=<AUZiSr$^5&YdZ*.Ibm%eQqflf?YDrL\#?i6W#uY+MfpmM;>N]Q-0*](r$qS3M3H&Ecih4XLH#[C[JX_dEl:H1%B<q+!+c
%&Tgq57Y2*3Rk9Wm/lJ3>[OE)IKI5o1"t=m?Xre`$Ki3M5T'=0aREK))M/s58H<YFJ6V8q,(=$7GjPc?F5fgU+UNf2kb'bO1U2X;,
%]3A=-VFHiEaAkqC)LCaR#NUt1B4(SUYr%11CK3CZY%Abe1%.Nd<rT+Q:cV\r`tgNZjBN3/Z-j4.Ok7VO[[EIhC9.+&TBEuhe%Zq'
%2<X2X%pqO"FE]YQ5Q&QW+$]bf:ETRKY4UWOm`1qaI/`p'_k6qHSNm*brmR>YJ,8s3s8MhlO)KLHmm$go(4LB)i.iERjkp+2pV6TTkOh"@~>
%AI9_PrivateDataEnd
